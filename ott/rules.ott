%% Semantics for FCD

defns
JTyCon :: '' ::=

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Type constants  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defn
P : k :: :: Prim :: 'Prim_'
  {{ com Type primitive kinds }}
by

----------- :: Type
Type : Type

defn
S |-tc H : k :: :: Tc :: 'Tc_'
  {{ com Type constant kinds }}
by

T : (as:ks) \in S
------------ :: ADT
S |-tc T : MPI as :Rel ks. Type

K : (D; T) \in S  // T : (as:ks) \in S
----------------------------- :: DataCon
S |-tc K : MPI as :Irrel ks, D. T as

P : k
--------------- :: Prim
S |-tc P : k

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Types  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
JTy :: '' ::=

defn
S ; G |-ty t : k :: :: Ty :: 'Ty_'
  {{ com Type formation }}
by

S |-ctx G  //  a :Rel k \in G
-------------- :: Var
S;G |-ty a : k

S |-tc H : k  //  S |-ctx G
-------------- :: Con
S;G |-ty H : k

S;G |-ty t1 : PI a :rel k1. k2  //  S;-rel(G) |-ty t2 : k1
------------------ :: App
S;G |-ty t1 t2 : k2[t2/a]

S;G |-ty t : PI c : phi. k //  S;Rel(G) |-co g : phi
------------------ :: CApp
S;G |-ty t g : k[g/c]

S;G, d |-ty k : Type
-------------------------------- :: Pi
S;G |-ty PI d. k : Type

S;G |-co g : k1 ~ k2
S;G |-ty t : k1   //  S;G |-ty k2 : Type
-------------------- :: Cast
S;G |-ty t |> g : k2

S;G |-co g : t1 ~ t2
S;G |-ty t1 : k1 // S;G |-ty t2 : k2
---------------------------- :: Coercion
S;G |-ty g : (~) k1 k2 t1 t2

S;G |-ty k : Type  //  S;G |-ty t : s
forall i: S;G;s;t |-alt alti : k
alts are exhaustive for s
------------------------------ :: Case
S;G |-ty case_k t of alts : k

S;G,d |-ty t : k  //  d = a:rel s
------------------------ :: Lam
S;G |-ty \d.t : UPI d. k

S;G |-ty t : UPI _:Rel k.k
------------------ :: Fix
S;G |-ty fix t : k

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Case  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defn
S ; G ; s ; t |-alt alt : k :: :: Alt :: 'Alt_'
  {{ com Case alternatives }}
  {{ tex [[S]];[[G]];[[s]] [[|-alt]]^{\!\!\!\raisebox{.1ex}{$\scriptstyle [[t]]$} } [[alt]] : [[k]] }}
by

T : (bs:ks) \in S   //  as = prefix(bs)  // ss = prefix(ks)
S;G,as:Rel ss |-ty T as : s0
S;G,as:Rel ss, c : t0 ~ T as |-ty t : k
---------------------------- :: TyCon
S;G;s0;t0 |-alt T as -> c. t : k

K : (D; T) \in S  //  s0 = T ss  // T : (as:ks) \in S  // xs = dom(D)
S;G,D[ss/as], c : t0 ~ K ss xs |-ty t : k
------------------------------- :: DataCon
S;G;s0;t0 |-alt K xs -> c. t : k

P : s0  //   S;G,c:t0 ~ P |-ty t : k
-------------------------------- :: Prim
S;G;s0;t0 |-alt P blank -> c. t : k

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Coercions  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defn
S ; G |-co g : phi :: :: Co :: 'Co_'
  {{ com Coercion formation }}
by

S |-ctx G  //  c : phi \in G
------------------ :: Var
S;G |-co c : phi

S;G |-ty t : k
-------------------- :: Refl
S;G |-co <t> : t ~ t

S;G |-co g : t1 ~ t2
------------------------ :: Sym
S;G |-co sym g : t2 ~ t1

S;G |-co g1 : t1 ~ t2
S;G |-co g2 : t2 ~ t3
-------------------------- :: Trans
S;G |-co g1 ;; g2 : t1 ~ t3

S;G |-co g1 : t1 ~ t2
S;G |-ty t1 |> g2 : k2
----------------------------- :: Coherence
S;G |-co g1 <|| g2 : (t1 |> g2) ~ t2

S;G |-co g1 : phi1   //  S;G |-co g2 : phi2
S;G |-co h : phi1 ~ phi2
----------------------------- :: ProofIrrel
S;G |-co <g1,g2>I^h : g1 ~ g2

S;G |-co h : k1 ~ k2
S;G,a:rel k1 |-co g : s1 ~ s2
-------------------------------- :: Pi
S;G |-co PI a :rel h. g : PI a:rel k1.s1 ~ PI a:rel k2.(s2[a |> sym h/a])

S;G |-co g : PI a:rel k1. s1 ~ PI a:rel k2. s2
------------------------- :: ArgK
S;G |-co argk g : k1 ~ k2

S;G |-co g : PI c:phi1.s1 ~ PI c:phi2.s2
-------------------------------- :: CArgK
S;G |-co argk g : phi1 ~ phi2 

S;G |-co g : PI a:rel k1. s1 ~ PI a:rel k2. s2
S;G |-co h : t1 ~ t2
S;G |-ty t1 : k1  //  S;G |-ty t2 : k2
-------------------------- :: Inst
S;G |-co g@h : s1[t1/a] ~ s2[t2/a]

S;G |-co h1 : PI c:phi1. s1 ~ PI c:phi2.s2
S;G |-co h2 : g1 ~ g2
S;G |-co g1 : phi1  //   S;G |-co g2 : phi2
-------------------------- :: CInst
S;G |-co h1@h2 : s1[g1/c] ~ s2[g2/c]

S;G |-co g : H ts ~ H ss
-------------------------- :: Nth
S;G |-co nth i g : ti ~ si

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Propositions  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defn
S ; G |-prop phi :: :: Prop :: 'Prop_'
  {{ com Proposition formation }}
by

S;G |-ty t1 : k1
S;G |-ty t2 : k2
------------------ :: Equality
S;G |-prop t1 ~ t2


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Telescopes  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defn
S ; G |-tel D :: :: Tel :: 'Tel_'
  {{ com Telescope formation }}
by

S |-ctx G,D
----------- :: Binders
S;G |-tel D

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Signatures  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defn
|-sig S :: :: Sig :: 'Sig_'
  {{ com Signature formation }}
by

----------- :: Nil
|-sig S0

S; empty |-tel as :Irrel ks  // T # S
----------------- :: ADT
|-sig S, T : (as:ks)

T : (as:ks) \in S   //  S;as:Irrel ks |-tel D  // K # S
------------------- :: DataCon
|-sig S, K : (D; T)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Contexts  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defn
S |-ctx G :: :: Ctx :: 'Ctx_'
  {{ com Context formation }}
by

|-sig S
-------------- :: Nil
S |-ctx empty

S;Rel(G) |-ty k : Type  //  a # G
-------------- :: TyVar
S |-ctx G, a:rel k

S;Rel(G) |-prop phi  // c # G
---------------- :: CoVar
S |-ctx G, c:phi

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Reduction  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
JStep :: '' ::=

defn
S ; G |-s s --> s' :: :: Step :: 'S_'
  {{ com Small-step operational semantics }}
by

------------------------- :: Beta
S;G |-s (\a:rel k.s1) s2 --> s1[s2/a]

alti = K xs -> c. t0
---------------------------- :: Iota
S;G |-s case_k K ts ss of alts --> t0[ss/xs,<K ts ss>/c]

---------------------------------- :: Trans
S;G |-s (v |> g1) |> g2 --> v |> (g1 ;; g2)

S;G,a:Irrel k |-s s --> s'
------------------------------------- :: IrrelAbs_Cong
S;G |-s \a :Irrel k.s --> \a :Irrel k. s'

S;G |-s s1 --> s1'
---------------- :: App_Cong
S;G |-s s1 s2 --> s1' s2

S;G |-s s --> s'
------------------ :: Cast_Cong
S;G |-s s |> g --> s' |> g

S;G |-s s --> s'
-------------------------------------- :: Case_Cong
S;G |-s case_t s of alts --> case_t s' of alts


S;G |-ty v : PI a:rel k. s
g1 = sym (argk g0)      //   g2 = g0@(<t> <|| g1)
% g0 : PI a:rel k. s ~ PI a:rel k'. s'
% g1 : k' ~ k
% g2 : s[(t |> g1)/a] ~ s'[t/a]
----------------------------------------- :: Push
S;G |-s (v |> g0) t --> v (t |> g1) |> g2

S;G |-ty v : PI c:phi. s
g1 = argk g0 //  g2 = nth 2 g1  //  g3 = sym (nth 3 g1)
h' = g2 ;; h ;; g3  //  g4 = g0@<h',h>I^g1
% g0 : PI c:phi.s ~ PI c:phi'.s'
% phi = t1 ~ t2
% phi' = t1' ~ t2'
% h : t1' ~ t2'
% g2 : t1 ~ t1'
% g3 : t2' ~ t2
% g4 : s[(g1 ;; h ;; g2)/c] ~ s'[h/c]
% h' : (g1 ;; h ;; g2) ~ h
% g1 : phi ~ phi'
--------------------------------------------- :: CPush
S;G |-s (v |> g0) h --> v h' |> g4

----------------------------------- :: APush
S;G |-s \a :Irrel k. (v |> g) --> (\a :Irrel k. v) |> (UPI a:Irrel <k>. g)

K : (D;T) \in S   //    T : (as:ks) \in S
S;G |-co h : T ts ~ T ts'
k = MPI as :Irrel ks, D. T as
forall i: gi = build_kpush_co(<k>@(nths h);ss_{0..i-1})
forall i: si' = si |> argk gi
% kind K = MPI as :Irrel ks. MPI D. T as
% si' = s' |> argk (kind K @ nths h @ ...)
----------------------------------------------------------------- :: KPush
S;G |-s case_k0 (K ts ss) |> h of alts --> case_k0 K ts' ss' of alts

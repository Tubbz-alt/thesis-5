%% System FCD

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Preamble  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

embed {{ tex-preamble
\newcommand{\vdashy}[1]{\vdash_{\!\!\!\mathsf{#1} } }
}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Metavariables  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

metavar K                                     ::=   {{ com Data constructors }}

indexvar i, j ::= {{ com Indices }}

grammar

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Constants  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Prim, P :: 'PrimTyCon_' ::=
| Type             ::   :: Type

ADT, T :: 'ADT_' ::=
| ( ~ )            ::   :: Twiddle

tycon, H :: 'TyCon_' ::=
| T                ::   :: ADT
| K                ::   :: DataCon
| P                ::   :: Primitive

adt_kind {{ tex ( \overline{\ottmv{a} } {:} \overline{\kappa} ) }} :: 'AdtKi_' ::=
| ( a1 : k1 , .... , ai : ki )   ::   :: Vars
| ( as : ks )                    :: M :: Telescope
  {{ tex ([[as]]{:}[[ks]]) }}

con_type {{ tex ( \Delta, \ottmv{T} ) }} :: 'ConTy_' ::=
| ( D ; T )       ::   :: Pair
  {{ tex ([[D]]; [[T]]) }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Variables  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

var, a, b, x :: 'Var_' ::= {{ com Variables }}
| _                     :: M :: Blank

covar, c :: 'CoVar_' ::= {{ com Coercion variables }}
| _                     :: M :: Blank

vars, as {{ tex \overline{\ottnt{a} } }}, bs {{ tex \overline{\ottnt{b} } }},
  xs {{ tex \overline{\ottnt{x} } }} :: 'Vars_' ::=
| a                     ::   :: One
| as1 , .... , asi      ::   :: Many
| nil                   :: M :: Nil
| prefix ( as )         :: M :: Prefix
  {{ tex [[prefix]]([[as]]) }}

tycovar, z :: 'TyCoVar_' ::=
| a                     ::   :: Ty
| c                     ::   :: Co

mixed_vars, zs {{ tex \overline{\ottnt{z} } }} :: 'MixedVars_' ::=
| z                                  ::   :: One
| mixed_vars1 , .... , mixed_varsi   ::   :: Many
| nil                                :: M :: Empty
| dom ( G )                          :: M :: DomCtx
  {{ tex [[dom]]([[G]]) }}
| xs                                 :: M :: Tys

fvset :: 'FVs_' ::=
| { zs }                             :: M :: Set
| fv ( t )                           :: M :: fv_type
  {{ tex [[fv]] ( [[t]] ) }}
| fv ( alt )                         :: M :: fv_alt
  {{ tex [[fv]] ( [[alt]] ) }}
| fv ( D )                           :: M :: fv_tel
  {{ tex [[fv]] ( [[D]] ) }}
| ( fvset )                          :: M :: Parens
| fvset1 \union fvset2               :: M :: Union
| fvset1 \ fvset2                    :: M :: Minus
  {{ tex [[fvset1]] \mathop{\backslash} [[fvset2]] }}
| \emptyset                          :: M :: Emptyset


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Binders  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

relevance, rel {{ tex \mathsf{r} }} :: 'Rel_' ::=
| Rel              ::   :: Rel
  {{ tex \mathsf{Rel} }}
| Irrel            ::   :: Irrel
  {{ tex \mathsf{Irrel} }}
| - rel            :: M :: Inverse
  {{ tex \neg[[rel]] }}

% visibility, vis {{ tex \mathsf{v} }} :: 'Vis_' ::=
% | Vis              ::   :: Vis
%   {{ tex \mathsf{Vis} }}
% | Invis            ::   :: Invis
%   {{ tex \mathsf{Invis} }}

colon {{ tex {:}^\mathsf{r} }} :: 'Colon_' ::=
| : rel                       ::   :: Colon
  {{ tex {:}^{[[rel]]} }}

bnd, d {{ tex \delta }} :: 'Bnd_' ::=
| a colon t                        ::   :: Type
  {{ tex [[a]] [[colon]] [[t]] }}
| c : phi                          ::   :: Coercion
  {{ tex [[c]] {:} [[phi]] }}
| o : phi                          :: M :: ErasedCoercion
  {{ tex [[o]] {:} [[phi]] }}
| d [ theta ]                      :: M :: Subst

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Pis  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

PI {{ tex \Pi }} :: 'Pi_' ::=
| MPI       ::   :: Matchable
| UPI       ::   :: Unmatchable

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Types  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

typ, t {{ tex \tau }}, s {{ tex \sigma }}, k {{ tex \kappa }}, v,
  ee {{ tex \epsilon }}
  :: 'Type_' ::=
| a                            ::   :: Var
| H [ ts ]                     ::   :: TyCon
  {{ tex [[H]]_{[ [[ts]] ]} }}
| !!! t1 t2                    ::   :: App
| !!! PI d . t                 ::   :: Pi
  {{ tex [[PI]] [[d]] .\, [[t]] }}
| t |> g                       ::   :: Cast
| g                            ::   :: Coercion
| case _ k t of alts           ::   :: Case
  {{ tex \ottkw{case}_{[[k]]}\, [[t]]\, \ottkw{of}\, [[alts]] }}
| \ d . t                      ::   :: Lam
  {{ tex [[\]] [[d]]. \, [[t]] }}
| fix t                        ::   :: Fix

| t ts                         :: M :: Apps
| H []                         :: M :: HEmpty
  {{ tex [[H]] }}
| H **                         :: M :: HErased
  {{ tex [[H]] }}
| PI D .  t                    :: M :: Pis
  {{ tex [[PI]] [[D]].\, [[t]] }}
| t1 -> t2                     :: M :: Arrow
| t1 ~> t2                     :: M :: FFArrow
| ( t )                        :: M :: Parens
| phi                          :: M :: Prop

| t [ theta ]                  :: M :: Subst
| typeKind _ S ; G ( t )       :: M :: TypeKind
  {{ tex [[typeKind]]_{[[S]];[[G]]}([[t]]) }}

typs, ts {{ tex \overline{\tau} }}, ss {{ tex \overline{\sigma} }},
  ks {{ tex \overline{\kappa} }}
  :: 'Types_' ::=
| t                       ::   :: One
| ts1 , .... , tsi        ::   :: Many
| nil                     :: M :: Nil  
| zs                      :: M :: Vars
| prefix ( ts )           :: M :: Prefix
  {{ tex [[prefix]]([[ts]]) }}
| ts _{ I1 '..' I2 }      :: M :: IndexPrefix
  {{ tex {[[ts]]}_{[[I1]] \ldots [[I2]]} }}
| ts [ theta ]            :: M :: Subst

alts {{ tex \overline{\ottnt{alt} } }} :: 'Alts_' ::=
| alt                    ::   :: One
| alt1 ; .... ; alti     ::   :: Many
| nil                    ::   :: Nil
| '|' alts '|'           :: M :: Erased

alt :: 'Alt_' ::=
| p -> c . t             ::   :: Alt
  {{ tex [[p]] [[->]] [[c]]. \, [[t]] }}
| alt [ theta ]          :: M :: Subst
| ( alt )                :: M :: Parens
| p -> o . t             :: M :: Erased

pattern, pat {{ tex \pi }} :: 'Pat_' ::=
| H zs                ::   :: Con
| _                   ::   :: Blank

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Proposition  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

prop, phi {{ tex \phi }} :: 'Phi_' ::=
| t1 ~ t2                      ::   :: Equality
| phi [ subst ]                :: M :: Subst
| coercionKind _ S ; G ( g )   :: M :: CoKind
  {{ tex [[coercionKind]]_{[[S]];[[G]]}([[g]]) }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Coercions  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

coercion, g {{ tex \gamma }}, h {{ tex \eta }}
  :: 'Co_' ::=
| c                            ::   :: Var
| < t >                        ::   :: Refl
  {{ tex \langle [[t]] \rangle }}
| sym g                        ::   :: Sym
| g1 ;; g2                     ::   :: Trans
| erase _ h t1 t2              ::   :: Erase
  {{ tex \ottkw{erase}_{[[h]]}\,[[t1]]\,[[t2]] }}
| H [ gs ]                     ::   :: Con
| g1 g2                        ::   :: App
% | PI ( a1 , a2 , c ) colon h . g             ::   :: Pi
%   {{ tex [[PI]] ([[a1]],[[a2]],[[c]]) [[colon]] [[h]]. \, [[g]] }}
| PI a colon h . g             ::   :: PiTy
  {{ tex [[PI]] [[a]] [[colon]] [[h]]. \, [[g]] }}
| PI c : h . g                 ::   :: PiCo
  {{ tex [[PI]] [[c]] {:} [[h]].\, [[g]] }}
| case _ h g of calts        ::   :: Case
  {{ tex \ottkw{case}_{[[h]]}\, [[g]]\, \ottkw{of}\, [[calts]] }}
| \ a colon h . g              ::   :: Lam
  {{ tex [[\]] [[a]] [[colon]] [[h]].\, [[g]] }}
| fix g                        ::   :: Fix
| argk g                       ::   :: ArgK
| !!! g1 @ g2                  ::   :: Inst
| nth I g                      ::   :: Nth
  {{ tex {[[nth]]}^{[[I]]}\,[[g]] }}
| kind g                       ::   :: Kind
| step t                       ::   :: Step

| ( g )                        :: M :: Parens

| o                            :: M :: Erased
| g1 @ gs                      :: M :: Insts
| let c := h in g              :: M :: Let  
| g [ theta ]                  :: M :: Subst

coercions, gs {{ tex \overline{\gamma} }}, hs {{ tex \overline{\eta} }}
  :: 'Cos_' ::=
| g                            ::   :: One
| gs1 , .... , gsi             ::   :: Many
| nil                          :: M :: Empty
| nths g                       :: M :: nths
  {{ tex \overline{\ottkw{nth}\,[[g]]} }}
| ( gs )                       :: M :: Parens
| Psi _ S ; G ( ts )           :: M :: LiftedTys
  {{ tex [[Psi]]_{[[S]];[[G]]}([[ts]]) }}

calt :: 'CAlt_' ::=
| p -> c . g                    ::   :: Alt
  {{ tex [[p]] [[->]] [[c]].\,[[g]] }}

calts {{ tex \overline{\ottnt{calt} } }} :: 'CAlts_' ::=
| calt                   ::   :: One
| calts1 ; .... ; caltsi ::   :: Many
| nil                    :: M :: Nil
| Psi _ S ; G ( alts )   :: M :: LiftedAlts
  {{ tex [[Psi]]_{[[S]];[[G]]}([[alts]]) }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Signatures  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

sig, S {{ tex \Sigma }} :: 'Sig_' ::=
| sig_bnd                      ::   :: One
| S1 , .... , Si               ::   :: Many
| nil                          :: M :: Nil  

sig_bnd :: 'SigBnd_' ::=
| T : adt_kind                 ::   :: ADT
  {{ tex [[T]]{:}[[adt_kind]] }}
| K : con_type                 ::   :: Con
  {{ tex [[K]]{:}[[con_type]] }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Contexts  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

context, G {{ tex \Gamma }}, D {{ tex \Delta }} :: 'Ctx_' ::=
| d                            ::   :: One
| G1 , .... , Gi               ::   :: Many
| nil                          :: M :: Nil
| G [ theta ]                  :: M :: Subst
| as : rel ks                  :: M :: ZipKs
  {{ tex [[as]]{:}^{[[rel]]} [[ks]] }}
| as : rel D                   :: M :: Telescope
  {{ tex [[as]]{:}^{[[rel]]} [[D]] }}
| ( G )                        :: M :: Parens
| rel ( G )                    :: M :: ApplyRel
  {{ tex [[rel]]([[G]]) }}
| prefix ( G )                 :: M :: Prefix
  {{ tex [[prefix]]([[G]]) }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Substitutions  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

substs, theta {{ tex \theta }} :: 'Substs_' ::=
% | subst                             ::   :: One
| substs1 , .... , substsi          ::   :: Many
| nil                               :: M :: Nil  
| ts / zs                           :: M :: Telescope
| Psi _ lr                          :: M :: PsiLR
  {{ tex [[Psi]]_{[[lr]]} }}

subst :: 'Subst_' ::=
| t / a                  ::   :: TyVar
| g / c                  ::   :: CoVar

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Lifting contexts  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

lc_bnd :: 'LC1_' ::=
| a |-> g           ::   :: Ty
| c |-> ( g1 , g2 ) ::   :: Co

lc, Psi {{ tex \Psi }} :: 'LC_' ::=
| lc_bnd               ::   :: One
| lc1 , .... , lci     ::   :: Many
| nil                  :: M :: Nil
| ( Psi )              :: M :: Parens

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Utility  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

eq :: 'Eq_' ::=
| =                         ::   :: Equal
  %% the M on the next line is important so that
  %% ottdump builds
| &=                        :: M :: Align
  {{ tex &= }}

nil :: 'Nil_' ::=
| empty                     ::   :: Empty
| blank                     ::   :: Omitted

lr :: 'LR_' ::=
| left                      ::   :: Left
  {{ tex \mathrm{L} }}
| right                     ::   :: Right
  {{ tex \mathrm{R} }}

nat, I {{ tex \ottnt{i} }}  :: 'Nat_' ::=
| i                         ::   :: Index
| 0                         ::   :: Zero
| 1                         ::   :: One
| 2                         ::   :: Two
| 3                         ::   :: Three
| 4                         ::   :: Four
| I1 - I2                   :: M :: Sub

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Terminals  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

terminals :: 'terminals_' ::=
| \                                    ::   :: Lam     {{ tex \lambda }}
| |->                                  ::   :: mapsto  {{ tex \mapsto }}
| ->                                   ::   :: Arrow   {{ tex \to }}
| ~>                                   ::   :: red     {{ tex \rightsquigarrow }}
| ~>*                                  ::   :: redstar {{ tex \rightsquigarrow^* }}
| <~                                   ::   :: der     {{ tex \leftsquigarrow }}
| *<~                                  ::   :: ratsder {{ tex \mathrel{ {}^*{\leftsquigarrow} } }}
| ~~>                                  ::   :: pushto  {{ tex \longrightsquigarrow }}
| '//'                                 ::   :: sep     {{ tex \quad }}
| MPI                                  ::   :: Pi      {{ tex \bar{\Pi} }}
| UPI                                  ::   :: Upi     {{ tex \tilde{\Pi} }}
| |>                                   ::   :: Cast    {{ tex \rhd }}
| ||>                                  ::   :: RCast   {{ tex \unrhd }}
| <||                                  ::   :: LCast   {{ tex \unlhd }}
| |-                                   ::   :: Entails {{ tex \vdash }}
| empty                                ::   :: Empty   {{ tex \varnothing }}
| \in                                  ::   :: in      {{ tex \in }}
| \notin                               ::   :: notin   {{ tex \not\in }}
| !!!                                  ::   :: internal {{ tex }}
| ~                                    ::   :: twid    {{ tex \sim }}
| #                                    ::   :: fresh   {{ tex \mathrel{\#} }}
| ;;                                   ::   :: semi    {{ tex \fatsemi }}
| forall                               ::   :: forall  {{ tex \forall }}
| blank                                ::   :: blank   {{ tex \! }}
| fv                                   ::   :: fv      {{ tex \mathsf{fv} }}
| dom                                  ::   :: dom     {{ tex \mathsf{dom} }}
| prefix                               ::   :: prefix  {{ tex \mathsf{prefix} }}
| nth                                  ::   :: nth     {{ tex \ottkw{nth} }}
| -->                                  ::   :: step    {{ tex \longrightarrow }}
| :=                                   ::   :: assign  {{ tex \mathrel{ {:}{=} } }}
| \subseteq                            ::   :: subset  {{ tex \subseteq }}
| \union                               ::   :: union   {{ tex \cup }}
| \emptyset                            ::   :: emptyset {{ tex \emptyset }}
| !                                    ::   :: cons    {{ tex \propto }}
| !!                                   ::   :: lcons   {{ tex \mathrel{\ltimes} }}
| '>>'                                 ::   :: pushin  {{ tex \succ }}
| o                                    ::   :: bullet  {{ tex \bullet }}
| coercionKind                         ::   :: coKind  {{ tex \mathsf{coercion\_kind} }}
| typeKind                             ::   :: tyKind  {{ tex \mathsf{type\_kind} }}

| |-ty                                 ::   :: Ty_ent  {{ tex \vdashy{ty} }}
| |-co                                 ::   :: Co_ent  {{ tex \vdashy{co} }}
| |-ctx                                ::   :: Ctx_ent {{ tex \vdashy{ctx} }}
| |-tc                                 ::   :: Tc_ent  {{ tex \vdashy{tc} }}
| |-sig                                ::   :: Sig_ent {{ tex \vdashy{sig} }}
| |-tel                                ::   :: Tel_ent {{ tex \vdashy{tel} }}
| |-alt                                ::   :: Alt_ent {{ tex \vdashy{alt} }}
| |-vec                                ::   :: Vec_ent {{ tex \vdashy{vec} }}
| |-prop                               ::   :: Prop_ent {{ tex \vdashy{prop} }}
| |-s                                  ::   :: S_ent   {{ tex \vdashy{s} }}
| |-r                                  ::   :: R_ent   {{ tex \vdashy{r} }}
| |-kp                                 ::   :: Kp_ent  {{ tex \vdashy{kp} }}
| |-calt                               ::   :: Calt_ent {{ tex \vdashy{calt} }}



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Formulae  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

formula :: 'formula_' ::=
  | judgement                          ::   :: judgement
  | </ formulai // '//' // i />        ::   :: dots
  | forall i : formula                 ::   :: forall
    {{ tex [[forall]] [[i]]{:}\; [[formula]] }}
  | bnd \in G                          ::   :: ctx_in
  | sig_bnd \in S                      ::   :: sig_in
  | alt \in alts                       ::   :: alt_in
  | ts1 eq ts2                         ::   :: ts_rewrite
  | G1 eq G2                           ::   :: G_rewrite
  | alts1 eq alts2                     ::   :: alts_rewrite
  | fvset1 eq fvset2                   ::   :: fvset_rewrite
  | rel1 eq rel2                       ::   :: rel_rewrite
  | H1 eq H2                           ::   :: H_rewrite
  | T # S                              ::   :: T_fresh
  | K # S                              ::   :: K_fresh
  | a # G                              ::   :: a_fresh
  | c # G                              ::   :: c_fresh
  | zs # ts                             ::   :: a_not_free
  | alts are exhaustive for H          ::   :: exhaustive
    {{ tex [[alts]] \text{ are exhaustive for } [[H]] }}
  | calts are exhaustive for H         ::   :: cexhaustive
    {{ tex [[calts]] \text{ are exhaustive for } [[H]] }}
  | fvset1 \subseteq fvset2            ::   :: subset
  | zs fresh                           ::   :: fresh
    {{ tex [[zs]] \text{ fresh} }}
  | G1 \subseteq G2                    ::   :: G_subseq
  | a \notin fvset                     ::   :: var_notin_set
  | t is not a value                   ::   :: not_value
    {{ tex [[t]] \text{ is not a value} }}
  | other alternatives do not match H  ::   :: other_alts
    {{ tex \text{other alternatives do not match } [[H]] }}
  | ts ~> ts'                          ::   :: many_red
  | alts1 ~> alts2                     ::   :: alts_red
  | ts ~> ts' <~ ts''                  ::   :: diamond
  | ts ~>* ts'                         ::   :: many_red_star
  | ts ~>* ts' *<~ ts''                ::   :: confluence

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Defined functions  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

funs
Lifting ::=

fun
Psi _ S ; G ( t ) :: g :: lift
  {{ tex [[Psi]]_{[[S]];[[G]]}([[t]]) }}

by
(Psi, a |-> g)_S;G(a)     === g
Psi_S;G(b)                === <b>
Psi_S;G(H[ts])            === H[Psi_S;G(ts)]
Psi_S;G(t1 t2)            === Psi_S;G(t1) Psi_S;G(t2)
Psi_S;G(PI a :rel k. t)   === let c0 := Psi_S;G(k) in PI a:rel c0. (Psi, a |-> erase_c0 a (a |> c0))_S;G,a:rel k[Psi_left] (t)
Psi_S;G(PI c:phi.t)       === let c0 := Psi_S;G(phi) in PI c:c0. (Psi, c |-> (c, sym (nth 3 c0) ;; c ;; nth 4 c0))_S;G,c:phi[Psi_left] (t)
Psi_S;G(t |> g)           === erase_sym g (t |> g)[Psi_left] t[Psi_left] ;; Psi_S;G(t) ;; erase_g t[Psi_right] (t |> g)[Psi_right]
Psi_S;G(g)                === erase_Psi_S;G(coercionKind_S;G(g)) g[Psi_left] g[Psi_right]
Psi_S;G(case_k t of alts) === case_Psi_S;G(k) Psi_S;G(t) of Psi_S;G(alts)
Psi_S;G(\ a:rel k . t)    === let c0 := Psi_S;G(k) in \ a:rel c0. (Psi, a |-> erase_c0 a (a |> c0))_S;G,a: rel k[Psi_left] (t)
Psi_S;G(fix t)            === fix Psi_S;G(t)

fun
Psi _ S ; G ( alt ) :: calt :: lift_alt
  {{ tex [[Psi]]_{[[S]];[[G]]}([[alt]]) }}

by
Psi_S;G(H zs -> c. t) === TODO
%% This is going pear shaped. Perhaps it would be better to separate out coercions
%% after all. Then I don't think I'd need to parameterize over S;G throughout
%% lifting. This would dilute the complexity.

funs
Co ::=

fun
build_kpush_co ( g ; ts ) :: h :: build_kpush_co
  {{ tex \mathsf{build\_kpush\_co}([[g]];[[ts]]) }}

by
build_kpush_co ( g ; empty ) === g
build_kpush_co ( g ; ts, t ) === let c := build_kpush_co(g; ts) in c@(erase_c t (t |> argk c))

fun
build_subst ( Psi ; D ; theta ) :: substs :: build_subst
  {{ tex \mathsf{build\_subst}([[Psi]];[[D]];[[theta]]) }}

by
build_subst(Psi; empty; theta)       === theta
build_subst(Psi; a :rel k, D; theta) === build_subst(Psi, a |-> Psi_S;G(k); D; theta, a |> sym Psi_S;G(k) / a)
%% RAE: Out-of-scope contexts above and below.
build_subst(Psi; c:phi, D; theta)    === build_subst(Psi, c |-> Psi_S;G(phi); D; theta, nth 3 Psi(phi) ;; c ;; sym (nth 4 Psi(phi)) / c)

fun
promote _ S ; G ( g ) :: h :: promote_co
  {{ tex \mathsf{promote}_{[[S]];[[G]]}([[g]]) }}

by
promote_S;G(c)         	       === kind c
promote_S;G(<t>)       	       === < typeKind_S;G(t) >
promote_S;G(sym g)     	       === sym promote_S;G(g)
promote_S;G(g1 ;; g2)  	       === promote_S;G(g1) ;; promote_S;G(g2)
promote_S;G(erase_h t1 t2)     === h
promote_S;G(g1 g2)             === promote_S;G(g1)@g2
promote_S;G(PI a colon h.g)    === <Type[]>
promote_S;G(PI c:h.g)          === <Type[]>
promote_S;G(case_h g of calts) === h
promote_S;G(\a :rel h. g)      === PI a:rel h. promote_S;G(g)
promote_S;G(fix g)             === argk promote_S;G(g)
promote_S;G(argk g)            === <Type[]>
promote_S;G(g@h)               === promote_S;G(g)@h  % <Type[]>
% RAE: This last one is borked. We need to distinguish the two @ signs.
promote_S;G(nth i g)           === % yech (RAE)
promote_S;G(kind g)            === <Type[]>
promote_S;G(step t)            === < typeKind_S;G(t) >
% This last one depends on preservation. SCW was right.

funs
Erase ::=

fun
'|' t '|' :: s :: erase_type

by
|a|                === a
|H[ts]|            === H**
|t1 t2|            === |t1| |t2|
|PI d. t|          === PI |d|.|t|
|t |> g|           === |t|
|g|                === o
|case_k t of alts| === case_|k| |t| of |alts|
|\d.t|             === \|d|.|t|
|fix t|            === fix |t|

fun
'|' d0 '|' :: d :: erase_binder

by
|a :rel k|    === a :rel |k|
|c:phi|       === o : |phi|

fun
'|' phi0 '|' :: phi :: erase_prop

by
|t1 ~ t2|   === |t1| ~ |t2|

fun
'|' alt0 '|' :: alt :: erase_alt

by
|p -> c.t|  === p -> o.|t|

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Parsing  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

parsing

Type_Pis <= Type_Apps
Type_Arrow right Type_Arrow
Type_Pis right Type_Arrow
Ctx_Many <= Ctx_Subst
Ctx_Telescope <= Ctx_Subst
Ctx_Many <= Ctx_Telescope

Vars_One <= Ctx_ZipKs

Ctx_One <= Ctx_Subst
Types_One <= Types_Subst

Types_One <= formula_many_red
Alts_One <= formula_alts_red

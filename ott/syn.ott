%% System FCD

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Preamble  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

embed {{ tex-preamble
\newcommand{\vdashy}[1]{\vdash_{\!\!\!\mathsf{#1} } }
\newcommand{\gobble}[1]{}
\let\supp\gobble
\newcommand{\nosupp}[1]{\begingroup\let\supp\relax#1\endgroup}
}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Metavariables  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

metavar K                                     ::=   {{ com Data constructors }}

indexvar i, j, n ::= {{ com Indices }}

grammar

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Constants  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Prim, P :: 'PrimTyCon_' ::=
| Type             ::   :: Type

ADT, T :: 'ADT_' ::=

tycon, H :: 'TyCon_' ::=
| T                ::   :: ADT
| K                ::   :: DataCon
| P                ::   :: Primitive

adt_kind {{ tex ( \overline{\ottmv{a} } {:} \overline{\kappa} ) }} :: 'AdtKi_' ::=
| ( a1 : k1 , .... , ai : ki )   ::   :: Vars
| ( as : ks )                    :: M :: Telescope
  {{ tex ([[as]]{:}[[ks]]) }}

con_type {{ tex ( \Delta; \ottmv{T} ) }} :: 'ConTy_' ::=
| ( D ; T )       ::   :: Pair
  {{ tex ([[D]]; [[T]]) }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Variables  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

var, a, b, x :: 'Var_' ::= {{ com Variables }}
| _                     :: M :: Blank

covar, c :: 'CoVar_' ::= {{ com Coercion variables }}
| _                     :: M :: Blank

vars, as {{ tex \overline{\ottnt{a} } }}, bs {{ tex \overline{\ottnt{b} } }},
  xs {{ tex \overline{\ottnt{x} } }} :: 'Vars_' ::=
| a                     ::   :: One
| as1 , .... , asi      ::   :: Many
| nil                   :: M :: Nil
| prefix ( as )         :: M :: Prefix
  {{ tex [[prefix]]([[as]]) }}

tycovar, z :: 'TyCoVar_' ::=
| a                     ::   :: Ty
| c                     ::   :: Co

mixed_vars, zs {{ tex \overline{\ottnt{z} } }} :: 'MixedVars_' ::=
| z                                  ::   :: One
| mixed_vars1 , .... , mixed_varsi   ::   :: Many
| nil                                :: M :: Empty
| dom ( G )                          :: M :: DomCtx
  {{ tex [[dom]]([[G]]) }}
| xs                                 :: M :: Tys

fvset :: 'FVs_' ::=
| { zs }                             :: M :: Set
| fv ( ps )                          :: M :: fv_tycos
  {{ tex [[fv]] ( [[ps]] ) }}
| fv ( alt )                         :: M :: fv_alt
  {{ tex [[fv]] ( [[alt]] ) }}
| fv ( D )                           :: M :: fv_tel
  {{ tex [[fv]] ( [[D]] ) }}
| fv ( phi )                         :: M :: fv_prop
  {{ tex [[fv]] ( [[phi]] ) }}
| ( fvset )                          :: M :: Parens
| fvset1 \union fvset2               :: M :: Union
| fvset1 \ fvset2                    :: M :: Minus
  {{ tex [[fvset1]] \mathop{\backslash} [[fvset2]] }}
| \emptyset                          :: M :: Emptyset


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Binders  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

relevance, rel {{ tex \mathsf{r} }} :: 'Rel_' ::=
| Rel              ::   :: Rel
| Irrel            ::   :: Irrel

colon {{ tex {:}^\mathsf{r} }} :: 'Colon_' ::=
| : rel                       ::   :: Colon
  {{ tex {:}^{[[rel]]} }}

bnd, d {{ tex \delta }} :: 'Bnd_' ::=
| a colon t                        ::   :: Type
  {{ tex [[a]] [[colon]] [[t]] }}
| c : phi                          ::   :: Coercion
  {{ tex [[c]] {:} [[phi]] }}
| o : phi                          :: M :: ErasedCoercion
  {{ tex [[o]] {:} [[phi]] }}
| d [ theta ]                      :: M :: Subst

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  PIs  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

PI {{ tex \Pi }} :: 'Pi_' ::=
| MPI            ::   :: Matchable
| UPI            ::   :: Unmatchable

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Types  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

typ, t {{ tex \tau }}, s {{ tex \sigma }}, k {{ tex \kappa }}, v,
  ee {{ tex \epsilon }}
  :: 'Type_' ::=
| a                            ::   :: Var
| H { ts }                     ::   :: TyCon
  {{ tex [[H]]_{ \{ [[ts]] \} } }}
| !!! t p                      ::   :: App
| !!! PI d . t                 ::   :: Pi
  {{ tex [[PI]] [[d]] .\, [[t]] }}
| t |> g                       ::   :: Cast
| case _ k t of alts           ::   :: Case
  {{ tex \ottkw{case}_{[[k]]}\, [[t]]\, \ottkw{of}\, [[alts]] }}
| !!! \ d . t                  ::   :: Lam
  {{ tex [[\]] [[d]]. \, [[t]] }}
| fix t                        ::   :: Fix

| t ps                         :: M :: Apps
| H {}                         :: M :: HEmpty
  {{ tex [[H]] }}
| PI D .  t                    :: M :: Pis
  {{ tex [[PI]] [[D]].\, [[t]] }}
| MUPI D . t                   :: M :: Mupis
  {{ tex [[MUPI]] [[D]].\, [[t]] }}
| \ D . t                      :: M :: Lams
  {{ tex [[\]] [[D]].\, [[t]] }}
% | t1 -> t2                     :: M :: Arrow
% | t1 ~> t2                     :: M :: FFArrow
| ( t )                        :: M :: Parens

| t [ theta ]                  :: M :: Subst
| typeKind _ S ; G ( t )       :: M :: TypeKind
  {{ tex [[typeKind]]_{[[S]];[[G]]}([[t]]) }}

typs, ts {{ tex \overline{\tau} }}, ss {{ tex \overline{\sigma} }},
  ks {{ tex \overline{\kappa} }}, ees {{ tex \overline{\epsilon} }}
  :: 'Types_' ::=
| t                       ::   :: One
| ts1 , .... , tsi        ::   :: Many
| nil                     :: M :: Nil  
| prefix ( ts )           :: M :: Prefix
  {{ tex [[prefix]]([[ts]]) }}
| ts [ theta ]            :: M :: Subst
| '|' ts '|'              :: M :: Erased
  {{ tex \lfloor [[ts]] \rfloor }}

alts {{ tex \overline{\ottnt{alt} } }} :: 'Alts_' ::=
| alt                    ::   :: One
| alt1 ; .... ; alti     ::   :: Many
| nil                    ::   :: Nil
| '|' alts '|'           :: M :: Erased
  {{ tex \lfloor [[alts]] \rfloor }}
| list of alt            :: M :: List
  {{ tex \overline{[[alt]]} }}

alt :: 'Alt_' ::=
| H -> t                 ::   :: Alt
| alt [ theta ]          :: M :: Subst
| ( alt )                :: M :: Parens

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Proposition  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

prop, phi {{ tex \phi }} :: 'Phi_' ::=
| t1 ( k1 )~( k2 ) t2          ::   :: Equality
  {{ tex [[t1]] \mathrel{ {}^{[[k1]]} {\sim}^{[[k2]]} } [[t2]] }}
| t1 [ k1 ]~[ k2 ] t2          :: M :: IEquality
  {{ tex [[t1]] \mathrel{ {}^{\supp{[[k1]]} } {\sim}^{\supp{[[k2]]} } } [[t2]] }}
| phi [ theta ]                :: M :: Subst
% TODO: Remove?
| coercionKind _ S ; G ( g )   :: M :: CoKind
  {{ tex [[coercionKind]]_{[[S]];[[G]]}([[g]]) }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Coercions  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

coercion, g {{ tex \gamma }}, h {{ tex \eta }}
  :: 'Co_' ::=
| c                            ::   :: Var
| < t >                        ::   :: Refl
  {{ tex \langle [[t]] \rangle }}
| sym g                        ::   :: Sym
| g1 ;; g2                     ::   :: Trans
| erase _ h t1 t2              ::   :: Erase
  {{ tex \ottkw{erase}_{[[h]]}\,[[t1]]\,[[t2]] }}
| H { gs }                     ::   :: Con
  {{ tex [[H]]_{ \{ [[gs]] \} } }}
| g w                          ::   :: App
| PI a colon h . g             ::   :: PiTy
  {{ tex [[PI]] [[a]] [[colon]] [[h]]. \, [[g]] }}
| PI c : ( h1 , h2 ) . g       ::   :: PiCo
  {{ tex [[PI]] [[c]] {:} ([[h1]],[[h2]]).\, [[g]] }}
| case _ h g of calts          ::   :: Case
  {{ tex \ottkw{case}_{[[h]]}\, [[g]]\, \ottkw{of}\, [[calts]] }}
| \ a colon h . g              ::   :: Lam
  {{ tex [[\]] [[a]] [[colon]] [[h]].\, [[g]] }}
| \ c : ( h1 , h2 ) . g        ::   :: CLam
  {{ tex [[\]] [[c]] {:} ([[h1]],[[h2]]).\,[[g]] }}
| fix g                        ::   :: Fix
| argk g                       ::   :: ArgK
| argk I g                     ::   :: CArgK
  {{ tex {[[argk]]}^{[[I]]}\,[[g]] }}
| res ^ I g                    ::   :: Res
  {{ tex [[res]]^{[[I]]}\,[[g]] }}
| !!! g @ w                    ::   :: Inst
| g @\ w                       ::   :: InstLam
| nth I g                      ::   :: Nth
  {{ tex {[[nth]]}^{[[I]]}\,[[g]] }}
| kind g                       ::   :: Kind
| step t                       ::   :: Step

| ( g )                        :: M :: Parens

| o                            :: M :: Erased
| g @ ws                       :: M :: Insts
| let c := h in g              :: M :: Let  
| g [ theta ]                  :: M :: Subst

coercions, gs {{ tex \overline{\gamma} }}, hs {{ tex \overline{\eta} }}
  :: 'Cos_' ::=
| g                            ::   :: One
| gs1 , .... , gsi             ::   :: Many
| nil                          :: M :: Empty
| ( gs )                       :: M :: Parens
| Psi _ S ; G ( ts )           :: M :: LiftedTys
  {{ tex [[Psi]]_{[[S]];[[G]]}([[ts]]) }}
| nths g                       :: M :: Nths

calt :: 'CAlt_' ::=
| H -> g                        ::   :: Alt

calts {{ tex \overline{\ottnt{calt} } }} :: 'CAlts_' ::=
| calt                   ::   :: One
| calts1 ; .... ; caltsi ::   :: Many
| nil                    :: M :: Nil
| list of calt           :: M :: List
  {{ tex \overline{[[calt]]} }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Arguments  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

arg, p {{ tex \psi }} :: 'Arg_' ::=
| t                   ::   :: Ty
| { t }               ::   :: IrrelTy
| g                   ::   :: Co
| '|' p '|'           :: M :: Erased
  {{ tex \lfloor [[p]] \rfloor }}

args, ps {{ tex \overline{\psi} }} :: 'Args_' ::=
| p                     ::   :: One
| args1 .... argsi      ::   :: Many
| args1 , .... , argsi  :: M :: ManyComma
| nil                   :: M :: Nil
| zs                    :: M :: Vars
| ps [ theta ]          :: M :: Subst
| ts                    :: M :: Types
| gs                    :: M :: Cos
| ps _{ I1 '..' I2 }    :: M :: IndexPrefix
  {{ tex {[[ps]]}_{[[I1]] \ldots [[I2]]} }}
| '|' ps '|'            :: M :: Erased
  {{ tex \lfloor [[ps]] \rfloor }}


coarg, w {{ tex \omega }} :: 'CoArg_' ::=
| g                    ::   :: Ty
| { g }                ::   :: TyIrrel
| ( g1 , g2 )          ::   :: Co

coargs, ws {{ tex \overline{\omega} }} :: 'CoArgs_' ::=
| w                    ::   :: One
| ws1 .... wsi         ::   :: Many
| nil                  :: M :: Nil
| gs                   :: M :: Coercions

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Signatures  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

sig, S {{ tex \Sigma }} :: 'Sig_' ::=
| sig_bnd                      ::   :: One
| S1 , .... , Si               ::   :: Many
| nil                          :: M :: Nil  

sig_bnd :: 'SigBnd_' ::=
| T : adt_kind                 ::   :: ADT
  {{ tex [[T]]{:}[[adt_kind]] }}
| K : con_type                 ::   :: Con
  {{ tex [[K]]{:}[[con_type]] }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Contexts  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

context, G {{ tex \Gamma }}, D {{ tex \Delta }} :: 'Ctx_' ::=
| d                            ::   :: One
| G1 , .... , Gi               ::   :: Many
| nil                          :: M :: Nil
| G [ theta ]                  :: M :: Subst
| as : rel ks                  :: M :: ZipKs
  {{ tex [[as]]{:}^{[[rel]]} [[ks]] }}
% | as : rel D                   :: M :: Telescope
%   {{ tex [[as]]{:}^{[[rel]]} [[D]] }}
| ( G )                        :: M :: Parens
| Rel ( G )                    :: M :: ApplyRel
  {{ tex [[Rel]]([[G]]) }}
| prefix ( G )                 :: M :: Prefix
  {{ tex [[prefix]]([[G]]) }}
| '|' D '|'                    :: M :: Erased
  {{ tex \lfloor [[D]] \rfloor }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Substitutions  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

substs, theta {{ tex \theta }} :: 'Substs_' ::=
| subst                             ::   :: One
| substs1 , .... , substsi          ::   :: Many
| nil                               :: M :: Nil  
| ps / zs                           :: M :: Telescope
| Psi _ lr                          :: M :: PsiLR
  {{ tex [[Psi]]_{[[lr]]} }}

subst :: 'Subst_' ::=
| t / a                  ::   :: TyVar
| g / c                  ::   :: CoVar

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Lifting contexts  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

lc_bnd :: 'LC1_' ::=
| a |-> g           ::   :: Ty
| c |-> ( g1 , g2 ) ::   :: Co

lc, Psi {{ tex \Psi }} :: 'LC_' ::=
| lc_bnd               ::   :: One
| lc1 , .... , lci     ::   :: Many
| nil                  :: M :: Nil
| ( Psi )              :: M :: Parens

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Utility  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

eq :: 'Eq_' ::=
| =                         ::   :: Equal
  %% the M on the next line is important so that
  %% ottdump builds
| &=                        :: M :: Align
  {{ tex &= }}

nil :: 'Nil_' ::=
| empty                     ::   :: Empty
| blank                     ::   :: Omitted

lr :: 'LR_' ::=
| left                      ::   :: Left
  {{ tex \mathrm{L} }}
| right                     ::   :: Right
  {{ tex \mathrm{R} }}

nat, I {{ tex \ottnt{i} }}  :: 'Nat_' ::=
| i                         ::   :: Index
| 0                         ::   :: Zero
| 1                         ::   :: One
| 2                         ::   :: Two
| 3                         ::   :: Three
| 4                         ::   :: Four
| I1 - I2                   :: M :: Sub
| length D                  :: M :: TelescopeLength
  {{ tex \pipe [[D]] \pipe }}
| length ps                 :: M :: VectorLength
  {{ tex \pipe [[ps]] \pipe }}

rewrite_rule :: 'Rewrite_' ::=
| ps1 eq ps2                         ::   :: ts_rewrite
| w1 eq w2                           ::   :: w_rewrite
| phi1 eq phi2                       ::   :: phi_rewrite
| G1 eq G2                           ::   :: G_rewrite
| alts1 eq alts2                     ::   :: alts_rewrite
| fvset1 eq fvset2                   ::   :: fvset_rewrite
| rel1 eq rel2                       ::   :: rel_rewrite
| H1 eq H2                           ::   :: H_rewrite
| S1 eq S2                           ::   :: S_rewrite
| I1 eq I2                           ::   :: I_rewrite

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Terminals  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

terminals :: 'terminals_' ::=
| \                                    ::   :: Lam     {{ tex \lambda }}
| |->                                  ::   :: mapsto  {{ tex \mapsto }}
| ->                                   ::   :: Arrow   {{ tex \to }}
| ~>                                   ::   :: red     {{ tex \rightsquigarrow }}
| ~>*                                  ::   :: redstar {{ tex \rightsquigarrow^* }}
| <~                                   ::   :: der     {{ tex \leftsquigarrow }}
| *<~                                  ::   :: ratsder {{ tex \mathrel{ {}^*{\leftsquigarrow} } }}
| ~~>                                  ::   :: pushto  {{ tex \longrightsquigarrow }}
| '//'                                 ::   :: sep     {{ tex \quad }}
| MPI                                  ::   :: MPi     {{ tex \mpi }}
| UPI                                  ::   :: UPi     {{ tex \upi }}
| MUPI                                 ::   :: MUPi    {{ tex \mupi }}
| |>                                   ::   :: Cast    {{ tex \rhd }}
| ||>                                  ::   :: RCast   {{ tex \unrhd }}
| <||                                  ::   :: LCast   {{ tex \unlhd }}
| |-                                   ::   :: Entails {{ tex \vdash }}
| empty                                ::   :: Empty   {{ tex \varnothing }}
| \in                                  ::   :: in      {{ tex \in }}
| \notin                               ::   :: notin   {{ tex \not\in }}
| !!!                                  ::   :: internal {{ tex }}
| ~                                    ::   :: twid    {{ tex \sim }}
| #                                    ::   :: fresh   {{ tex \mathrel{\#} }}
| ;;                                   ::   :: semi    {{ tex \fatsemi }}
| forall                               ::   :: forall  {{ tex \forall }}
| blank                                ::   :: blank   {{ tex \! }}
| fv                                   ::   :: fv      {{ tex \mathsf{fv} }}
| dom                                  ::   :: dom     {{ tex \mathsf{dom} }}
| prefix                               ::   :: prefix  {{ tex \mathsf{prefix} }}
| nth                                  ::   :: nth     {{ tex \ottkw{nth} }}
| argk                                 ::   :: argk    {{ tex \ottkw{argk} }}
| res                                  ::   :: res     {{ tex \ottkw{res} }}
| -->                                  ::   :: step    {{ tex \longrightarrow }}
| :=                                   ::   :: assign  {{ tex \mathrel{ {:}{=} } }}
| \subseteq                            ::   :: subset  {{ tex \subseteq }}
| \union                               ::   :: union   {{ tex \cup }}
| \emptyset                            ::   :: emptyset {{ tex \emptyset }}
| !                                    ::   :: cons    {{ tex \propto }}
| !!                                   ::   :: lcons   {{ tex \mathrel{\ltimes} }}
| '>>'                                 ::   :: pushin  {{ tex \succ }}
| o                                    ::   :: bullet  {{ tex {\bullet} }}
| coercionKind                         ::   :: coKind  {{ tex \mathsf{coercion\_kind} }}
| typeKind                             ::   :: tyKind  {{ tex \mathsf{type\_kind} }}
| promote                              ::   :: promote {{ tex \mathsf{promote} }}
| nokind                               ::   :: nokind  {{ tex \mathsf{nokind} }}
| mk_nth                               ::   :: mk_nth  {{ tex \mathsf{mk\_nth} }}
| cast_kpush_arg                       ::   :: cast_arg {{ tex \mathsf{cast\_kpush\_arg} }}
| @                                    ::   :: inst    {{ tex \at }}
| @\                                   ::   :: instlam {{ tex \at }}
| Rel                                  ::   :: Rel     {{ tex \mathsf{Rel} }}
| Irrel                                ::   :: Irrel   {{ tex \mathsf{Irrel} }}
| build_kpush_co                       ::   :: build   {{ tex \mathsf{build\_kpush\_co} }}

| |-ty                                 ::   :: Ty_ent  {{ tex \vdashy{ty} }}
| |-co                                 ::   :: Co_ent  {{ tex \vdashy{co} }}
| |-ctx                                ::   :: Ctx_ent {{ tex \vdashy{ctx} }}
| |-tc                                 ::   :: Tc_ent  {{ tex \vdashy{tc} }}
| |-sig                                ::   :: Sig_ent {{ tex \vdashy{sig} }}
| |-alt                                ::   :: Alt_ent {{ tex \vdashy{alt} }}
| |-vec                                ::   :: Vec_ent {{ tex \vdashy{vec} }}
| |-cev                                ::   :: Cev_ent {{ tex \vdashy{cev} }}
| |-prop                               ::   :: Prop_ent {{ tex \vdashy{prop} }}
| |-s                                  ::   :: S_ent   {{ tex \vdashy{s} }}
| |-r                                  ::   :: R_ent   {{ tex \vdashy{r} }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Formulae  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

formula :: 'formula_' ::=
  | judgement                          ::   :: judgement
  | </ formulai // '//' // i />        ::   :: dots
  | forall i : formula                 ::   :: forall
    {{ tex [[forall]] [[i]]{:}\; [[formula]] }}
  | rewrite_rule                       ::   :: rewrite
  | I1 = I2 = I3                       ::   :: three_way_I_eq
  | bnd \in G                          ::   :: ctx_in
  | sig_bnd \in S                      ::   :: sig_in
  | alt \in alts                       ::   :: alt_in
  | p \in ps                           ::   :: p_in
  | T # S                              ::   :: T_fresh
  | K # S                              ::   :: K_fresh
  | a # G                              ::   :: a_fresh
  | c # G                              ::   :: c_fresh
  | zs # ps                            ::   :: a_not_free
  | alts are exhaustive for H          ::   :: exhaustive
    {{ tex [[alts]] \text{ are exhaustive and distinct for } [[H]] }}
  | calts are exhaustive for H         ::   :: cexhaustive
    {{ tex [[calts]] \text{ are exhaustive and distinct for } [[H]] }}
  | fvset1 \subseteq fvset2            ::   :: subset
  | zs fresh                           ::   :: fresh
    {{ tex [[zs]] \text{ fresh} }}
  | G1 \subseteq G2                    ::   :: G_subseq
  | a \notin fvset                     ::   :: var_notin_set
  | t is not a value                   ::   :: not_value
    {{ tex [[t]] \text{ is not a value} }}
  | ps ~> ps'                          ::   :: many_red
  | alts1 ~> alts2                     ::   :: alts_red
  | ps ~> ps' <~ ps''                  ::   :: diamond
  | ps ~>* ps'                         ::   :: many_red_star
  | ps ~>* ps' *<~ ps''                ::   :: confluence
  | D contains no coercion bindings    ::   :: no_coercions
    {{ tex [[D]] \text{ contains no coercion bindings} }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Defined functions  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% funs
% Lifting ::=

% fun
% Psi _ S ; G ( t ) :: g :: lift
%   {{ tex [[Psi]]_{[[S]];[[G]]}([[t]]) }}

% by
% (Psi, a |-> g)_S;G(a)     === g
% Psi_S;G(b)                === <b>
% Psi_S;G(H[ts])            === H[Psi_S;G(ts)]
% Psi_S;G(t1 t2)            === Psi_S;G(t1) Psi_S;G(t2)
% Psi_S;G(PI a :rel k. t)   === let c0 := Psi_S;G(k) in PI a:rel c0. (Psi, a |-> erase_c0 a (a |> c0))_S;G,a:rel k[Psi_left] (t)
% Psi_S;G(PI c:phi.t)       === let c0 := Psi_S;G(phi) in PI c:c0. (Psi, c |-> (c, sym (nth 3 c0) ;; c ;; nth 4 c0))_S;G,c:phi[Psi_left] (t)
% Psi_S;G(t |> g)           === erase_sym g (t |> g)[Psi_left] t[Psi_left] ;; Psi_S;G(t) ;; erase_g t[Psi_right] (t |> g)[Psi_right]
% Psi_S;G(g)                === erase_Psi_S;G(coercionKind_S;G(g)) g[Psi_left] g[Psi_right]
% Psi_S;G(case_k t of alts) === case_Psi_S;G(k) Psi_S;G(t) of Psi_S;G(alts)
% Psi_S;G(\ a:rel k . t)    === let c0 := Psi_S;G(k) in \ a:rel c0. (Psi, a |-> erase_c0 a (a |> c0))_S;G,a: rel k[Psi_left] (t)
% Psi_S;G(fix t)            === fix Psi_S;G(t)

% fun
% Psi _ S ; G ( alt ) :: calt :: lift_alt
%   {{ tex [[Psi]]_{[[S]];[[G]]}([[alt]]) }}

% by
% Psi_S;G(H zs -> c. t) === TODO
% %% This is going pear shaped. Perhaps it would be better to separate out coercions
% %% after all. Then I don't think I'd need to parameterize over S;G throughout
% %% lifting. This would dilute the complexity.

funs
Co ::=

fun
build_kpush_co ( g ; ps ) :: h :: build_kpush_co
  {{ tex [[build_kpush_co]]([[g]];[[ps]]) }}

by
build_kpush_co ( g ; empty ) === g
build_kpush_co ( g ; ps, t ) === let c := build_kpush_co(g; ps) in c@(erase_c t (t |> argk c))
build_kpush_co ( g ; ps,{t}) === let c := build_kpush_co(g; ps) in c@{erase_c t (t |> argk c)}
build_kpush_co ( g ; ps, h ) === let c := build_kpush_co(g; ps) in c@(h, sym (argk 1 c) ;; h ;; argk 2 c)

fun
mk_nth ( g ; I ; p1 ; p2 ) :: w :: mk_nth
  {{ tex [[mk_nth]]([[g]];[[I]];[[p1]];[[p2]]) }}

by
mk_nth(g;I;t;s)     === nth I g
mk_nth(g;I;{t};{s}) === nth I g
mk_nth(g;I;h1;h2)   === (h1,h2)

fun
cast_kpush_arg ( p0 ; g ) :: p :: cast_kpush_arg
  {{ tex [[cast_kpush_arg]]([[p0]];[[g]]) }}

by
cast_kpush_arg(t;g)   === t |> argk g
cast_kpush_arg({t};g) === {t |> argk g}
cast_kpush_arg(g;h)   === sym (argk 1 h) ;; g ;; argk 2 h

% fun
% build_subst ( Psi ; D ; theta ) :: substs :: build_subst
%   {{ tex \mathsf{build\_subst}([[Psi]];[[D]];[[theta]]) }}

% by
% build_subst(Psi; empty; theta)       === theta
% build_subst(Psi; a :rel k, D; theta) === build_subst(Psi, a |-> Psi_S;G(k); D; theta, a |> sym Psi_S;G(k) / a)
% %% RAE: Out-of-scope contexts above and below.
% build_subst(Psi; c:phi, D; theta)    === build_subst(Psi, c |-> Psi_S;G(phi); D; theta, nth 3 Psi(phi) ;; c ;; sym (nth 4 Psi(phi)) / c)

funs
Erase ::=

fun
'|' t '|' :: s :: erase_type
  {{ tex \lfloor [[t]] \rfloor }}

by
|a|                === a
|H{ts}|            === H{|ts|}
|t1 t2|            === |t1| |t2|
|t1 {t2}|          === |t1| {|t2|}
|t g|              === |t| o
|PI d. t|          === PI |d|.|t|
|t |> g|           === |t|
|case_k t of alts| === case_|k| |t| of |alts|
|\d.t|             === \|d|.|t|
|fix t|            === fix |t|

fun
'|' d0 '|' :: d :: erase_binder
  {{ tex \lfloor [[d0]] \rfloor }}

by
|a :rel k|    === a :rel |k|
|c:phi|       === o : |phi|

fun
'|' phi0 '|' :: phi :: erase_prop
  {{ tex \lfloor [[phi0]] \rfloor }}

by
|t1 (k1)~(k2) t2|   === |t1| (|k1|)~(|k2|) |t2|

fun
'|' alt0 '|' :: alt :: erase_alt
  {{ tex \lfloor [[alt0]] \rfloor }}

by
|H -> t|  === H -> |t|

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Parsing  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

parsing

Type_Pis <= Type_Apps
% Type_Arrow right Type_Arrow
% Type_Pis right Type_Arrow
Ctx_Many <= Ctx_Subst
% Ctx_Telescope <= Ctx_Subst
% Ctx_Many <= Ctx_Telescope

Vars_One <= Ctx_ZipKs

Ctx_One <= Ctx_Subst
Types_One <= Types_Subst

Types_One <= formula_many_red
Alts_One <= formula_alts_red

Args_One <= Substs_Telescope

Types_One <= Args_Types
Cos_One <= Args_Cos
Cos_One <= CoArgs_Coercions

Args_Many <= Rewrite_ts_rewrite

Phi_IEquality <= Phi_Subst

Arg_Ty <= Arg_Erased
Arg_Co <= Arg_Erased
Args_One <= Args_Erased

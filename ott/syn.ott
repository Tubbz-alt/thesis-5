%% System FCD

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Preamble  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

embed {{ tex-preamble
\newcommand{\vdashy}[1]{\vdash_{\!\!\!\mathsf{#1} } }
\newcommand{\vDashy}[1]{\vDash_{\!\!\!\mathsf{#1} } }
\newcommand{\gobble}[1]{}
\let\supp\gobble
\newcommand{\nosupp}[1]{\begingroup\let\supp\relax#1\endgroup}
\newenvironment{vertmath}{\begin{array}[t]{@{}l@{}%
}%
}{\end{array}%
}
\newcommand{\varrow}{\mathrel{ {\vdash}\hspace{-1.4ex}\raisemath{.23ex}{\shortrightarrow} }%
}
\newcommand{\varrowy}[1]{\varrow_{\hspace{-1.4ex}\mathsf{#1} } }
\newcommand{\varrowys}[1]{\varrow_{\hspace{-1.4ex}\mathsf{#1} }^{\hspace{-1.4ex}*} }
}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Metavariables  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

metavar Tcc ::= {{ lex Alphanum }}
                {{ texvar \id{[[Tcc]]} }}
metavar Tcd ::= {{ lex Alphanum }}
                {{ texvar \id{\StrGobbleRight{[[Tcd]]}{1}%
} }}
metavar Dcc ::= {{ lex Alphanum }}
                {{ texvar \id{[[Dcc]]} }}
metavar Dcd ::= {{ lex Alphanum }}
                {{ texvar \id{\StrGobbleRight{[[Dcd]]}{1}%
} }}
metavar xcc ::= {{ lex alphanum0 }}
                {{ texvar \id{[[xcc]]} }}

% This next one strips the last character before printing. Useful
% to avoid an ott non-terminal collision
metavar xcd ::= {{ lex alphanum0 }}
                {{ texvar \id{\StrGobbleRight{[[xcd]]}{1}%
} }}

metavar Blockname ::= {{ lex alphanum0 }}
                      {{ texvar \id{[[Blockname]]} }}

indexvar i, j, kk {{ tex k }}, n ::= {{ com Indices }}

grammar

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Constants  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

ADT, T :: 'ADT_' ::=
| & Tcc           ::   :: Lit
  {{ tex [[Tcc]] }}
  {{ coq (ADT_Lit (trim "[[Tcc]]")) }}
| && Tcd          ::   :: Litx
  {{ tex [[Tcd]] }}

DataCon, K :: 'DataCon_' ::=
| & Dcc           ::   :: Lit
  {{ tex [[Dcc]] }}
  {{ coq (DataCon_Lit (trim "[[Dcc]]")) }}
| && Dcd          ::   :: Litx
  {{ tex [[Dcd]] }}

| # I             ::   :: NumLit
  {{ tex [[I]] }}

tycon, H :: 'TyCon_' ::=
| T                ::   :: ADT
| K                ::   :: DataCon
| Type             ::   :: Type
| ( -> )           :: M :: Arrow

adt_kind {{ tex ( \overline{\ottmv{a} } {:} \overline{\kappa} ) }} :: 'AdtKi_' ::=
| ( a1 : k1 , .... , ai : ki )   ::   :: Vars
| ( as : ks )                    :: M :: Telescope
  {{ tex ([[as]]{:}[[ks]]) }}
  {{ coq (AdtKi_Vars (zip ([[as]]) ([[ks]]))) }}
| ( nil )                        :: M :: Nil

con_type {{ tex ( \Delta; \ottmv{T} ) }} :: 'ConTy_' ::=
| ( D ; T )       ::   :: Pair
  {{ tex ([[D]]; [[T]]) }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Variables  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

var, a, b, x :: 'Var_' ::= {{ com Variables }}
| _                     :: M :: Blank          {{ coq "_" }}
| & xcc                 ::   :: Lit
  {{ tex [[xcc]] }}
  {{ coq (Var_Lit (trim "[[xcc]]")) }}
| && xcd                :: M :: Lit2
  {{ tex [[xcd]] }}
| $ a                   :: M :: Hidden
  {{ tex \$ [[a]] }}

covar, c :: 'CoVar_' ::= {{ com Coercion variables }}
| _                     :: M :: Blank          {{ coq "_" }}

vars, as {{ tex \overline{\ottnt{a} } }}, bs {{ tex \overline{\ottnt{b} } }},
  xs {{ tex \overline{\ottnt{x} } }} :: 'vars_' ::=
| a                     ::   :: One
| as1 , .... , asi      ::   :: Many        
| nil                   :: M :: Nil
| prefix ( as )         :: M :: Prefix
  {{ tex [[prefix]]([[as]]) }}

tycovar, z :: 'TyCoVar_' ::=
| a                     ::   :: Ty  {{ coq [[a]] }}
| c                     ::   :: Co  {{ coq [[c]] }}

mixed_vars, zs {{ tex \overline{\ottnt{z} } }} :: 'mixedVars_' ::=
| z                                  ::   :: One
| mixed_vars1 , .... , mixed_varsi   ::   :: Many
| nil                                :: M :: Nil
| dom ( G )                          :: M :: DomCtx
  {{ tex [[dom]]([[G]]) }}
| xs                                 :: M :: Tys

fvset, V {{ tex \mathcal{V} }} :: 'FVs_' ::=
| { zus }                            :: M :: Set
| fv ( ps )                          :: M :: fv_tycos
  {{ tex [[fv]] ( [[ps]] ) }}
| fv ( alt )                         :: M :: fv_alt
  {{ tex [[fv]] ( [[alt]] ) }}
| fv ( D )                           :: M :: fv_tel
  {{ tex [[fv]] ( [[D]] ) }}
| fv ( phi )                         :: M :: fv_prop
  {{ tex [[fv]] ( [[phi]] ) }}
| fv ( theta )                       :: M :: fv_theta
  {{ tex [[fv]] ( [[theta]] ) }}
| ( fvset )                          :: M :: Parens
| fvset1 \union fvset2               :: M :: Union
| fvset1 \ fvset2                    :: M :: Minus
  {{ tex [[fvset1]] \mathop{\backslash} [[fvset2]] }}
| \emptyset                          :: M :: Emptyset
| dom ( theta )                      :: M :: dom_subst
  {{ tex [[dom]]([[theta]]) }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Binders  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

relevance, rel {{ tex \rho }} :: 'Rel_' ::=
| Rel              ::   :: Rel
| Irrel            ::   :: Irrel

vis {{ tex \nu }} :: 'Vis_' ::=
| Req              ::   :: Req
| Spec             ::   :: Spec
| Inf              ::   :: Inf

colon {{ tex {:}_\mathsf{r} }} :: 'Colon_' ::=
| : rel                       ::   :: Colon
  {{ tex {:}_{[[rel]]} }}
  {{ coq [[rel]] }}

bnd, d {{ tex \delta }} :: 'Bnd_' ::=
| a colon t                        ::   :: Type
  {{ tex [[a]] [[colon]] [[t]] }}
| c : phi                          ::   :: Coercion
  {{ tex [[c]] {:} [[phi]] }}
| o : phi                          :: M :: ErasedCoercion
  {{ tex [[o]] {:} [[phi]] }}
| d [ theta ]                      :: M :: Subst
| d [ Z ]                          :: M :: Zonk
| d [ X ]                          :: M :: Gen

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  PIs  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

PI {{ tex \Pi }} :: 'Pi_' ::=
| MPI            ::   :: Matchable
| UPI            ::   :: Unmatchable
| PI _ vis       :: M :: Vis
  {{ tex {[[PI]]}_{[[vis]]} }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Types  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

typ, t {{ tex \tau }}, s {{ tex \sigma }}, k {{ tex \kappa }}, v,
  ee {{ tex \epsilon }}
  :: 'Type_' ::=
| a                            ::   :: Var
| H { ts }                     ::   :: TyCon
  {{ tex [[H]]_{ \{ [[ts]] \} } }}
| !!! t p                      ::   :: App
| !!! PI d . t                 ::   :: Pi
  {{ tex [[PI]] [[d]] .\, [[t]] }}
| t |> g                       ::   :: Cast
| case _ k t of alts           ::   :: Case
  {{ tex \ottkw{case}_{[[k]]}\, [[t]]\, \ottkw{of}\, [[alts]] }}
| !!! \ d . t                  ::   :: Lam
  {{ tex [[\]] [[d]]. \, [[t]] }}
| fix t                        ::   :: Fix
| absurd g t                   ::   :: Absurd

| t ps                         :: M :: Apps
  {{ coq (foldl Type_App ([[t]]) ([[ps]])) }}
| H {}                         :: M :: HEmpty
  {{ tex [[H]] }}
  {{ coq (Type_TyCon ([[H]]) []) }}
| PI D .  t                    :: M :: Pis
  {{ tex [[PI]] [[D]].\, [[t]] }}
  {{ coq (foldr (Type_Pi ([[PI]])) ([[t]]) ([[D]])) }}
| MUPI D . t                   :: M :: Mupis
  {{ tex [[MUPI]] [[D]].\, [[t]] }}
| \ D . t                      :: M :: Lams
  {{ tex [[\]] [[D]].\, [[t]] }}
  {{ coq (foldr Type_Lam ([[t]]) ([[D]])) }}
| t1 -> t2                     :: M :: Arrow
% | t1 ~> t2                     :: M :: FFArrow
| ( t )                        :: M :: Parens
  {{ coq [[t]] }}
| '{{' t '}}'                  :: M :: IParens
 {{ tex [[t]] }}
| blank                        :: M :: Omitted
| let c := h in t              :: M :: Let
| equals t1 t2                 :: M :: Equals

| au _ theta                   :: M :: UnifVar
  {{ tex [[au]]_{[[theta]]} }}
| au _{}                       :: M :: UnifVarPlain
  {{ tex [[au]] }}

| t [ theta ]                  :: M :: Subst
| t [ Z ]                      :: M :: Zonk
| t [ X ]                      :: M :: Gen

typs, ts {{ tex \overline{\tau} }}, ss {{ tex \overline{\sigma} }},
  ks {{ tex \overline{\kappa} }}, ees {{ tex \overline{\epsilon} }}
  :: 'types_' ::=
| t                       ::   :: One
| ts1 , .... , tsi        ::   :: Many
| nil                     :: M :: Nil  
| prefix ( ts )           :: M :: Prefix
  {{ tex [[prefix]]([[ts]]) }}
| ts [ theta ]            :: M :: Subst
| ts [ Z ]                :: M :: Zonk
| ts [ X ]                :: M :: Gen
| '|' ts '|'              :: M :: Erased
  {{ tex \lfloor [[ts]] \rfloor }}
| aus _{}                 :: M :: UnifVars
  {{ tex [[aus]] }}

alts {{ tex \overline{\ottnt{alt} } }} :: 'alts_' ::=
| alt                    ::   :: One
| alts1 ; .... ; altsi   ::   :: Many
| nil                    ::   :: Nil
| '|' alts '|'           :: M :: Erased
  {{ tex \lfloor [[alts]] \rfloor }}
| list of alt            :: M :: List
  {{ tex \overline{[[alt]]} }}
| make_exhaustive ( alts ; k ) :: M :: makeExh
  {{ tex [[make_exhaustive]]([[alts]];[[k]]) }}

alt :: 'Alt_' ::=
| pat -> t               ::   :: Alt
| alt [ theta ]          :: M :: Subst
| alt [ Z ]              :: M :: Zonk
| alt [ X ]              :: M :: Gen
| ( alt )                :: M :: Parens

pat {{ tex \pi }} :: 'Pat_' ::=
| H                 ::   :: Con
| _                 ::   :: Default

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Proposition  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

prop, phi {{ tex \phi }} :: 'Phi_' ::=
| t1 ( k1 )~( k2 ) t2          ::   :: Equality
  {{ tex [[t1]] \mathrel{ {}^{[[k1]]} {\sim}^{[[k2]]} } [[t2]] }}
| t1 [ k1 ]~[ k2 ] t2          :: M :: IEquality
  {{ tex [[t1]] \mathrel{ {}^{\supp{[[k1]]} } {\sim}^{\supp{[[k2]]} } } [[t2]] }}
  {{ coq (Phi_Equality ([[t1]]) ([[k1]]) ([[k2]]) ([[t2]])) }}
| phi [ theta ]                :: M :: Subst
| phi [ Z ]                    :: M :: Zonk
| phi [ X ]                    :: M :: Gen
| ( phi )                      :: M :: Parens

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Coercions  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

coercion, g {{ tex \gamma }}, h {{ tex \eta }}
  :: 'Co_' ::=
| c                            ::   :: Var
| < t >                        ::   :: Refl
  {{ tex \langle [[t]] \rangle }}
| sym g                        ::   :: Sym
| g1 ;; g2                     ::   :: Trans
| t1 ~= { h } t2               ::   :: Coherence
  {{ tex [[t1]] [[~=]]_{[[h]]} [[t2]] }}
| H { gs }                     ::   :: Con
  {{ tex [[H]]_{ \{ [[gs]] \} } }}
| g w                          ::   :: App
| PI a colon h . g             ::   :: PiTy
  {{ tex [[PI]] [[a]] [[colon]] [[h]]. \, [[g]] }}
| PI c : ( h1 , h2 ) . g       ::   :: PiCo
  {{ tex [[PI]] [[c]] {:} ([[h1]],[[h2]]).\, [[g]] }}
| case _ h g of calts          ::   :: Case
  {{ tex \ottkw{case}_{[[h]]}\, [[g]]\, \ottkw{of}\, [[calts]] }}
| \ a colon h . g              ::   :: Lam
  {{ tex [[\]] [[a]] [[colon]] [[h]].\, [[g]] }}
| \ c : ( h1 , h2 ) . g        ::   :: CLam
  {{ tex [[\]] [[c]] {:} ([[h1]],[[h2]]).\,[[g]] }}
| fix g                        ::   :: Fix
| absurd ( g1 , g2 ) h         ::   :: Absurd
  {{ tex \ottkw{absurd}\,([[g1]],[[g2]])\,[[h]] }}
| argk g                       ::   :: ArgK
| argk I g                     ::   :: CArgK
  {{ tex {[[argk]]}_{[[I]]}\,[[g]] }}
| res ^ I g                    ::   :: Res
  {{ tex [[res]]^{[[I]]}\,[[g]] }}
| !!! g @ w                    ::   :: Inst
| g @\ w                       ::   :: InstLam
| nth I g                      ::   :: Nth
  {{ tex {[[nth]]}_{[[I]]}\,[[g]] }}
| kind g                       ::   :: Kind
| step t                       ::   :: Step

| ( g )                        :: M :: Parens
  {{ coq [[g]] }}

| o                            :: M :: Erased
| H {}                         :: M :: NoUnivs
  {{ tex [[H]] }}
| g @ ws                       :: M :: Insts
  {{ coq (foldl Co_Inst ([[g]]) ([[ws]])) }}
| let c := h in g              :: M :: Let
| let c := h in \\ g           :: M :: LetBreak
  {{ tex \begin{vertmath} \ottkw{let}\ [[c]] [[:=]] [[h]]\ \ottkw{in} \\ [[g]] \end{vertmath} }}
| g [ theta ]                  :: M :: Subst
| g [ Z ]                      :: M :: Zonk
| g [ X ]                      :: M :: Gen
| step ^ I t                   :: M :: ManyStep
  {{ tex \ottkw{step}^{[[I]]}\, [[t]] }}
| axEquals t                   :: M :: AxEquals
| axApart t1 t2                :: M :: AxApart
| arrow t1 t2                  :: M :: Arrow

| cu _ theta                   :: M :: UnifVar
  {{ tex [[cu]]_{[[theta]]} }}
| cu _{}                       :: M :: UnifVarPlain
  {{ tex [[cu]] }}

coercions, gs {{ tex \overline{\gamma} }}, hs {{ tex \overline{\eta} }}
  :: 'cos_' ::=
| g                            ::   :: One
| gs1 , .... , gsi             ::   :: Many
| nil                          :: M :: Empty
| ( gs )                       :: M :: Parens
| nths g                       :: M :: Nths

calt :: 'CAlt_' ::=
| pat -> g                        ::   :: Alt

calts {{ tex \overline{\ottnt{calt} } }} :: 'calts_' ::=
| calt                   ::   :: One
| calts1 ; .... ; caltsi ::   :: Many
| nil                    :: M :: Nil
| list of calt           :: M :: List
  {{ tex \overline{[[calt]]} }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Arguments  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

arg, p {{ tex \psi }} :: 'Arg_' ::=
| t                   ::   :: Ty
| { t }               ::   :: IrrelTy
| g                   ::   :: Co
| '|' p '|'           :: M :: Erased
  {{ tex \lfloor [[p]] \rfloor }}

args, ps {{ tex \overline{\psi} }} :: 'args_' ::=
| p                     ::   :: One
| args1 .... argsi      ::   :: Many
| args1 , .... , argsi  :: M :: ManyComma
| nil                   :: M :: Nil
| zs                    :: M :: Vars
| ps [ theta ]          :: M :: Subst
| ps [ Z ]              :: M :: Zonk
| ps [ X ]              :: M :: Gen
| ts                    :: M :: Types
| gs                    :: M :: Cos
| ps _{ I1 '..' I2 }    :: M :: IndexPrefix
  {{ tex {[[ps]]}_{[[I1]] \ldots [[I2]]} }}
| '|' ps '|'            :: M :: Erased
  {{ tex \lfloor [[ps]] \rfloor }}

coarg, w {{ tex \omega }} :: 'CoArg_' ::=
| g                    ::   :: Ty
| { g }                ::   :: TyIrrel
| ( g1 , g2 )          ::   :: Co

coargs, ws {{ tex \overline{\omega} }} :: 'coargs_' ::=
| w                    ::   :: One
| ws1 .... wsi         ::   :: Many
| nil                  :: M :: Nil
| gs                   :: M :: Coercions

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Signatures  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

sig, S {{ tex \Sigma }} :: 'sig_' ::=
| sig_bnd                      ::   :: One
| S1 , .... , Si               ::   :: Many
| nil                          :: M :: Nil  

sig_bnd :: 'SigBnd_' ::=
| T : adt_kind                 ::   :: ADT
  {{ tex [[T]]{:}[[adt_kind]] }}
| K : con_type                 ::   :: Con
  {{ tex [[K]]{:}[[con_type]] }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Contexts  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

context, G {{ tex \Gamma }}, D {{ tex \Delta }} :: 'ctx_' ::=
| d                            ::   :: One
| G1 , .... , Gi               ::   :: Many
| nil                          :: M :: Nil
| G [ theta ]                  :: M :: Subst
| G [ Z ]                      :: M :: Zonk
| G [ X ]                      :: M :: Gen
| as : rel ks                  :: M :: ZipKs
  {{ tex [[as]]{:}_{[[rel]]} [[ks]] }}
% | as : rel D                   :: M :: Telescope
%   {{ tex [[as]]{:}_{[[rel]]} [[D]] }}
| ( G )                        :: M :: Parens
| Rel ( G )                    :: M :: ApplyRel
  {{ tex [[Rel]]([[G]]) }}
| prefix ( G )                 :: M :: Prefix
  {{ tex [[prefix]]([[G]]) }}
| '|' D '|'                    :: M :: Erased
  {{ tex \lfloor [[D]] \rfloor }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Substitutions  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

substs, theta {{ tex \theta }} :: 'Substs_' ::=
| subst                             ::   :: One
| substs1 , .... , substsi          ::   :: Many
| nil                               :: M :: Nil  
| ps / zs                           :: M :: Telescope
| ( theta )                         :: M :: Parens
| theta \inter zs                   :: M :: Restrict
  {{ tex [[theta]] \pipe_{[[zs]]} }}
| theta \ V                         :: M :: Exclusion
  {{ tex [[theta]] \mathop{\backslash} [[V]] }}
| theta1 o theta2                   :: M :: Compose
  {{ tex [[theta1]] \circ [[theta2]] }}
| { theta }                         :: M :: Braces
  {{ tex [[theta]] }}
| theta [ Z ]                       :: M :: Zonk
| theta [ X ]                       :: M :: Gen

subst :: 'Subst_' ::=
| t / a                  ::   :: TyVar
| g / c                  ::   :: CoVar

unif_result :: 'UnifResult_' ::=
| Nothing                     ::   :: Nothing   {{ coq Nothing }}
| Just theta                  ::   :: Just      {{ coq (Just ([[theta]])) }}
| match _ V ( ts1 ; ts2 ) :: M :: match
  {{ tex [[match]]_{[[V]]}([[ts1]];[[ts2]]) }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Expressions  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

exp, e, ev {{ tex \ottnt{w} }} :: 'E_' ::=
| a                             ::   :: Var
| H                             ::   :: Const
| !!! e y                       ::   :: App
| PI                            ::   :: Pi
| case e of ealts               ::   :: Case
| \ a . e                       ::   :: Lam
| \ o . e                       ::   :: CLam
  {{ tex [[\]]{[[o]]}.[[e]] }}
| fix e                         ::   :: Fix

| e ys                          :: M :: Apps
| ( e )                         :: M :: Parens
| e [ esubsts ]                 :: M :: Subst

ealt :: 'EAlt_' ::=
| pat -> e                        ::   :: EAlt

ealts {{ tex \overline{\ottnt{ealt} } }} :: 'EAlts_' ::=
| ealt                          ::   :: One
| ealts1 ; .... ; ealtsi        ::   :: Many
| nil                           :: M :: nil
| || alts ||                    :: M :: Erased
  {{ tex \llfloor [[alts]] \rrfloor }}

earg, y :: 'EArg_' ::=
| e                             ::   :: Exp
| o                             ::   :: Co

eargs, ys {{ tex \overline{\ottnt{y} } }} :: 'EArgs_' ::=
| y                             ::   :: One
| ys1 .... ysi                  ::   :: Many
| nil                           :: M :: Nil

esubst :: 'ESubst_' ::=
| e / a                         ::   :: Expr

esubsts :: 'ESubsts_' ::=
| esubst                               ::   :: One
| esubst1 , .... , esubsti             ::   :: Many
| nil                                  :: M :: Nil

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Utility  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

eq :: 'Eq_' ::=
| =                         ::   :: Equal
  %% the M on the next line is important so that
  %% ottdump builds
| &=                        :: M :: Align
  {{ tex &= }}
| /=                        ::   :: NotEqual
  {{ tex \neq }}

nil :: 'Nil_' ::=
| empty                     ::   :: Empty
| blank                     ::   :: Omitted

lr :: 'LR_' ::=
| left                      ::   :: Left
  {{ tex \mathrm{L} }}
| right                     ::   :: Right
  {{ tex \mathrm{R} }}

nat, I {{ tex \ottnt{i} }}, NN {{ tex \ottnt{n} }}  :: 'Nat_' ::=
| i                         ::   :: Index
| 0                         ::   :: Zero
| 1                         ::   :: One
| 2                         ::   :: Two
| 3                         ::   :: Three
| 4                         ::   :: Four
| I1 - I2                   :: M :: Sub
| I1 + I2                   :: M :: Plus
| length D                  :: M :: TelescopeLength
  {{ tex \pipe [[D]] \pipe }}
| length ps                 :: M :: VectorLength
  {{ tex \pipe [[ps]] \pipe }}
| max ( NNs )               :: M :: Max
  {{ tex [[max]]([[NNs]]) }}

nats, Is {{ tex \overline{\ottnt{i} } }}, NNs {{ tex \overline{\ottnt{n} } }}
  :: 'Nats_' ::=
| I                        ::   :: One
| I1 , .... , Ii           ::   :: Many
| nil                      :: M :: Nil

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Defined functions  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

funs
Util ::=

fun
types ( D ) :: ts :: types
  {{ tex [[types]]([[D]]) }}

by
types(empty)                 === empty
types(D, a :rel k)           === types(D), k
types(D, c: t1 (k1)~(k2) t2) === types(D), k1, k2, t1, t2

funs
Co ::=

fun
build_kpush_co ( g ; ps ) :: h :: build_kpush_co
  {{ tex [[build_kpush_co]]([[g]];[[ps]]) }}

by
build_kpush_co ( g ; empty ) === g
build_kpush_co ( g ; ps, t ) === let c := build_kpush_co(g; ps) in \\ c@(t ~={argk c} t |> argk c)
build_kpush_co ( g ; ps,{t}) === let c := build_kpush_co(g; ps) in \\ c@{t ~={argk c} t |> argk c}
build_kpush_co ( g ; ps, h ) === let c := build_kpush_co(g; ps) in \\ c@(h, sym (argk 1 c) ;; h ;; argk 2 c)

% fun
% mk_nth ( g ; I ; p1 ; p2 ) :: w :: mk_nth
%   {{ tex [[mk_nth]]([[g]];[[I]];[[p1]];[[p2]]) }}

% by
% mk_nth(g;I;t;s)     === nth I g
% mk_nth(g;I;{t};{s}) === nth I g
% mk_nth(g;I;h1;h2)   === (h1,h2)

fun
cast_kpush_arg ( p0 ; g ) :: p :: cast_kpush_arg
  {{ tex [[cast_kpush_arg]]([[p0]];[[g]]) }}

by
cast_kpush_arg(t;g)   === t |> argk g
cast_kpush_arg({t};g) === {t |> argk g}
cast_kpush_arg(g;h)   === sym (argk 1 h) ;; g ;; argk 2 h

funs
Erase ::=

fun
'|' t '|' :: s :: erase_type
  {{ tex \lfloor [[t]] \rfloor }}

by
|a|                === a
|H{ts}|            === H{|ts|}
|t1 t2|            === |t1| |t2|
|t1 {t2}|          === |t1| {|t2|}
|t g|              === |t| o
|PI d. t|          === PI |d|.|t|
|t |> g|           === |t|
|case_k t of alts| === case_|k| |t| of |alts|
|\d.t|             === \|d|.|t|
|fix t|            === fix |t|
|absurd g t|       === absurd o |t|

fun
'|' d0 '|' :: d :: erase_binder
  {{ tex \lfloor [[d0]] \rfloor }}

by
|a :rel k|    === a :rel |k|
|c:phi|       === o : |phi|

fun
'|' phi0 '|' :: phi :: erase_prop
  {{ tex \lfloor [[phi0]] \rfloor }}

by
|t1 (k1)~(k2) t2|   === |t1| (|k1|)~(|k2|) |t2|

fun
'|' alt0 '|' :: alt :: erase_alt
  {{ tex \lfloor [[alt0]] \rfloor }}

by
|pat -> t|  === pat -> |t|

funs
TErase ::=

fun
|| t || :: e :: terase_type
  {{ tex \llfloor [[t]] \rrfloor }}

by
|| a ||              === a
|| H {ts} ||         === H
|| t1 t2 ||          === ||t1|| ||t2||
|| t1 {t2} ||        === ||t1||
|| t1 g ||           === ||t1|| o
|| PI d. t ||        === PI
|| t |> g ||         === ||t||
||case_k t of alts|| === case ||t|| of ||alts||
|| \a :Rel k. t ||   === \a.||t||
|| \a :Irrel k. t || === ||t||
|| \c:phi.t ||       === \o.||t||
|| fix t ||          === fix ||t||
|| absurd g t ||     === PI

fun
|| alt || :: ealt :: terase_alt
  {{ tex \llfloor [[alt]] \rrfloor }}

by
|| pat -> t ||   === pat -> ||t||


%% Type inference for Dependent Haskell

defns
JInf :: 'I' ::=

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Synthesis  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% postcondition: k has no inferred OR specified binders
defn
S ; P |->ty _t ~> t : k -| O :: :: ITy :: 'Ty_'
by

S;P *|->ty _t ~> t : k -| O1
|->inst_Spec k ~> ps; k' -| O2
-------------------------- :: Inst
S;P |->ty _t ~> t ps : k' -| O1,O2

% postcondition: k has no inferred binders
defn
S ; P *|->ty _t ~> t : k -| O :: :: ITyS :: 'Ty_'
by

a :Rel k \in P  //  |->inst_Inf k ~> ps; k' -| O
-------------------------------- :: Var
S;P *|->ty a ~> a ps : k' -| O

S;P |->ty _t1 ~> t1 : k0 -| O1
|->fun k0;Rel ~> g; PI; a; rel; k1; k2 -| O2
S;P,O1,O2;rel *|->arg _t2 : k1 ~> p2;t2 -| O3
---------------------------------------------- :: App
S;P *|->ty _t1 _t2 ~> (t1 |> g) p2 : k2[t2/a] -| O1,O2,O3

S;P *|->ty _t1 ~> t1 : PI_Spec a:rel k1.k2 -| O1
S;P,O1;rel *|->arg _t2 : k1 ~> p2;t2 -| O2
-------------------------------- :: AppSpec
S;P *|->ty _t1 @_t2 ~> t1 p2 : k2[t2/a] -| O1,O2

S;P |->pt _s ~> s -| O1
S;P,O1 *|->ty _t : s ~> t -| O2
-------------------------------- :: Annot
S;P *|->ty (_t :: _s) ~> t : s -| O1,O2

S;P |->ty _t0 ~> t0 : k0 -| O0
S |->scrut _alts; k0 ~> g; D; H'; ts -| O0'
fresh au // O' = O0,O0',au:Type{}
forall i: S;P,O';MPI D. H'{} ts;t0 |> g |->alt _alti : au ~> alti -| Oi
alts' = make_exhaustive(alts; k)
------------------------------------ :: Case
S;P *|->ty case _t0 of _alts ~> case_au (t0 |> g) of alts' : au -| O',Os

S;P |->q _qvar ~> a : k1; vis -| O1
S;P,O1,a:Rel k1 *|->ty _t ~> t : k2 -| O2
------------------------------------- :: Lam
S;P *|->ty \ _qvar . _t ~> \ a :Rel k1. t : UPI_vis a:Rel k1. k2 -| O1,<a:Rel k1|O2>

S;P |->q _qvar ~> a : k1; vis -| O1
S;P,O1,a:Irrel k1 *|->ty _t ~> t : k2 -| O2
------------------------------------- :: LamIrrel
S;P *|->ty /\ _qvar . _t ~> \ a :Irrel k1. t : UPI_vis a:Rel k1. k2 -| O1,<a:Rel k1|O2>

S;P |->ty _t1 : Type{} ~> t1 -| O1
S;P |->ty _t2 : Type{} ~> t2 -| O2
a # t2
-------------------------------- :: Arrow
S;P *|->ty _t1 -> _t2 ~> UPI_Req a :Rel t1. t2 : Type{} -| O1,O2

S;P |->ty _t1 : Type{} ~> t1 -| O1
S;P |->ty _t2 : Type{} ~> t2 -| O2
a # t2
------------------------------- :: MArrow
S;P *|->ty _t1 '-> _t2 ~> MPI_Req a :Rel t1. t2 : Type{} -| O1,O2

S;P |->ty _t ~> t : k -| O1
|->fun k;Rel ~> g; UPI; a; Rel; k1; k2 -| O2
a # k2 // fresh cu // O = O1,O2,cu : k2 [Type{}]~[Type{}] k1
--------------------------------- :: Fix
S;P *|->ty fix _t ~> fix (t |> (g ;; UPI a:Rel <k1>. cu)) : k1 -| O

S;P *|->ty _t1 ~> t1 : k1 -| O
S;P,O,x:Rel k1 *|->ty _t2 ~> t2 : k2 -| O2
-------------------------------- :: Let
S;P *|->ty let x := _t1 in _t2 ~> (\ x:Rel k1. t2) t1 : k2[t1/x] -| O,<x:Rel k1|O2>

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Checking  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% precondition: k has no Inf/Spec binders at the top, and no Inf binders
% to the right of arrows
defn
S ; P |->ty _t : k ~> t -| O :: :: ITyDown :: 'TyC_'
by

S;P |->ty _t0 ~> t0 : k0 -| O0
S |->scrut _alts; k0 ~> g; D; H'; ts -| O0'
O' = O0, O0'
forall i: S;P,O';MPI D. H'{} ts; t0 |> g |->altc _alti : k ~> alti -| Oi
alts' = make_exhaustive(alts; k)
---------------------------------- :: Case
S;P |->ty case _t0 of _alts : k ~> case_k (t0 |> g) of alts' -| O', Os

% RAE: WRONG
|->fun k;Rel ~> g; UPI; a; Rel; k1; k2 -| O0
S;P |->aq _aqvar ~> b : k1' -| O
k1 <= k1' ~> t1 -| O1
S;P,O0,O,b:Rel k1' *|->ty _t : k2 ~> t -| O2
---------------------------------- :: Lam
S;P |->ty \ _aqvar . _t : k ~> (\ a:Rel k1. t[t1 a/b]) |> sym g -| O0,O,O1,<b:Rel k1'|O2>

% RAE: WRONG
|->fun k; Irrel ~> g; UPI; a; Irrel; k1; k2 -| O0
S;P |->aq _aqvar ~> b : k1' -| O
k1 <= k1' ~> t1 -| O1
S;P,O0,O,b:Irrel k1' *|->ty _t : k2 ~> t -| O2
---------------------------------- :: LamIrrel
S;P |->ty /\ _aqvar . _t : k ~> (\ a:Irrel k1. t[t1 a/b]) |> sym g -| O0,O,O1,<b:Rel k1'|O2>

S;P |->ty _t : UPI_Req a:Rel k.k ~> t -| O
------------------------------- :: Fix
S;P |->ty fix _t : k ~> fix t -| O

% NB: This does generalization
S;P *|->ty _t ~> t : k1 -| O
S;P |->solv O ~> D; Z
t' = \ D. t[Z]
k1' = UPI_Inf D. k1[Z]
k1' <= k2 ~> t2 -| O2
---------------------------- :: Infer
S;P |->ty _t : k2 ~> t2 t' -| O2

% precondition: k has no UPI Inf binders at top or to the right of any
% arrow
defn
S ; P *|->ty _t : k ~> t -| O :: :: ITyDownS :: 'TyC_'
by

S;P |->aq _aqvar ~> b : k1' -| O
k1 <= k1' ~> t1 -| O1
S;P,O,O1,b:Rel k1' *|->ty _t : k2 ~> t -| O2
------------------------------------------------- :: LamInvis
S;P *|->ty \ @_aqvar . _t : UPI_Spec a :Rel k1.k2 ~> \ a:Rel k1. t[t1 a/b] -| O,O1,<b:Rel k1'|O2>

S;P |->aq _aqvar ~> b : k1' -| O
k1 <= k1' ~> t1 -| O1
S;P,O,O1,b:Irrel k1' *|->ty _t : k2 ~> t -| O2
------------------------------------------------- :: LamInvisIrrel
S;P *|->ty /\ @_aqvar . _t : UPI_Spec a :Irrel k1.k2 ~> \ a:Irrel k1. t[t1 a/b] -| O,O1,<b:Irrel k1'|O2>

S;P *|->ty _t1 ~> t1 : k1 -| O
S;P,O,x:Rel k1 *|->ty _t2 : k ~> t2 -| O2
---------------------------------------- :: Let
S;P *|->ty let x := _t1 in _t2 : k ~> (\x:Rel k1. t2) t1 -| O,<x:Rel k1|O2>

S;P,$a:rel k1 *|->ty _t : k2 ~> t -| O
---------------------------------------------- :: Skol
S;P *|->ty _t : UPI_Spec $a:rel k1.k2 ~> \ $a:rel k1. t[theta] -| <$a:rel k1|O>

S;P |->ty _t : k ~> t -| O
--------------------------- :: Otherwise
S;P *|->ty _t : k ~> t -| O

defn
S ; P |->pt _s ~> t -| O :: :: ITyDownPoly :: 'PtC_'
by

|->pi quant ~> PI; rel
S;P |->q _qvar ~> a : k; vis -| O
S;P,a:rel k |->pt _s ~> s -| O2
----------------------------------- :: Pi
S;P |->pt forall _qvar . _s ~> PI_vis a :rel k. s -| O,<a:rel k|O2>

% This should be Constraint
S;P |->ty _t : Type{} ~> t -| O1
S;P,$a:Rel t |->pt _s ~> s -| O2
------------------------- :: Constrained
S;P |->pt _t => _s ~> UPI_Inf $a:Rel t. s -| O1, <$a:Rel t| O2>

S;P |->ty _t : Type{} ~> t -| O
----------------- :: Mono
S;P |->pt _t ~> t -| O

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Arguments (always checking)  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defn
S ; P ; rel *|->arg _t : k ~> p ; t -| O :: :: IArg :: 'Arg_'
by

S;P *|->ty _t : k ~> t -| O
----------------------------------- :: Rel
S;P;Rel *|->arg _t : k ~> t;t -| O

S;Rel(P) *|->ty _t : k ~> t -| O
--------------------------------------- :: Irrel
S;P;Irrel *|->arg _t : k ~> {t};t -| O

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Case alternative synthesis  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defn
S ; P ; k0 ; t0 |->alt _alt : k ~> alt -| O :: :: IAlt :: 'Alt_'
by

S |-tc H : D1;D2;H' // D3,D4 = D2[ts/dom(D1)] // dom(D3) = xs
dom(D4) = dom(D')
match_{dom(D3)}(types(D4);types(D')) = Just theta0
S;P,D3 |->ty _t : k ~> t -| O
------------------------------------ :: Con
S;P;MPI D'. H'{} ts;t0 |->alt H xs -> _t : k ~> H -> \ D3, (c : t0 [MPI D'. H'{} ts]~[MPI D4.H'{} ts] H{ts} xs). t -| <D3|O>

S;P |->ty _t : k ~> t -| O
--------------------------------------- :: Default
S;P;k0;t0 |->alt _ -> _t : k ~> _ -> t -| O

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Case alternative checking  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defn
S ; P ; k0 ; t0 |->altc _alt : k ~> alt -| O :: :: IAltC :: 'AltC_'
by

S |-tc H : D1;D2;H' // D3,D4 = D2[ts/dom(D1)] // dom(D3) = xs
dom(D4) = dom(D')
match_{dom(D3)}(types(D4);types(D')) = Just theta0
D3' = D3,c:t0 [MPI D'.H'{} ts]~[MPI D4.H'{} ts] H{ts} xs
S;P,D3' |->ty _t : k ~> t -| O
------------------------------------ :: Con
S;P;MPI D'. H'{} ts;t0 |->altc H xs -> _t : k ~> H -> \ D3'. t -| <D3'| O>

S;P |->ty _t : k ~> t -| O
--------------------------------------- :: Default
S;P;k0;t0 |->altc _ -> _t : k ~> _ -> t -| O

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Quantifier extraction  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defn
S ; P |->q _qvar ~> a : k ; vis -| O :: :: IQVar :: 'QVar_'
by

S;P |->aq _aqvar ~> a : k -| O
--------------------------- :: Req
S;P |->q _aqvar ~> a : k; Req -| O

S;P |->aq _aqvar ~> a : k -| O
----------------------------- :: Spec
S;P |->q @_aqvar ~> a : k; Spec -| O

defn
S ; P |->aq _aqvar ~> a : k -| O :: :: IAQVar :: 'AQVar_'
by

fresh bu
------------------------------------ :: Var
S;P |->aq a ~> a : bu -| bu : Type{}

S;P |->pt _s ~> s -| O
------------------------------------ :: Annot
S;P |->aq (a :: _s) ~> a : s -| O

defn
|->pi quant ~> PI ; rel :: :: IQuant :: 'Qu_'
by

------------------------- :: ForAll
|->pi forall ~> UPI ; Irrel

---------------------------- :: MForAll
|->pi 'forall ~> MPI ; Irrel

----------------------- :: Pi
|->pi pie ~> UPI ; Rel

---------------------- :: MPi
|->pi 'pie ~> MPI ; Rel

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  matchExpectedFunTy  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% precondition: k has no Inf or Spec binders
% == matchExpectedFunTy
% takes a default relevance, but outputs the actual relevance found, which
% may be different
defn
|->fun k ; rel1 ~> g ; PI ; a ; rel2 ; k1 ; k2 -| O :: :: IFun :: 'Fun_'
by

-------------------- :: Id
|->fun PI_Req a:rel k1. k2; rel0 ~> <PI_Req a:rel k1.k2>; PI; a; rel; k1; k2 -| empty

fresh cu // fresh bu1, bu2
-------------------- :: Cast
|->fun k0; rel ~> cu; UPI; a; rel; bu1; bu2 -| bu1:Type{}, bu2:Type{}, cu : k0 [Type{}]~[Type{}] UPI_Req a:rel bu1.bu2

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  matchExpectedTyConApp  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% precondition: k has noInf or Spec binders
defn
S |->scrut _alts ; k ~> g ; D ; H ; ts -| O  :: :: IScrut :: 'Scrut_'
by

dom(D) # ts
--------------------------------------------- :: Id
S |->scrut _alts; MPI D. H{} ts ~> <MPI D. H{} ts>; D; H; ts -| empty

S |-tc H : as :Irrel ks; D2; H'
fresh aus // fresh cu
------------------------------ :: Cast
S |->scrut (H xs -> _t; _alts); k ~> cu; empty; H'; aus -| aus : ks[aus/as], cu : k [Type{}]~[Type{}] H'{} aus

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  topInstantiate  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% postcondition: k has no binders with a visibility at or less than the one
% requested
% if t :: k, then t ps :: k'
defn
|->inst _ vis k ~> ps ; k' -| O :: :: IInst :: 'Inst_'
  {{ tex [[|->inst]]^{\hspace{-1.4ex}\raisemath{.1ex}{[[vis]]} } [[k]] [[~>]] [[ps]]; [[k']] [[-|]] [[O]] }}
by

fresh au  //  vis2 <= vis1
|->inst_vis1 k2[au/a] ~> ps; k2' -| O
------------------------------- :: Rel
|->inst_vis1 PI_vis2 a:Rel k1. k2 ~> au, ps; k2' -| au : k1, O

fresh au  // vis2 <= vis1
|->inst_vis1 k2[au/a] ~> ps; k2' -| O
------------------------------- :: Irrel
|->inst_vis1 PI_vis2 a:Rel k1. k2 ~> {au}, ps; k2' -| au : k1, O

fresh cu
|->inst_vis1 k2[cu/c] ~> ps; k2' -| O
------------------------------- :: Co
|->inst_vis1 PI_Inf c:phi.k ~> cu, ps; k2' -| cu : phi, O

-------------------------------- :: Done
|->inst_vis1 k ~> empty; k -| empty

defn
vis1 <= vis2 :: :: VisLT :: 'Vis_'
by

---------- :: Refl
vis <= vis

vis1 <= vis2 // vis2 <= vis3
---------------------------- :: Trans
vis1 <= vis3

----------- :: InfSpec
Inf <= Spec

----------- :: SpecReq
Spec <= Req

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Constraint solving  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% As in OutsideIn
defn
S ; P |->solv O ~> D ; Z :: :: ISolv :: 'Solv_'
by

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  tcSubType  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% t :: (UPI D. k') -> k
defn
|->pre k ~> D ; k' ; t :: :: IPrenex :: 'Prenex_'
by

vis <= Spec
|->pre k2 ~> D ; k2' ; t
----------------------------- :: Invis
|->pre UPI_vis d.k2 ~> d,D; k2'; \ (x :Rel UPI d,D. k2'), d. t (x dom(d))
% where t' :: (UPI d,D. k2') -> UPI d.k2

|->pre k2 ~> D; k2'; t
---------------------------- :: Vis
|->pre UPI_Req d.k2 ~> D; UPI_Req d.k2'; \ (x :Rel UPI D,d.k2'), d. t (\ D. x dom(D) dom(d))
% where t' :: (UPI D, d.k2') -> UPI d.k2

--------------------------- :: NoPi
|->pre k ~> empty; k; \x :Rel k. x

% precondition: no invisible binders on either k1 or k2
defn
k1 *<= k2 ~> t -| O :: :: ISub2 :: 'Sub_'
by

k3 <= k1 ~> t1 -| O1  //   k2[t1 b/a] <= k4 ~> t2 -| O2
-------------------------------------------- :: FunRel
UPI_Req a:Rel k1. k2 *<= UPI_Req b:Rel k3.k4 ~> \ x :Rel (UPI a:Rel k1.k2), b:Rel k3. t2 (x (t1 b)) -| O1,<b:Rel k3|O2>

k3 <= k1 ~> t1 -| O1  //   k2[t1 b/a] <= k4 ~> t2 -| O2
-------------------------------------------- :: FunIrrel
UPI_Req a:Irrel k1. k2 *<= UPI_Req b:Irrel k3.k4 ~> \ x :Rel (UPI a:Irrel k1.k2), b:Irrel k3. t2 (x {t1 b}) -| O1,<b:Irrel k3|O2>

fresh cu
----------------------- :: Unify
t1 *<= t2 ~> \ x:Rel t1. (x |> cu) -| cu : t1 [Type{}]~[Type{}] t2

defn
k1 <= k2 ~> t -| O :: :: ISub :: 'Sub_'
by

|->pre k2 ~> D; k2'; t1
|->inst_Spec k1 ~> ps; k1' -| O1
k1' *<= k2' ~> t2 -| O2
------------- :: DeepSkol
k1 <= k2 ~> \ x:Rel k1. t1 (\ D. t2 (x ps)) -| O1,<D|O2>

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Contexts  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
JUnzonked :: '' ::=

defn
S ; P |=ty t : k :: :: UTy :: 'Ty_'
by

au : k \in P under D  //  D \subseteq P  // S |=ctx P
--------------- :: UVar
S;P |=ty au : k

defn
S ; P |=co g : phi :: :: UCo :: 'Co_'
by

cu : phi \in P under D  // D \subseteq P // S |=ctx P
----------------- :: UVar
S;P |=co cu : phi

defn
S |=ctx P :: :: UCtx :: 'Ctx_'
  {{ tex [[S]] [[|=ctx]] [[P]] \ok }}
by

S;Rel(P) |=ty k : Type{}  // S |=ctx P
------------------ :: UTyVar
S |=ctx P, au : k

S;Rel(P) |=prop phi  // S |=ctx P
-------------------- :: UCoVar
S |=ctx P, cu : phi

S |=ctx P,D,O
----------------- :: Givens
S |=ctx P, <D|O>

defn
u \in P under D :: :: InUnder :: 'UBnd_'
  {{ tex [[u]] [[\in]] [[P]] \text{ under } [[D]] }}
by

-------------------- :: Here
u \in P,u under empty

u \in O under D2
--------------------- :: Under
u \in P,<D1|O> under D1,D2

u \in P under D
------------------ :: There
u \in P,u' under D

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Zonking  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defn
S ; P |=z Z : O :: :: Zonk :: 'Zonk_'
by

---------------------- :: Nil
S;P |=z empty : empty

t has no unification variables
S;P |=ty t : k
S;P |=z Z : O[t/au]
-------------------------- :: TyVar
S;P |=z t/au, Z : au:k, O

g has no unification variables
S;P |=co g : phi
S;P |=z Z : O[g/cu]
--------------------------- :: CoVar
S;P |=z g/cu, Z : cu:phi, O

S;P,D1 |=z Z1 : O1
S;P |=z Z : O
----------------------------- :: Givens
S;P |=z <D1|Z1>,Z : <D1|O1>,O


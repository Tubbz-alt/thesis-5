%% Type inference for Dependent Haskell

defns
JInf :: 'I' ::=

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Synthesis  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% postcondition: k has no inferred OR specified binders
defn
S ; P |->ty _t ~> t : k -| O :: :: ITy :: 'Ty_'
  {{ com Synthesize a type with no invisible binders. }}
by

S;P *|->ty _t ~> t : k -| O1
|->inst_Spec k ~> ps; k' -| O2
-------------------------- :: Inst
S;P |->ty _t ~> t ps : k' -| O1,O2

% postcondition: k has no inferred binders
defn
S ; P *|->ty _t ~> t : k -| O :: :: ITyS :: 'Ty_'
  {{ com Synthesize a type, perhaps with specified binders. }}
by

a :Rel k \in P  //  |->inst_Inf k ~> ps; k' -| O
-------------------------------- :: Var
S;P *|->ty a ~> a ps : k' -| O

S;P |->ty _t1 ~> t1 : k0 -| O1
|->fun k0;Rel ~> g; PI; a; rel; k1; k2 -| O2
S;P,O1,O2;rel *|->arg _t2 : k1 ~> p2;t2 -| O3
---------------------------------------------- :: App
S;P *|->ty _t1 _t2 ~> (t1 |> g) p2 : k2[t2/a] -| O1,O2,O3

S;P *|->ty _t1 ~> t1 : PI_Spec a:rel k1.k2 -| O1
S;P,O1;rel *|->arg _t2 : k1 ~> p2;t2 -| O2
-------------------------------- :: AppSpec
S;P *|->ty _t1 @_t2 ~> t1 p2 : k2[t2/a] -| O1,O2

S;Rel(P) |->pt _s ~> s -| O1
S;P,O1 *|->ty _t : s ~> t -| O2
-------------------------------- :: Annot
S;P *|->ty (_t :: _s) ~> t : s -| O1,O2

S;P |->ty _t0 ~> t0 : k0 -| O0
S;P,O0 |->scrut _alts; k0 ~> g; D; H'; ts -| O0'
fresh au // O' = O0,O0',au:Irrel forall{}.Type{}
forall i: S;P,O';MPI D. H'{} ts;t0 |> g |->alt _alti : au_{} ~> alti -| Oi
alts' = make_exhaustive(alts; k)
------------------------------------ :: Case
S;P *|->ty case _t0 of _alts ~> case_au_{} (t0 |> g) of alts' : au_{} -| O',Os

S;P |->q _qvar ~> a : k1; vis -| O1
S;P,O1,a:Rel k1 *|->ty _t ~> t : k2 -| O2
O2 +> a:Rel k1 ~> O2'; X
------------------------------------- :: Lam
S;P *|->ty \ _qvar . _t ~> \ a :Rel k1. (t[X]) : UPI_vis a:Rel k1. (k2[X]) -| O1,O2'

S;P |->q _qvar ~> a : k1; vis -| O1
S;P,O1,a:Irrel k1 *|->ty _t ~> t : k2 -| O2
O2 +> a:Irrel k1 ~> O2';X
------------------------------------- :: LamIrrel
S;P *|->ty /\ _qvar . _t ~> \ a :Irrel k1. (t[X]) : UPI_vis a:Rel k1. (k2[X]) -| O1,O2'

S;P |->ty _t1 : Type{} ~> t1 -| O1
S;P |->ty _t2 : Type{} ~> t2 -| O2
a # t2
-------------------------------- :: Arrow
S;P *|->ty _t1 -> _t2 ~> UPI_Req a :Rel t1. t2 : Type{} -| O1,O2

S;P |->ty _t1 : Type{} ~> t1 -| O1
S;P |->ty _t2 : Type{} ~> t2 -| O2
a # t2
------------------------------- :: MArrow
S;P *|->ty _t1 '-> _t2 ~> MPI_Req a :Rel t1. t2 : Type{} -| O1,O2

S;P |->ty _t ~> t : k -| O1
|->fun k;Rel ~> g; UPI; a; Rel; k1; k2 -| O2
S;Rel(P,O1,O2) |=ty k2 : Type{}
fresh cu // O = O1,O2,cu : forall{}. k2 [Type{}]~[Type{}] k1
--------------------------------- :: Fix
S;P *|->ty fix _t ~> fix (t |> (g ;; UPI a:Rel <k1>. cu_{})) : k1 -| O

S;P *|->ty _t1 ~> t1 : k1 -| O
S;P,O,x:Rel k1 *|->ty _t2 ~> t2 : k2 -| O2
O2 +> x:Rel k1 ~> O2';X
-------------------------------- :: Let
S;P *|->ty let x := _t1 in _t2 ~> (\ x:Rel k1. (t2[X])) t1 : k2[X][t1/x] -| O,O2'

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Checking  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% precondition: k has no Inf/Spec binders at the top, and no Inf binders
% to the right of arrows
defn
S ; P |->ty _t : k ~> t -| O :: :: ITyDown :: 'TyC_'
  {{ com Check against a type with no invisible binders. }}
by

S;P |->ty _t0 ~> t0 : k0 -| O0
S;P,O0 |->scrut _alts; k0 ~> g; D; H'; ts -| O0'
O' = O0, O0'
forall i: S;P,O';MPI D. H'{} ts; t0 |> g |->altc _alti : k ~> alti -| Oi
alts' = make_exhaustive(alts; k)
---------------------------------- :: Case
S;P |->ty case _t0 of _alts : k ~> case_k (t0 |> g) of alts' -| O', Os

|->fun k;Rel ~> g; UPI; a; Rel; k1; k2 -| O0
a /# k2
S;Rel(P) |->pt _s ~> k1' -| O1
O = O0,O1,cu:forall{}.k1 [Type{}]~[Type{}] k1'
S;P,O,b:Rel k1' *|->ty _t : k2[b |> sym cu_{}/a] ~> t -| O2
O2 +> b:Rel k1' ~> O2';X
h = k2[(a |> cu_{}) |> sym cu_{}/a] ~={<Type{}>} k2
t0 = (\a:Rel k1. (t[X][a |> cu_{}/b] |> h)) |> sym g
---------------------------------- :: LamDep
S;P |->ty \ (a :: _s). _t : k ~> t0 -| O,O2'

|->fun k;Rel ~> g; UPI; a; Rel; k1; k2 -| O0
S;P |->aq _aqvar : k1 ~> b:k1'; x.t1 -| O1
S;P,O0,O1,b:Rel k1' *|->ty _t : k2 ~> t -| O2
O2 +> b:Rel k1' ~> O2';X
---------------------------------- :: Lam
S;P |->ty \ _aqvar . _t : k ~> (\ a:Rel k1. t[X][t1[a/x]/b]) |> sym g -| O0,O1,O2'

|->fun k; Irrel ~> g; UPI; a; Irrel; k1; k2 -| O0
a /# k2
S;Rel(P) |->pt _s ~> k1' -| O1
O = O0,O1,cu:forall{}.k1 [Type{}]~[Type{}] k1'
S;P,O,b:Irrel k1' *|->ty _t : k2[b |> sym cu_{}/a] ~> t -| O2
O2 +> b:Irrel k1' ~> O2';X
h = k2[(a |> cu_{}) |> sym cu_{}/a] ~={<Type{}>} k2
t0 = (\a:Irrel k1. (t[X][a |> cu_{}/b] |> h)) |> sym g
---------------------------------- :: LamIrrelDep
S;P |->ty /\ (a :: _s). _t : k ~> t0 -| O,O2'

|->fun k; Irrel ~> g; UPI; a; Irrel; k1; k2 -| O0
S;P |->aq _aqvar : k1 ~> b : k1' ; x.t1 -| O1
S;P,O0,O1,b:Irrel k1' *|->ty _t : k2 ~> t -| O2
O2 +> b:Irrel k1' ~> O2';X
t0 = (\ a:Irrel k1. t[X][t1[a/x]/b]) |> sym g
---------------------------------- :: LamIrrel
S;P |->ty /\ _aqvar . _t : k ~> t0 -| O0,O1,O2'

S;P |->ty _t : UPI_Req a:Rel k.k ~> t -| O
------------------------------- :: Fix
S;P |->ty fix _t : k ~> fix t -| O

% NB: This does generalization
S;P *|->ty _t ~> t : k1 -| O
S;P |->solv O ~> D; Z
t' = \ D. t[Z]
k1' = UPI_Inf D. k1[Z]
k1' <= k2 ~> t2 -| O2
---------------------------- :: Infer
S;P |->ty _t : k2 ~> t2 t' -| O2

% precondition: k has no UPI Inf binders at top or to the right of any
% arrow
defn
S ; P *|->ty _t : k ~> t -| O :: :: ITyDownS :: 'TyC_'
  {{ com Check against a type that may have specified binders. }}
by

a /# k2
S;Rel(P) |->pt _s ~> k1' -| O1
O = O1,cu:forall{}.k1 [Type{}]~[Type{}] k1'
S;P,O,b:Rel k1' *|->ty _t : k2[b |> sym cu_{}/a] ~> t -| O2
O2 +> b:Rel k1' ~> O2';X
h = k2[(a |> cu_{}) |> sym cu_{}/a] ~={<Type{}>} k2
t0 = \a:Rel k1. (t[X][a |> cu_{}/b] |> h)
--------------------------- :: LamInvisDep
S;P *|->ty \ @(a :: _s) . _t : UPI_Spec a :Rel k1. k2 ~> t0 -| O,O2'

S;P |->aq _aqvar : k1 ~> b : k1'; x.t1 -| O1
S;P,O1,b:Rel k1' *|->ty _t : k2 ~> t -| O2
O2 +> b:Rel k1' ~> O2'; X
t0 = \ a:Rel k1. t[X][t1[a/x]/b]
------------------------------------------------- :: LamInvis
S;P *|->ty \ @_aqvar . _t : UPI_Spec a :Rel k1.k2 ~> t0 -| O1,O2'

a /# k2
S;Rel(P) |->pt _s ~> k1' -| O1
O = O1,cu:forall{}.k1 [Type{}]~[Type{}] k1'
S;P,O,b:Irrel k1' *|->ty _t : k2[b |> sym cu_{}/a] ~> t -| O2
O2 +> b:Irrel k1' ~> O2';X
h = k2[(a |> cu_{}) |> sym cu_{}/a] ~={<Type{}>} k2
t0 = \a:Irrel k1. (t[X][a |> cu_{}/b] |> h)
--------------------------- :: LamInvisIrrelDep
S;P *|->ty /\ @(a :: _s) . _t : UPI_Spec a :Irrel k1. k2 ~> t0 -| O,O2'

S;P |->aq _aqvar : k1 ~> b : k1'; x.t1 -| O1
S;P,O1,b:Irrel k1' *|->ty _t : k2 ~> t -| O2
O2 +> b:Irrel k1' ~> O2'; X
t0 = \ a:Irrel k1. t[X][t1[a/x]/b]
------------------------------------------------- :: LamInvisIrrel
S;P *|->ty /\ @_aqvar . _t : UPI_Spec a :Irrel k1.k2 ~> t0 -| O1,O2'

S;P *|->ty _t1 ~> t1 : k1 -| O
S;P,O,x:Rel k1 *|->ty _t2 : k ~> t2 -| O2
O2 +> x:Rel k1 ~> O2';X
---------------------------------------- :: Let
S;P *|->ty let x := _t1 in _t2 : k ~> (\x:Rel k1. (t2[X])) t1 -| O,O2'

vis <= Spec
S;P,$a:rel k1 *|->ty _t : k2 ~> t -| O
O +> $a:rel k1 ~> O';X
---------------------------------------------- :: Skol
S;P *|->ty _t : UPI_vis $a:rel k1.k2 ~> \ $a:rel k1. t[X] -| O'

S;P |->ty _t : k ~> t -| O
--------------------------- :: Otherwise
S;P *|->ty _t : k ~> t -| O

defn
S ; P |->pt _s ~> t -| O :: :: ITyDownPoly :: 'PtC_'
  {{ com Check a poly-type (which always has type \keyword{Type}). }}
by

|->pi quant ~> PI; rel
S;P |->q _qvar ~> a : k; vis -| O
S;P,O,a:rel k |->pt _s ~> s -| O2
O2 +> a:rel k ~> O2'; X
----------------------------------- :: Pi
S;P |->pt forall _qvar . _s ~> PI_vis a :rel k. (s[X]) -| O,O2'

% This should be Constraint
S;P |->ty _t : Type{} ~> t -| O1
S;P,O1,$a:Rel t |->pt _s ~> s -| O2
O2 +> $a:Rel t ~> O2'; X
------------------------- :: Constrained
S;P |->pt _t => _s ~> UPI_Inf $a:Rel t. (s[X]) -| O1, O2'

S;P |->ty _t : Type{} ~> t -| O
----------------- :: Mono
S;P |->pt _t ~> t -| O

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Arguments (always checking)  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defn
S ; P ; rel *|->arg _t : k ~> p ; t -| O :: :: IArg :: 'Arg_'
  {{ com Check a function argument against its known type. }}
by

S;P *|->ty _t : k ~> t -| O
----------------------------------- :: Rel
S;P;Rel *|->arg _t : k ~> t;t -| O

S;Rel(P) *|->ty _t : k ~> t -| O
--------------------------------------- :: Irrel
S;P;Irrel *|->arg _t : k ~> {t};t -| O

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Case alternative synthesis  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defn
S ; P ; k0 ; t0 |->alt _alt : k ~> alt -| O :: :: IAlt :: 'Alt_'
  {{ com Synth.~a case alt.~against a unification variable. }}
by

S |-tc H : D1;D2;H' // D3,D4 = D2[ts/dom(D1)]
dom(D3) = xs // dom(D4) = dom(D')
match_{dom(D3)}(types(D4);types(D')) = Just theta
S;P,D3 |->ty _t : k ~> t -| O
O +> D3 ~> O'; X
D3' = D3, c : t0 [MPI D'. H'{} ts]~[MPI D4.H'{} ts] H{ts} xs
------------------------------------ :: Con
S;P;MPI D'. H'{} ts;t0 |->alt H xs -> _t : k ~> H -> \ D3' . (t[X]) -| O'

S;P |->ty _t : k ~> t -| O
--------------------------------------- :: Default
S;P;k0;t0 |->alt _ -> _t : k ~> _ -> t -| O

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Case alternative checking  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defn
S ; P ; k0 ; t0 |->altc _alt : k ~> alt -| O :: :: IAltC :: 'AltC_'
  {{ com Check a case alt.~against a known result type. }}
by

S |-tc H : D1;D2;H' // D3,D4 = D2[ts/dom(D1)]
dom(D3) = xs // dom(D4) = dom(D')
match_{dom(D3)}(types(D4);types(D')) = Just theta0
D3' = D3,c:t0 [MPI D'.H'{} ts]~[MPI D4.H'{} ts] H{ts} xs
S;P,D3' |->ty _t : k ~> t -| O
O +> D3' ~> O';X
------------------------------------ :: Con
S;P;MPI D'. H'{} ts;t0 |->altc H xs -> _t : k ~> H -> \ D3'. (t[X]) -| O'

S;P |->ty _t : k ~> t -| O
--------------------------------------- :: Default
S;P;k0;t0 |->altc _ -> _t : k ~> _ -> t -| O

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Quantifier extraction  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defn
S ; P |->q _qvar ~> a : k ; vis -| O :: :: IQVar :: 'QVar_'
  {{ com Synthesize a bound variable. }}
by

S;P |->aq _aqvar ~> a : k -| O
--------------------------- :: Req
S;P |->q _aqvar ~> a : k; Req -| O

S;P |->aq _aqvar ~> a : k -| O
----------------------------- :: Spec
S;P |->q @_aqvar ~> a : k; Spec -| O

defn
S ; P |->aq _aqvar ~> a : k -| O :: :: IAQVar :: 'AQVar_'
  {{ com Synthesize a bound variable (w/o vis.~marker). }}
by

fresh bu
------------------------------------ :: Var
S;P |->aq a ~> a : bu_{} -| bu :Irrel forall{}. Type{}

S;Rel(P) |->pt _s ~> s -| O
------------------------------------ :: Annot
S;P |->aq (a :: _s) ~> a : s -| O

defn
S ; P |->aq _aqvar : k ~> a : k' ; x . t -| O :: :: IAQVarC :: 'AQVarC_'
  {{ com Check a bound variable (w/o vis.~marker). }}
by

--------------------------------- :: Var
S;P |->aq a : k ~> a:k; x.x -| empty

S;Rel(P) |->pt _s ~> s -| O1
k <= s ~> t -| O2
------------------------------ :: Annot
S;P |->aq (a :: _s) : k ~> a:s ; x.t x -| O1,O2

defn
|->pi quant ~> PI ; rel :: :: IQuant :: 'Qu_'
  {{ com Interpret a quantifier. }}
by

------------------------- :: ForAll
|->pi forall ~> UPI ; Irrel

---------------------------- :: MForAll
|->pi 'forall ~> MPI ; Irrel

----------------------- :: Pi
|->pi pie ~> UPI ; Rel

---------------------- :: MPi
|->pi 'pie ~> MPI ; Rel

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  matchExpectedFunTy  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% precondition: k has no Inf or Spec binders
% == matchExpectedFunTy
% takes a default relevance, but outputs the actual relevance found, which
% may be different
defn
|->fun k ; rel1 ~> g ; PI ; a ; rel2 ; k1 ; k2 -| O :: :: IFun :: 'Fun_'
  {{ com Extract out the parts of a function kind. }}
by

-------------------- :: Id
|->fun PI_Req a:rel k1. k2; rel0 ~> <PI_Req a:rel k1.k2>; PI; a; rel; k1; k2 -| empty

fresh cu // fresh bu1, bu2
O = bu1:Irrel forall{}.Type{}, bu2:Irrel forall{}.Type{}, cu : forall{}. k0 [Type{}]~[Type{}] UPI_Req a:rel bu1_{}.bu2_{}
-------------------- :: Cast
|->fun k0; rel ~> cu_{}; UPI; a; rel; bu1_{}; bu2_{} -| O

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  matchExpectedTyConApp  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% precondition: k has noInf or Spec binders
defn
S ; P |->scrut _alts ; k ~> g ; D ; H ; ts -| O  :: :: IScrut :: 'Scrut_'
  {{ com Extract out the parts of a scrutinee's kind. }}
by

S;Rel(P) |=ty H{} ts : Type{}
--------------------------------------------- :: Id
S;P |->scrut _alts; MPI D. H{} ts ~> <MPI D. H{} ts>; D; H; ts -| empty

S |-tc H : as :Irrel ks; D2; H'
fresh aus // fresh cu
------------------------------ :: Cast
S;P |->scrut (H xs -> _t; _alts); k ~> cu_{}; empty; H'; aus_{} -| aus :Irrel forall{}.ks[aus_{}/as], cu : forall{}. k [Type{}]~[Type{}] H'{} aus_{}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  topInstantiate  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% postcondition: k has no binders with a visibility at or less than the one
% requested
% if t :: k, then t ps :: k'
defn
|->inst _ vis k ~> ps ; k' -| O :: :: IInst :: 'Inst_'
  {{ tex [[|->inst]]^{\hspace{-1.4ex}\raisemath{.1ex}{[[vis]]} } [[k]] [[~>]] [[ps]]; [[k']] [[-|]] [[O]] }}
  {{ com Instantiate so that a type's first binder is more visible than [[vis]]. }}
by

fresh au  //  vis2 <= vis1
|->inst_vis1 k2[au_{}/a] ~> ps; k2' -| O
------------------------------- :: Rel
|->inst_vis1 PI_vis2 a:Rel k1. k2 ~> au_{}, ps; k2' -| au :Rel forall{}. k1, O

fresh au  // vis2 <= vis1
|->inst_vis1 k2[au_{}/a] ~> ps; k2' -| O
------------------------------- :: Irrel
|->inst_vis1 PI_vis2 a:Rel k1. k2 ~> {au_{} }, ps; k2' -| au :Irrel forall{}. k1, O

fresh cu
|->inst_vis1 k2[cu_{}/c] ~> ps; k2' -| O
------------------------------- :: Co
|->inst_vis1 PI_Inf c:phi.k ~> cu_{}, ps; k2' -| cu : forall{}. phi, O

-------------------------------- :: Done
|->inst_vis1 k ~> empty; k -| empty

defn
vis1 <= vis2 :: :: VisLT :: 'Vis_'
  {{ com ``Less-visible-than`` relation }}
by

---------- :: Refl
vis <= vis

vis1 <= vis2 // vis2 <= vis3
---------------------------- :: Trans
vis1 <= vis3

----------- :: InfSpec
Inf <= Spec

----------- :: SpecReq
Spec <= Req

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Constraint solving  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% As in OutsideIn
defn
S ; P |->solv O ~> D ; Z :: :: ISolv :: 'Solv_'
  {{ com Constraint solver interface }}
by

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  tcSubType  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% t :: (UPI D. k') -> k
defn
|->pre k ~> D ; k' ; t :: :: IPrenex :: 'Prenex_'
  {{ com Convert a kind into prenex form. }}
by

vis <= Spec
|->pre k2 ~> D ; k2' ; t
----------------------------- :: Invis
|->pre UPI_vis d.k2 ~> d,D; k2'; \ (x :Rel UPI d,D. k2'), d. t (x dom(d))
% where t' :: (UPI d,D. k2') -> UPI d.k2

|->pre k2 ~> D; k2'; t
t0 = \ (x :Rel UPI D,d.k2'), d. t (\ D. x dom(D) dom(d))
---------------------------- :: Vis
|->pre UPI_Req d.k2 ~> D; UPI_Req d.k2'; t0
% where t' :: (UPI D, d.k2') -> UPI d.k2

--------------------------- :: NoPi
|->pre k ~> empty; k; \x :Rel k. x

% precondition: no invisible binders on either k1 or k2
defn
k1 *<= k2 ~> t -| O :: :: ISub2 :: 'Sub_'
  {{ com ``[[k1]] subsumes [[k2]].'' ([[k2]] is in prenex form) }}
by

k3 <= k1 ~> t1 -| O1  //   k2[t1 b/a] <= k4 ~> t2 -| O2
O2 +> b:Rel k3 ~> O2'; X
t0 = \ x :Rel (PI a:Rel k1.k2), b:Rel k3. t2[X] (x (t1 b))
-------------------------------------------- :: FunRel
PI_Req a:Rel k1. k2 *<= UPI_Req b:Rel k3.k4 ~> t0 -| O1, O2'

k3 <= k1 ~> t1 -| O1  //   k2[t1 b/a] <= k4 ~> t2 -| O2
O2 +> b:Rel k3 ~> O2'; X
t0 = \ x :Rel (PI a:Irrel k1.k2), b:Rel k3. t2[X] (x {t1 b})
-------------------------------------------- :: FunIrrelRel
PI_Req a:Irrel k1. k2 *<= UPI_Req b:Rel k3.k4 ~> t0 -| O1, O2'

k3 <= k1 ~> t1 -| O1  //   k2[t1 b/a] <= k4 ~> t2 -| O2
O2 +> b:Irrel k3 ~> O2'; X
t0 = \ x :Rel (PI a:Irrel k1.k2), b:Irrel k3. t2[X] (x {t1 b})
-------------------------------------------- :: FunIrrel
PI_Req a:Irrel k1. k2 *<= UPI_Req b:Irrel k3.k4 ~> t0 -| O1,O2'

fresh cu
----------------------- :: Unify
t1 *<= t2 ~> \ x:Rel t1. (x |> cu_{}) -| cu : forall{}. t1 [Type{}]~[Type{}] t2

defn
k1 <= k2 ~> t -| O :: :: ISub :: 'Sub_'
  {{ com ``[[k1]] subsumes [[k2]].'' }}
by

|->pre k2 ~> D; k2'; t1
|->inst_Spec k1 ~> ps; k1' -| O1
k1' *<= k2' ~> t2 -| O2
O1,O2 +> D ~> O'; X
------------- :: DeepSkol
k1 <= k2 ~> \ x:Rel (k1). t1 (\ D. t2[X] (x ps[X])) -| O'

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Generalization  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defn
O +> D ~> O' ; X :: :: IGen :: 'Gen_'
  {{ com Generalize [[O]] over [[D]]. }}
by

--------------------------- :: Nil
empty +> D ~> empty ; empty


X0 = au |-> dom(D) // O[X0] +> D ~> O'; X
----------------------------- :: TyVar
au :rel forall D'. k, O +> D ~> au :rel forall D,D'. k, O'; X0, X

X0 = cu |-> dom(D) // O[X0] +> D ~> O'; X
----------------------------- :: CoVar
cu : forall D'. phi, O +> D ~> cu : forall D,D'. phi, O'; X0, X

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Programs  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defn
S ; G |->decl _decl ~> x : k := t :: :: IDecl :: 'Decl_'
  {{ com Check a Haskell declaration. }}
by

S;G |->ty _t ~> t : k -| O
S;G |->solv O ~> D; Z
t' = \ D . (t[Z])  //   k' = UPI_Inf D. (k[Z])
------------------------- :: Synthesize
S;G |->decl x := _t ~> x : k' := t'

S;G |->pt _s ~> s -| O1
S;Rel(G) |->solv Rel(O1) ~> D1;Z1
s' = UPI_Inf D1. (s[Z1])
S;G *|->ty _t : s' ~> t -| O2
S;G |->solv O2 ~> empty;Z2
t' = t[Z2]
------------------------------ :: Check
S;G |->decl x :: _s := _t ~> x : s' := t'

defn
S ; G |->prog _prog ~> G' ; theta :: :: IProg :: 'Prog_'
  {{ com Check a Haskell program. }}
by

--------------------------------- :: Nil
S;G |->prog empty ~> empty; empty

S;G |->decl _decl ~> x : k := t
S;G,x :Rel k, c : x [k]~[k] t |->prog _prog ~> G'; theta
---------------------------------- :: Decl
S;G |->prog _decl; _prog ~> x :Rel k, c : x [k]~[k] t, G'; (t/x,<t>/c) o theta

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Contexts  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
JUnzonked :: '' ::=

defn
S ; P |=ty t : k :: :: UTy :: 'Ty_'
  {{ com Extra rule to support unification variables in types }}
by

au :Rel forall D.k \in P  // S |=ctx P
S;P |=vec ps : D
--------------- :: UVar
S;P |=ty au_ps : k[ps/dom(D)]

defn
S ; P |=co g : phi :: :: UCo :: 'Co_'
  {{ com Extra rule to support unification variables in coercions }}
by

cu : forall D.phi \in P  // S |=ctx P
S;P |=vec ps : D
----------------- :: UVar
S;P |=co cu_ps : phi[ps/dom(D)]

defn
S |=ctx P :: :: UCtx :: 'Ctx_'
  {{ tex [[S]] [[|=ctx]] [[P]] \ok }}
  {{ com Extra rules to support binding unification variables }}
by

S;Rel(P,D) |=ty k : Type{}  // S |=ctx P
------------------ :: UTyVar
S |=ctx P, au :rel forall D. k

S;Rel(P,D) |=prop phi  // S |=ctx P
-------------------- :: UCoVar
S |=ctx P, cu : forall D. phi

defn
S ; G |-subst theta : D  :: :: Subst :: 'Subst_'
  {{ com ``[[theta]] substitutes the variables in [[D]] away.'' }}
by

fv(theta) \subseteq {dom(G)}
--------------------- :: Nil
S;G |-subst theta : empty

S;G |-ty a[theta] : k
S;G |-subst theta : D[theta \inter a]
-------------------------- :: TyRel
S;G |-subst theta : a:Rel k, D

S;Rel(G) |-ty a[theta] : k
S;G |-subst theta : D[theta \inter a]
-------------------------- :: TyIrrel
S;G |-subst theta : a:Irrel k, D

S;Rel(G) |-co c[theta] : phi
S;G |-subst theta : D[theta \inter c]
------------------------ :: Co
S;G |-subst theta : c:phi, D

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Zonking  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defn
S ; P |=z Z : O :: :: Zonk :: 'Zonk_'
by

---------------------- :: Nil
S;P |=z empty : empty

S;P,D |=ty t : k
S;P |=z Z : O[forall dom(D). t/au]
------------------------- :: TyVarRel
S;P |=z forall dom(D). t/au, Z : au:Rel forall D.k, O

S;Rel(P,D) |=ty t : k
S;P |=z Z : O[forall dom(D). t/au]
------------------------- :: TyVarIrrel
S;P |=z forall dom(D). t/au, Z : au:Irrel forall D.k, O

S;P,D |=co g : phi
S;P |=z Z : O[forall dom(D). g/cu]
--------------------------- :: CoVar
S;P |=z forall dom(D). g/cu, Z : cu:forall D.phi, O


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  tcSubType (simplified)  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
Simplified :: '' ::=

%% t :: (UPI D. k') -> k
defn
|->pre k ~> k' :: :: IPrenexSimp :: 'Prenex_'
  {{ com Convert a kind into prenex form. }}
by

vis <= Spec
|->pre k2 ~> UPI D. k2'
----------------------------- :: Invis
|->pre UPI_vis d.k2 ~> UPI d,D. k2'

|->pre k2 ~> UPI D. k2'
---------------------------- :: Vis
|->pre UPI_Req d.k2 ~> UPI D. UPI_Req d.k2'

--------------------------- :: NoPi
|->pre k ~> k

% precondition: no invisible binders on either k1 or k2
defn
k1 *<= k2 :: :: ISub2Simp :: 'Sub_'
  {{ com ``[[k1]] subsumes [[k2]].'' ([[k2]] is in prenex form) }}
by

not (rel1 = Rel /\ rel2 = Irrel)
k3 <= k1 ~> t  //   k2[t1 b/a] <= k4
-------------------------------------------- :: Fun
PI_Req a:rel1 k1. k2 *<= UPI_Req b:rel2 k3.k4

fresh cu : forall{}. t1 [Type{}]~[Type{}] t2
----------------------- :: Unify
t1 *<= t2

defn
k1 <= k2 :: :: ISubSimp :: 'Sub_'
  {{ com ``[[k1]] subsumes [[k2]].'' }}
by

|->inst_Spec k1 ~> k1'  // |->pre k2 ~> UPI D. k2'
k1' *<= k2'
------------- :: DeepSkol
k1 <= k2

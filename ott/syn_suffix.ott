%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Utility  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

grammar

rewrite_rule :: 'Rewrite_' ::=
| ps1 eq ps2                         ::   :: ts_rewrite
% this next one is needed because of Type_Apps <= Arg_Ty
| t1 eq t2                           ::   :: t_rewrite
| w1 eq w2                           ::   :: w_rewrite
| phi1 eq phi2                       ::   :: phi_rewrite
| P1 eq P2                           ::   :: P_rewrite
| alts1 eq alts2                     ::   :: alts_rewrite
| fvset1 eq fvset2                   ::   :: fvset_rewrite
| rel1 eq rel2                       ::   :: rel_rewrite
| H1 eq H2                           ::   :: H_rewrite
| S1 eq S2                           ::   :: S_rewrite
| I1 eq I2                           ::   :: I_rewrite
| unif_result1 eq unif_result2       ::   :: match_rewrite
| theta1 eq theta2                   ::   :: theta_rewrite
| PI1 eq PI2                         ::   :: PI_rewrite
| ealts1 eq ealts2                   ::   :: ealts_rewrite
| e1 eq e2                           ::   :: e_rewrite
| calt1 eq calt2                     ::   :: calt_rewrite
| Z1 eq Z2                           ::   :: Z_rewrite
| X1 eq X2                           ::   :: X_rewrite
| zus1 eq zus2                       ::   :: zus_rewrite
| _aqvar1 eq _aqvar2                 ::   :: aqvar_rewrite
| _t1 eq _t2                         ::   :: _t_rewrite

util :: 'Util_' ::=
| ||.||                              ::   :: terase_op
  {{ tex \llfloor {\cdot} \rrfloor }}
| [ X ]                              ::   :: gen_op

fact :: 'Fact_' ::=
  | alts1 ~> alts2                     ::   :: alts_red
  | ps ~> ps' <~ ps''                  ::   :: diamond
  | ps ~>* ps'                         ::   :: many_red_star
  | d1 ~>* d2                          ::   :: many_red_star_d
  | ps ~>* ps' *<~ ps''                ::   :: confluence
  | d1 ~> d3 <~ d2                     ::   :: d_diamond
  | S ; G |-co* g : phi                ::   :: co_star
  | apart ( t1 ; t2 )                  ::   :: apartness
    {{ tex [[apart]]([[t1]];[[t2]]) }}
  | zmap \in Z                         ::   :: Z_in
  | zu \in V                           ::   :: in_fvset_u
  | z \in V                            ::   :: in_fvset
  | S ; G |- J                         ::   :: pico_judg
  | xmap \in X                         ::   :: in_xmap
  | a # O                              ::   :: not_in_O
  | zs1 \subseteq zs2                  ::   :: zs_subset

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Terminals  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

grammar

terminals :: 'terminals_' ::=
| \                                    ::   :: Lam     {{ tex \lambda }}
| |->                                  ::   :: InfArr  {{ tex \varrow }}
| ->                                   ::   :: Arrow   {{ tex \to }}
| ~>                                   ::   :: red     {{ tex \rightsquigarrow }}
| ~>*                                  ::   :: redstar {{ tex \rightsquigarrow^* }}
| <~                                   ::   :: der     {{ tex \leftsquigarrow }}
| *<~                                  ::   :: ratsder {{ tex \mathrel{ {}^*{\leftsquigarrow} } }}
| ~~>                                  ::   :: pushto  {{ tex \longrightsquigarrow }}
| '//'                                 ::   :: sep     {{ tex \quad }}
| MPI                                  ::   :: MPi     {{ tex \mpi }}
| UPI                                  ::   :: UPi     {{ tex \upi }}
| MUPI                                 ::   :: MUPi    {{ tex \mupi }}
| |>                                   ::   :: Cast    {{ tex \rhd }}
| ||>                                  ::   :: RCast   {{ tex \unrhd }}
| <||                                  ::   :: LCast   {{ tex \unlhd }}
| |-                                   ::   :: Entails {{ tex \vdash }}
| -|                                   ::   :: Output  {{ tex \dashv }}
| empty                                ::   :: Empty   {{ tex \varnothing }}
| \in                                  ::   :: in      {{ tex \in }}
| \notin                               ::   :: notin   {{ tex \not\in }}
| !!!                                  ::   :: internal {{ tex }}
| ~                                    ::   :: twid    {{ tex \sim }}
| #                                    ::   :: fresh   {{ tex \mathrel{\#} }}
| ;;                                   ::   :: semi    {{ tex \fatsemi }}
| forall                               ::   :: forall  {{ tex \forall }}
| blank                                ::   :: blank   {{ tex \! }}
| fv                                   ::   :: fv      {{ tex \mathsf{fv} }}
| dom                                  ::   :: dom     {{ tex \mathsf{dom} }}
| prefix                               ::   :: prefix  {{ tex \mathsf{prefix} }}
| nth                                  ::   :: nth     {{ tex \ottkw{nth} }}
| argk                                 ::   :: argk    {{ tex \ottkw{argk} }}
| res                                  ::   :: res     {{ tex \ottkw{res} }}
| -->                                  ::   :: step    {{ tex \longrightarrow }}
| :=                                   ::   :: assign  {{ tex \mathrel{ {:}{=} } }}
| \subseteq                            ::   :: subset  {{ tex \subseteq }}
| \union                               ::   :: union   {{ tex \cup }}
| \inter                               ::   :: inter   {{ tex \cap }}
| \emptyset                            ::   :: emptyset {{ tex \emptyset }}
| !                                    ::   :: cons    {{ tex \propto }}
| !!                                   ::   :: lcons   {{ tex \mathrel{\ltimes} }}
| '>>'                                 ::   :: pushin  {{ tex \succ }}
| o                                    ::   :: bullet  {{ tex {\bullet} }}
| coercionKind                         ::   :: coKind  {{ tex \mathsf{coercion\_kind} }}
| typeKind                             ::   :: tyKind  {{ tex \mathsf{type\_kind} }}
| promote                              ::   :: promote {{ tex \mathsf{promote} }}
| nokind                               ::   :: nokind  {{ tex \mathsf{nokind} }}
| mk_nth                               ::   :: mk_nth  {{ tex \mathsf{mk\_nth} }}
| cast_kpush_arg                       ::   :: cast_arg {{ tex \mathsf{cast\_kpush\_arg} }}
| @                                    ::   :: inst    {{ tex \at }}
| @\                                   ::   :: instlam {{ tex \at }}
| Rel                                  ::   :: Rel     {{ tex \mathsf{Rel} }}
| Irrel                                ::   :: Irrel   {{ tex \mathsf{Irrel} }}
| Req                                  ::   :: Req     {{ tex \mathsf{Req} }}
| Spec                                  ::   :: Spec     {{ tex \mathsf{Spec} }}
| Inf                                ::   :: Inf   {{ tex \mathsf{Inf} }}
| build_kpush_co                       ::   :: build   {{ tex \mathsf{build\_kpush\_co} }}
| ~#                                   ::   :: almost  {{ tex \mathrel{\tilde{\#} } }}
| Nothing                              ::   :: Nothing {{ tex \mathsf{Nothing} }}
| Just                                 ::   :: Just    {{ tex \mathsf{Just} }}
| match                                ::   :: match   {{ tex \mathsf{match} }}
| types                                ::   :: types   {{ tex \mathsf{types} }}
| ~=                                   ::   :: approx  {{ tex \approx }}
| <=                                   ::   :: sub     {{ tex \le }}
| *<=                                  ::   :: substar {{ tex \le^* }}
| equals                               ::   :: equals  {{ tex \ottkw{equals} }}
| axEquals                             ::   :: axEq    {{ tex \ottkw{axEquals} }}
| axApart                              ::   :: axApart {{ tex \ottkw{axApart} }}
| apart                                ::   :: apart   {{ tex \mathsf{apart} }}
| arrow                                ::   :: arrow   {{ tex \ottkw{arrow} }}
| '::'                                 ::   :: annot   {{ tex \mathrel{ {:}{:} } }}
| =>                                   ::   :: fatarr  {{ tex \Rightarrow }}
| pie                                  ::   :: hpi     {{ tex \Pi }}
| '->                                  ::   :: Tarrow  {{ tex \mathrel{\ottsym{'}{\to} } }}
| top                                  ::   :: top     {{ tex \top }}
| /\                                   ::   :: LAM     {{ tex \Lambda }}
| fresh                                ::   :: freshu  {{ tex \mathsf{fresh} }}
| +>                                   ::   :: shove   {{ tex \hookrightarrow }}
| make_exhaustive                      ::   :: makeExh {{ tex \mathsf{make\_exhaustive} }}
| encode                               ::   :: encode  {{ tex \mathsf{encode} }}
| fuv                                  ::   :: fuv     {{ tex \mathsf{fuv} }}
| empt                                 ::   :: empt    {{ tex \epsilon }}

| |-ty                                 ::   :: Ty_ent  {{ tex \vdashy{ty} }}
| |-co                                 ::   :: Co_ent  {{ tex \vdashy{co} }}
| |-ctx                                ::   :: Ctx_ent {{ tex \vdashy{ctx} }}
| |-tc                                 ::   :: Tc_ent  {{ tex \vdashy{tc} }}
| |-sig                                ::   :: Sig_ent {{ tex \vdashy{sig} }}
| |-alt                                ::   :: Alt_ent {{ tex \vdashy{alt} }}
| |-vec                                ::   :: Vec_ent {{ tex \vdashy{vec} }}
| |-cev                                ::   :: Cev_ent {{ tex \vdashy{cev} }}
| |-prop                               ::   :: Prop_ent {{ tex \vdashy{prop} }}
| |-subst                               ::   :: Subst_ent {{ tex \vdashy{subst} }}
| |-s                                  ::   :: S_ent   {{ tex \vdashy{s} }}
| |-r                                  ::   :: R_ent   {{ tex \vdashy{r} }}
| |-lc                                 ::   :: Lc_ent  {{ tex \vdashy{lc} }}
| |-co*                                ::   :: CoS_ent {{ tex \vdashy{co}^{\!\!\!\raisebox{.2ex}{$\scriptstyle *$} } }}
| |-ty*                                ::   :: TyS_ent {{ tex \vdashy{ty}^{\!\!\!\raisebox{.2ex}{$\scriptstyle *$} } }}

| |=                                   ::   :: vDash   {{ tex \vDash }}
| |=ty                                 ::   :: Ty_int  {{ tex \vDashy{ty} }}
| |=co                                 ::   :: Co_int  {{ tex \vDashy{co} }}
| |=ctx                                ::   :: Ctx_int {{ tex \vDashy{ctx} }}
| |=tc                                 ::   :: Tc_int  {{ tex \vDashy{tc} }}
| |=sig                                ::   :: Sig_int {{ tex \vDashy{sig} }}
| |=alt                                ::   :: Alt_int {{ tex \vDashy{alt} }}
| |=vec                                ::   :: Vec_int {{ tex \vDashy{vec} }}
| |=cev                                ::   :: Cev_int {{ tex \vDashy{cev} }}
| |=prop                               ::   :: Prop_int {{ tex \vDashy{prop} }}
| |=s                                  ::   :: S_int   {{ tex \vDashy{s} }}
| |=z                                  ::   :: Z_int   {{ tex \vDashy{z} }}
| |=lc                                 ::   :: Lc_int  {{ tex \vDashy{lc} }}
| |=subst                                  ::   :: SUBST_int   {{ tex \vDashy{subst} }}

| |->ty                                ::   :: Ty_inf  {{ tex \varrowy{ty} }}
| *|->ty                               ::   :: TyS_inf {{ tex \varrowys{ty} }}
| *|->arg                              ::   :: ArgS_inf {{ tex \varrowys{arg} }}
| |->alt                                ::   :: Alt_inf  {{ tex \varrowy{alt} }}
| |->altc                                ::   :: Altc_inf  {{ tex \varrowy{altc} }}
| |->fun                                ::   :: Fun_inf  {{ tex \varrowy{fun} }}
| |->inst                                ::   :: Inst_inf  {{ tex \varrowy{inst} }}
| |->pt                                ::   :: Pt_inf  {{ tex \varrowy{pt} }}
| |->scrut                                ::   :: Scrut_inf  {{ tex \varrowy{scrut} }}
| |->q                                ::   :: Q_inf  {{ tex \varrowy{q} }}
| |->aq                                ::   :: Aq_inf  {{ tex \varrowy{aq} }}
| |->solv                                ::   :: SOLV_inf  {{ tex \varrowy{solv} }}
| |->pi                                ::   :: Pi_inf  {{ tex \varrowy{pi} }}
| |->pre                                ::   :: Pre_inf  {{ tex \varrowy{pre} }}
| |->decl                                ::   :: Decl_inf  {{ tex \varrowy{decl} }}
| |->prog                                ::   :: Prog_inf  {{ tex \varrowy{prog} }}

| oi|->                                  ::   :: oi_inf    {{ tex \varrowyy{}{\textsc{oi} } }}
| oi|->solv                              ::   :: oi_solv_inf  {{ tex \varrowyy{solv}{\textsc{oi} } }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Formulae  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

formula :: 'formula_' ::=
  | judgement                          ::   :: judgement
  | </ formulai // '//' // i />        ::   :: dots
  | forall i : formula                 ::   :: forall
    {{ tex [[forall]] [[i]],\; [[formula]] }}
  | rewrite_rule                       ::   :: rewrite
  | I1 = I2 = I3                       ::   :: three_way_I_eq
  | bnd \in P                          ::   :: ctx_in
  | unif_bnd \in P                     ::   :: unif_ctx_in
  | sig_bnd \in S                      ::   :: sig_in
  | alt \in alts                       ::   :: alt_in
  | p \in ps                           ::   :: p_in
  | T # S                              ::   :: T_fresh
  | K # S                              ::   :: K_fresh
  | a # G                              ::   :: a_fresh
  | c # G                              ::   :: c_fresh
  | zs # ps                            ::   :: a_not_free
  | zs /# ps                           ::   :: a_appears
    {{ tex \neg ([[zs]] \mathrel{\#} [[ps]]) }}
  | alts are exhaustive for H ( wrt S ) ::   :: exhaustive
    {{ tex [[alts]] \text{ are exhaustive and distinct for } [[H]] \text{, (w.r.t.~} [[S]] \text{)} }}
  | ps ~> ps'                          ::   :: many_red
  | c ~# g                             ::   :: almost_free
  | no alternative in alts matches H   ::   :: no_matches
    {{ tex \text{no alternative in } [[alts]] \text{ matches } [[H]] }}
  | no alternative in ealts matches H  ::   :: e_no_matches
    {{ tex \text{no alternative in } [[ealts]] \text{ matches } [[H]] }}
  | '{{' Blockname user_syntax '}}'              ::   :: exec_code
    {{ tex [[user_syntax]] }}
    {{ coq \begin{code}
$( [p| [[Blockname]] |] ) = [[user_syntax]] \end{code} }}
  | t is not a value                   ::   :: not_value
    {{ tex [[t]] \text{ is not a value} }}
  | fresh aus                          ::   :: fresh
  | fresh cu                           ::   :: fresh_cu
  | S |-> _alts match a scrutinee from the type H'  ::   :: match_scrut
    {{ tex [[S]] [[|->]] [[_alts]] \text{ match a scrutinee from the type } [[H']] }}
  | P contains no givens               ::   :: no_givens
    {{ tex [[P]] \text{ contains no givens} }}
  | ijudg                              ::   :: ijudg
  | subst \in substs                   ::   :: subst_in
  | P1 \subseteq P2                    ::   :: G_subseq
  | z \notin fvset                     ::   :: var_notin_set
  | fvset1 \subseteq fvset2            ::   :: subset
  | fresh O                            ::   :: simplified_constraints
  | |->inst _ vis k1 ~> k2             ::   :: simplified_inst
    {{ tex \varrowyy{inst}{[[vis]]} [[k1]] [[~>]] [[k2]] }}
  | not ( formula )                    ::   :: negation
    {{ tex \neg ( [[formula]] ) }}
  | formula1 /\ formula2               ::   :: conjunction
    {{ tex [[formula1]] \wedge [[formula2]] }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Parsing  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

parsing

Type_Pis <= Type_Apps
% Type_Arrow right Type_Arrow
% Type_Pis right Type_Arrow
ctx_Many <= ctx_Subst
% ctx_Telescope <= ctx_Subst
% ctx_Many <= ctx_Telescope

vars_One <= ctx_ZipKs

ctx_One <= ctx_Subst
types_One <= types_Subst

types_One <= formula_many_red
alts_One <= Fact_alts_red

args_One <= Substs_Telescope

types_One <= args_Types
cos_One <= args_Cos
cos_One <= coargs_Coercions

args_Many <= Rewrite_ts_rewrite

Phi_IEquality <= Phi_Subst

Arg_Ty <= Arg_Erased
Arg_Co <= Arg_Erased
args_One <= args_Erased

Type_Pis <= Type_Subst

Type_erase_type <= Type_erase_type
args_Types <= args_Erased
types_Erased <= types_Erased
types_One <= types_Erased

Var_Blank <= Type_Var
Var_Blank <= E_Var

% These are useful optimizations
mixedVars_One <= args_Vars
vars_One <= mixedVars_Tys
Type_Apps <= Arg_Ty
Type_Apps <= Type_Apps
Type_Lams <= Arg_Ty
types_One <= user_syntax__typs
args_One <= user_syntax__args
Arg_Ty <= user_syntax__arg

% This is an optimization, preferring ADT_Lit over DataCon_Lit
% when both are possible.
DataCon_Lit <= TyCon_DataCon

Co_Let <= Co_Insts
Co_LetBreak <= Co_Insts

% ctx_Many <= IUnifCtx_TelBind

Alt_Alt <= Alt_Subst
Type_Lams <= Type_Subst

args_One <= args_Subst

UnifVars_One <= IUnifCtx_KsBind
Type_Lams <= Type_Apps

IUnifCtx_One <= IUnifCtx_Subst
IUnifCtx_KsBind <= IUnifCtx_Subst

ctx_Many <= ctx_Zonk
ctx_One <= ctx_Zonk
types_One <= types_Zonk
Phi_IEquality <= Phi_Zonk
Type_Pis <= Type_Zonk
Alt_Alt <= Alt_Zonk
Type_Lams <= Type_Zonk
args_One <= args_Zonk
IUnifCtx_One <= IUnifCtx_Zonk
IUnifCtx_KsBind <= IUnifCtx_Zonk

Substs_Zonk <= Type_UnifVar
Substs_Zonk <= Co_UnifVar
args_Gen <= Type_UnifVar
args_Gen <= Co_UnifVar

ctx_Many <= ctx_Gen
ctx_One <= ctx_Gen
types_One <= types_Gen
Phi_IEquality <= Phi_Gen
Type_Pis <= Type_Gen
Alt_Alt <= Alt_Gen
Type_Lams <= Type_Gen
args_One <= args_Gen
IUnifCtx_One <= IUnifCtx_Gen
IUnifCtx_KsBind <= IUnifCtx_Gen

\chapter{Proofs about type inference}
\label{app:inference}

\rae{Reorganize sections.}

Throughout this appendix, I use a convention whereby
in any case where the rule under consideration is printed, any metavariable
names in the rule shadow any metavariable names in the lemma or
theorem statement.

\begin{definition}[Judgments with unification variables]
I write judgments with a new turnstile $\vDash$; these judgments are
identical to the corresponding judgments written with a $\vdash$ except
with the new rules as given in \pref{app:inference-judgments}.
All lemmas proved over the old judgments hold over the new ones,
noting that the new \rul{UVar} rules are unaffected by context extension.
\end{definition}

\begin{definition}[Generalized judgments]
I sometimes write $[[S;P |= J]]$,
where $[[J]]$ stands for a \emph{judgment}, one of the
judgments headed by $[[|=ty]]$, $[[|=co]]$, $[[|=prop]]$,
$[[|=alt]]$, $[[|=vec]]$, or $[[|=ctx]]$, or $[[|=s]]$.
Similarly, I write $[[J[theta] ]]$ to denote substitution in the
component parts of the judgment $[[J]]$.
\end{definition}

\begin{remark}
According to the above definition, when dealing with a statement like
$[[S;P |= J]]$, the following lemmas are applicable:
\pref{lem:increasing-rel} (increasing relevance),
\pref{lem:weakening} (weakening),
\pref{lem:ty-subst} (type substitution), and \pref{lem:co-subst}
(coercion substitution).
\end{remark}

\begin{lemma}[Strengthening]
\label{lem:istrengthening}
Assume $[[P' \subseteq P]]$, the
variables $[[{dom(G)} \ {dom(G')}]]$ are never used,
and $[[J]]$ mentions no unification variables.
If $[[S;P |= J]]$, then $[[S;P' |= J]]$.
\end{lemma}

\begin{proof}
Like the proof of \pref{lem:weakening}. However, note that
$[[J]]$ must not contain any unification variables, as the
rules for typing unification variables (\rul{Ty\_UVar} and
\rul{Co\_UVar}) violate strengthening.
\end{proof}

\section{Solver}

The solver ($[[|->solv]]$) must have the following properties.

\begin{property}[Solver is sound]
\label{prop:isolv}
If $[[S |=ctx P,O]]$ and
$[[S;P |->solv O ~> D; Z]]$,
then $[[S |=ctx P,D]]$ and $[[S;P,D |=z Z : O]]$.
\end{property}

\section{Zonking}

\rae{Move this out from the appendix. May need to reduplicate at-signs.}

\begin{definition}[Zonker]
A \emph{zonker} $[[Z]]$
is a substitution from unification variables $[[au]]$
and $[[cu]]$ to types and coercions, respectively:
\[
[[Z]] \bnfeq [[empty]] \bnfor [[Z, t/au]] \bnfor [[Z, g/cu]] \bnfor [[Z, <D|Z'>]]
\]
A zonker $[[Z]]$ can be used as a substitution, ignoring the $[[D]]$ in a
$[[<D|Z>]]$ mapping. That is, a zonker behaves as the substitution created
by concatenating and flattening all of the $[[<D|Z>]]$ nodes.
\end{definition}

\rae{Do I use this?}
\begin{lemma}[Validating assumptions]
\label{lem:valid-assn}
If $[[S;P1,<d,D|O>,P2 |= J]]$, then $[[S;P1,<D|O>,P2 |= J]]$.
\end{lemma}

\begin{proof}
This makes only more variables available for use in $[[J]]$. Thus the
proof is like that for \pref{lem:weakening}. Note that the derivation
for the result is strictly smaller than the initial derivation, as the
context is smaller.
\end{proof}

\begin{lemma}[Zonker domains]
\label{lem:zonk-dom}
If $[[S;P |=z Z : O]]$, then $[[dom(Z) = dom(O)]]$. Here,
the $[[dom]]$ operator looks through $\langle [[D]] \pipe \cdot \rangle$
constructs.
\end{lemma}

\begin{proof}
By straightforward induction.
\end{proof}

\rae{Do I use this?}
\begin{lemma}[Zonker context regularity]
\label{lem:zonk-ctx-reg}
If $[[S;P |=z Z : O]]$, then $[[S |=ctx P]]$.
\end{lemma}

\begin{proof}
Straightforward induction on the typing derivation.
\end{proof}

\begin{lemma}[Zonker range]
\label{lem:zonk-range}
If $[[S;P |=z Z : O]]$,
the range of $[[Z]]$ contains no unification variables.
\end{lemma}

\begin{proof}
Straightforward induction on the typing derivation.
\end{proof}

\begin{lemma}[Unification variables under givens]
\label{lem:unif-var-under-given}
If $[[au : k \in O under D]]$,
$[[S;P |=z Z : O]]$, and $[[au[Z] = t]]$, then
$[[S;P,D[Z] |=ty t : k[Z] ]]$.
\end{lemma}

\begin{proof}
By induction on $[[S;P |=z Z : O]]$.

\begin{description}
\item[Case \rul{Zonk\_Nil}:]
Impossible, as $[[O]]$ contains $[[au:k]]$.
\item[Case \rul{Zonk\_TyVar}:]
We have two cases here:
\begin{description}
\item[Case $[[O = au:k,O']]$:]
In this case $[[D = empty]]$. Inversion on $[[S;P |=z Z : au:k, O']]$
gives us $[[S;P |=ty t : k]]$. By \pref{lem:scoping}, we see that
$[[[k]]$ cannot mention any variables bound in $[[O]]$; thus by
\pref{lem:zonk-dom}, $[[k[Z] = k]]$. We are done.
\item[Case $[[O = bu:k',O']]$:]
Inversion on $[[S;P |=z Z : bu:k',O']]$ tells us
$[[Z = t'/bu,Z']]$ and $[[S;P |=z Z' : O'[t'/bu] ]]$.
Since $[[au : k \in O under D]]$, it must be that
$[[au : k[t'/bu] \in O[t'/bu] under D[t'/bu] ]]$.
Furthermore, it must be that $[[au[Z'] = t]]$.
We can thus use the induction hypothesis to get
$[[S;P,D[t'/bu][Z'] |=ty t : k[t'/bu][Z'] ]]$.
However, we also know that $[[t' has no unification variables]]$,
so we can use parallel substitution, yielding
$[[S;P,D[Z] |=ty t : k[Z] ]]$ as desired.
\end{description}
\item[Case \rul{Zonk\_CoVar}:]
Like second half of previous case.
\item[Case \rul{Zonk\_Givens}:]
Here, we know $[[O = <D1|O1>,O']]$ and $[[Z = <D1|Z1>,Z']]$.
We have two cases:
\begin{description}
\item[Case $[[au:k \in O1 under D']]$:]
(Here, $[[D = D1,D']]$.)
We know $[[S;P,D1 |=z Z1 : O1]]$ and, by \pref{lem:zonk-dom},
$[[au[Z1] = t]]$. We can thus use the induction hypothesis to
conclude that
$[[S;P,D1,D'[Z1] |=ty t : k[Z1] ]]$.
By \pref{lem:scoping} and \pref{lem:zonk-dom},
$[[D1]]$ cannot mention any variables mapped in $[[Z]]$,
and $[[D']]$ and $[[k]]$ cannot mention any variables mapped
in $[[Z']]$. Thus, we can rewrite this as
$[[S;P,D[Z] |=ty t : k[Z] ]]$ as desired.
\item[Case $[[au:k \in O' under D]]$:]
From $[[au:k \in O' under D]]$, we can conclude that
$[[au:k[Z1] \in O'[Z1] under D[Z1] ]]$.
Furthermore, we know $[[S;P |=z Z' : O'[Z1] ]]$ and $[[au[Z'] = t]]$.
We can thus use the induction hypothesis to get
$[[S;P,D[Z1][Z'] |=ty t : k[Z1][Z'] ]]$.
By \pref{lem:zonk-range}, we can rewrite this as
$[[S;P,D[Z] |=ty t : k[Z] ]]$ as desired.
\end{description}
\end{description}
\end{proof}

\begin{lemma}[Zonking]
\label{lem:zonking}
If $[[S;P |=z Z : O]]$ and $[[S;P,O,D2 |= J]]$, then
$[[S;P,D2[Z] |= J[Z] ]]$.
\end{lemma}

\begin{proof}
By induction on the derivation $[[S;P,O,D2 |= J]]$.

\begin{description}
\item[Case \rul{Ty\_Var}:]
\[
\ottdruleTyXXVar{}
\]
We know $[[S |=ctx P,O,D2]]$ and $[[a :Rel k \in P,O,D2]]$.
We must prove $[[S;P,D2[Z] |=ty a[Z] : k[Z] ]]$.
Zonking a non-unification variable (like $[[a]]$) has no effect, so
we must prove
$[[S;P,D2[Z] |=ty a : k[Z] ]]$.
We will use \rul{Ty\_Var}, so we must prove the following:
\begin{description}
\item[$[[S |=ctx P,D2[Z] ]]$] By the induction hypothesis.
\item[$[[a :Rel k[Z] \in P,D2[Z] ]]$. From
$[[a :Rel k \in P,O,D2]]$, we know that $[[a]]$ must appear either
in $[[P]]$ or in $[[D2]]$. If $[[a]]$ is in $[[P]]$, we are done,
using \pref{lem:scoping} to show that zonking $[[k]]$ has no effect.
If $[[a]]$ is in $[[D2]]$, then $[[a :Rel k[Z] ]]$ must be
in $[[D2[Z] ]]$, and so we are done with this case.
\end{description}
\item[Case \rul{Co\_Var}:]
Similar to previous case.
\item[Case \rul{Ty\_UVar}:]
\[
\ottdruleTyXXUVar{}
\]
We know $[[S;P,O,D2 |=ty au : k]]$ and must
prove $[[S;P,D2[Z] |=ty au[Z] : k[Z] ]]$. There are then several possibilities:
\begin{description}
\item[Case $[[au : k \in P under D]]$:]
We further know that $[[D \subseteq P,O,D2]]$.
Because $[[O]]$ binds only unification variables, we can simplify to
$[[D \subseteq P,D2]]$.
 By \pref{lem:zonk-dom},
we know that $[[dom(Z) = dom(O)]]$. From $[[S |=ctx P,O,D2]]$
and \pref{lem:scoping}
we know that nothing in $[[P]]$ can mention any variable bound in $[[O]]$.
We also know that $[[au[Z] = au]]$ and $[[k[Z] = k]]$.
The telescope $[[D]]$ is mentioned in $[[P]]$ and therefore is unaffected
by the zonking substitution $[[Z]]$. Thus we can conclude that
$[[D \subseteq P,D2[Z] ]]$. Using the induction hypothesis to get
$[[S |=ctx P,D2[Z] ]]$, we are done by \rul{Ty\_UVar}.
\item[Case $[[au : k \in O under D]]$:]
By \pref{lem:zonk-dom}, there must be a mapping for $[[au]]$, in $[[Z]]$
and thus $[[au[Z] = t]]$ for some $[[t]]$. We then use
\pref{lem:unif-var-under-given} to get
$[[S;P,D[Z] |=ty t : k[Z] ]]$.
As in the previous case, we know that $[[D \subseteq P,D2]]$ and thus
that $[[D[Z] \subseteq (P,D2)[Z] ]]$. However, we know (by \pref{lem:scoping})
that $[[P[Z] = P]]$, so we conclude that $[[D[Z] \subseteq P,D2[Z] ]]$.
We can get $[[S |=ctx P,D2[Z] ]]$ via the induction hypothesis.
We thus use \pref{lem:weakening} to see
$[[S;P,D2[Z] |=ty t : k[Z] ]]$ as desired.
\item[Case \rul{Co\_UVar}:]
Similar to previous case.
\item[Other cases:]
Similar to proof for \pref{lem:ty-subst}.
\end{description}
\end{proof}

\section{Givens}

\begin{lemma}[Given contexts]
\label{lem:given-ctx}
If $[[S |=ctx P,D,O]]$, then $[[S |=ctx P,<D|O>,D]]$.
\end{lemma}

\begin{proof}
We can use \rul{Ctx\_Givens} to show $[[S |=ctx P,<D|O>]]$.
\pref{lem:ctx-reg} (on $[[S |=ctx P,D,O]]$) tells us
$[[S |=ctx P,D]]$. We can then use \pref{lem:weakening} to
get $[[S |=ctx P,<D|O>,D]]$ as desired.
\end{proof}

\begin{lemma}[Givens]
\label{lem:givens}
If $[[S |=ctx P,D,O]]$ and $[[S;P,D,O |= J]]$, then
$[[S;P,<D|O>,D |= J]]$.
\end{lemma}

\begin{proof}
By induction on the structure of the judgment $[[S;P,D,O |= J]]$,
using \pref{lem:given-ctx} as necessary. Note that the
\rul{Ty\_UVar} and \rul{Co\_UVar} cases go through without
difficulty because $[[D]]$ remains in the context.
\end{proof}

\section{Supporting functions}

\begin{definition}[$[[make_exhaustive]]$]
Define $[[make_exhaustive(alts;k)]]$ as follows:
\begin{align*}
[[make_exhaustive(alts; k) &= alts]] & ([[(_ -> t) \in alts]]) \\
[[make_exhaustive(alts; k) &= alts; _ -> &error k]]\, \texttt{"failed match"} & \text{(otherwise)}
\end{align*}
\end{definition}

\section{Supporting lemmas}

These lemmas are stated with respect to pure \pico/ constructs instead
of the variants that also store unification variables. As with all of the
lemmas in \pref{app:pico-proofs}, these carry over to the constructs that
can store unification variables.

\begin{lemma}[Type variables instantiation]
\label{lem:tyvars-inst}
If $[[S |-ctx as :Rel ks]]$, then $[[S |-ctx bs:Rel ks[bs/as] ]]$.
\end{lemma}

\begin{proof}
By induction on the length of $[[ks]]$.

\begin{description}
\item[Case $[[ks = empty]]$:] Trivial.
\item[Case $[[ks = ks',k0]]$:] Here, we know $[[as = as',a0]]$ and
$[[bs = bs',b0]]$. Our assumption is that $[[S |-ctx as' :Rel ks', a0 :Rel k0]]$.
Inversion (of \rul{Ctx\_TyVar}) gives us $[[S;as':Rel ks' |-ty k0 : Type{}]]$
and $[[S |-ctx as' :Rel ks']]$. The induction hypothesis tells us
$[[S |-ctx bs':Rel ks'[bs'/as'] ]]$. We must show
$[[S;bs' :Rel ks'[bs'/as'] |-ty k0[bs'/as'] : Type{}]]$.
Use \pref{lem:weakening} (Weakening) to get
$[[S;bs' :Rel ks'[bs'/as'],as':Rel ks' |-ty k0 : Type{}]]$.
\pref{lem:tel} gives us $[[S;bs':Rel ks'[bs'/as'] |-vec bs' : (bs' :Rel ks'[bs'/as'])]]$. We can thus use \pref{lem:vec-subst} to get
$[[S;bs' :Rel ks'[bs'/as'] |-ty k0[bs'/as'] : Type{}]]$ as desired.
We then use \rul{Ctx\_TyVar} and we are done.
\end{description}
\end{proof}

\section{Soundness}

\begin{lemma}[Instantiation]
\label{lem:iinst}
If $[[S;P |=ty t : k]]$ and $[[|->inst_vis k ~> ps; k' -| O]]$,
then $[[S;P,O |=ty t ps : k']]$ and $[[k']]$ is not a $\Pi$-type
with a binder (with visibility $[[vis2]]$) such that $[[vis2 <= vis]]$.
\end{lemma}

\begin{proof}
Let's call the condition on the visibility of the binder (if any)
of the result kind the \emph{visibility condition}. Proceed
by induction on the derivation of the $[[|->inst]]$ judgment.

\begin{description}
\item[Case \rul{IInst\_Rel}:]
\[
\ottdruleIInstXXRel{}
\]
We must show that $[[S;P,au:k1,O |=ty t au ps : k2']]$ and that
$[[k2']]$ satisfies the visibility condition. We can assume that
$[[S;P |=ty t : PI_vis2 a:Rel k1. k2]]$.
By inversion by \rul{Ty\_Pi}, \pref{lem:ctx-gen}, and \pref{lem:tyvar-reg},
we can see that $[[S;Rel(P) |=ty k1 : Type{}]]$. Thus
$[[S |=ctx P,au:k1]]$ and \pref{lem:weakening} gives us
$[[S;P,au:k1 |=ty t : PI_vis2 a:Rel k1. k2]]$.
Thus, \rul{Ty\_AppRel} gives us $[[S;P,au:k1 |=ty t au : k2[au/a] ]]$.
The induction hypothesis then
tells us that $[[S;P,au:k1,O |=ty t au ps : k2']]$ and gives us the
visibility condition, as desired.
\item[Case \rul{IInst\_Irrel}:]
Like previous case.
\item[Case \rul{IInst\_Co}:]
Like previous cases, but appealing to \pref{lem:covar-reg} instead
of \pref{lem:tyvar-reg}.
\item[Case \rul{IInst\_Done}:]
The typing rule is by assumption. The visibility condition is by the
fact that no previous rule in the judgment applied.
\end{description}
\end{proof}

\begin{lemma}[Function position]
\label{lem:ifun}
If $[[S;P |=ty k : Type{}]]$ and $[[|->fun k; rel1 ~> g; PI; a; rel2; k1; k2 -| O]]$,
then $[[S;P,O |=co g : k [Type{}]~[Type{}] PI_Req a:rel2 k1.k2]]$.
\end{lemma}

\begin{proof}
By case analysis on the derivation of $[[|->fun]]$.

\begin{description}
\item[Case \rul{IFun\_Id}:]
\[
\ottdruleIFunXXId{}
\]
Let $[[k = PI_Req a:rel k1. k2]]$.
We know $[[S;P |=ty k : Type{}]]$
and thus $[[S;P |=co <k> : k [Type{}]~[Type{}] k]]$ as desired.
\item[Case \rul{IFun\_Cast}:]
\[
\ottdruleIFunXXCast{}
\]
Let $[[P0 = P,bu1:Type{},bu2:Type{}]]$ and
$[[P1 = P0,cu: k0 [Type{}]~[Type{}] UPI_Req a:rel bu1.bu2]]$.
We first must show $[[S |=ctx P']]$. We know $[[S |=ctx P]]$ by \pref{lem:ctx-reg}.
Adding $[[bu1]]$ and $[[bu2]]$ to $[[P]]$ maintains well-formedness; thus
$[[S |=ctx P0]]$. In order
to add the binding for $[[cu]]$, we must show that
$[[S;Rel(P0) |=ty k0 : Type{}]]$ and $[[S;Rel(P0) |=ty UPI_Req a:rel bu1.bu2 : Type{}]]$.
The former is by assumption.
The latter comes from $[[S |=ctx P0]]$, two uses of \rul{Ty\_Var}, and
a use of \rul{Ty\_Pi}. Thus $[[S |=ctx P1]]$
and
$[[S;P1 |=co cu : k0 [Type{}]~[Type{}] UPI_Req a:rel bu1.bu2]]$ as desired.
\end{description}
\end{proof}

\begin{lemma}[Scrutinee position]
\label{lem:iscrut}
If $[[S;P |=ty t : k]]$ and $[[S;P |->scrut _alts; k ~> g; D; H'; ts -| O]]$,
then $[[S;P,O |=ty t |> g : MPI D. H'{} ts]]$ and
$[[S;Rel(P),O |=ty H'{} ts : Type{}]]$.
\end{lemma}

\begin{proof}
By case analysis on the derivation for the $[[|->scrut]]$ judgment.

\begin{description}
\item[Case \rul{IScrut\_Id}:]
\[
\ottdruleIScrutXXId{}
\]
Let $[[k = MPI D. H{} ts]]$.
Working backwards from a use of \rul{Ty\_Cast}, we need to show
that $[[S;Rel(P) |=co <k> : k [Type{}]~[Type{}] k]]$, and thus that
$[[S;Rel(P) |=ty k : Type{}]]$. This comes directly from \pref{lem:kind-reg}.
The second conclusion is assumed as a premise of \rul{IScrut\_Id}.
\item[Case \rul{IScrut\_Cast}:]
\[
\ottdruleIScrutXXCast{}
\]
Let $[[P0 = P,aus : ks[aus/as] ]]$ and $[[P1 = P0,cu:k [Type{}]~[Type{}] H'{} aus]]$.
We must first show that $[[S |=ctx P0]]$.
We know $[[|-sig S]]$ (by \pref{lem:ctx-reg}). \pref{lem:tycon-tel} tells
us $[[S |-ctx as :Rel ks]]$. \pref{lem:tyvars-inst} then tells us
$[[S |=ctx aus : ks[aus/as] ]]$. We have $[[S |=ctx P]]$ by \pref{lem:ctx-reg}
and thus can use \pref{lem:weakening} $[[S |=ctx P0]]$ as desired.
To show $[[S |=ctx P1]]$, we must now show that
$[[S;P0 |=ty k : Type{}]]$ and $[[S;P0 |=ty H'{} aus : Type{}]]$.
The former is by \pref{lem:kind-reg} and \pref{lem:weakening}.
For the latter: use \pref{lem:tycon-kind} and \pref{lem:weakening}
to see that
$[[S;P0 |=ty MPI as:Irrel ks, D2. H'{} as : Type{}]]$.
Repeated inversion on \rul{Ty\_Pi} tells us
$[[S;P0,as:Irrel ks, D2 |=ty H'{} as : Type{}]]$.
\pref{lem:istrengthening} gives us $[[S;P0,as:Irrel ks |=ty H'{} as : Type{}]]$.
\pref{lem:tel} tells us that $[[S;P0 |=vec aus : (aus : ks[aus/as])]]$.
We thus use \pref{lem:vec-subst} to see that $[[S;P0 |=ty H'{} aus : Type{}]]$
as desired.
We can thus conclude $[[S |=ctx P1]]$ by \rul{Ctx\_UCoVar}.
We are done with the first conclusion by \rul{Ty\_Cast} and \rul{Co\_Var}.
We get the second conclusion easily by noting that $[[D = empty]]$ and
by \pref{lem:kind-reg}.
\end{description}
\end{proof}

\begin{lemma}[$[[make_exhaustive]]$]
\label{lem:make-exh}
Assume that, $\forall i$, $[[S;P;MPI D.H{} ss;t |=alt alti : k]]$ and
$[[alts' = make_exhaustive(alts; k)]]$. Furthermore, assume no pattern
appears twice in $[[alts]]$. Then $\forall j$,
$[[S;P;MPI D.H{} ss;t |=alt altj' : k]]$ and $[[alts' are exhaustive for H (wrt S)]]$.
\end{lemma}

\begin{proof}
If there is a default pattern in $[[alts]]$, then $[[make_exhaustive]]$ does
nothing. In this case, the default pattern makes the $[[alts]]$ exhaustive.
We have already assumed they are unique.

Otherwise, $[[make_exhaustive]]$ adds a default. Assuming
$[[&error :Rel UPI (a :Irrel Type{}), (b :Rel &String{}). a]]$,
we have $\forall j$, $[[S;P;MPI D.H{} ss; t |=alt altj' : k]]$, and indeed
the alternatives are now exhaustive.
\end{proof}

\begin{lemma}[Prenex]
\label{lem:ipre}
If $[[S;Rel(P) |=ty k : Type{}]]$ and
$[[|->pre k ~> D; k'; t]]$, then
$[[S;P |=ty t : UPI x:Rel (UPI D. k'). k]]$.
\end{lemma}

\begin{proof}
By induction on the $[[|->pre]]$ judgment.

\begin{description}
\item[Case \rul{IPrenex\_Invis}:]
\[
\ottdruleIPrenexXXInvis{}
\]
We know $[[S;Rel(P) |=ty UPI_vis d.k2 : Type{}]]$.
Inversion gives us $[[S;Rel(P,d) |=ty k2 : Type{}]]$.
The induction hypothesis thus tells us that
$[[S;P,d |=ty t : UPI y:Rel (UPI D.k2'). k2]]$.
Let $[[P' = P,x:Rel UPI d,D. k2',d]]$. We need
$[[S |=ctx P']]$, for which we need
$[[S;Rel(P) |= UPI d,D.k2' : Type{}]]$, which can
be proved by inversions and \rul{Ty\_Pi}.
We thus have $[[S |=ctx P']]$.
We now show that $[[S;P' |=ty t (x dom(d)) : k2]]$.
First, we note that $[[S;P' |=ty x dom(d) : UPI D.k2']]$
by the appropriate application rule. (It depends on the
relevance of $[[d]]$.) There is no substitution in the kind, because
we are applying to $[[dom(d)]]$. Thus
$[[S;P' |=ty t (x dom(d)) : k2[x dom(d)/y] ]]$ by \rul{Ty\_AppRel}.
However, we know $[[y # k2]]$ by \pref{lem:scoping} and so we
are done by two uses of \rul{Ty\_Lam}.
\item[Case \rul{IPrenex\_Vis}:]
\[
\ottdruleIPrenexXXVis{}
\]
We know $[[S;Rel(P) |=ty UPI_Req d.k2 : Type{}]]$.
Inversion gives us $[[S;Rel(P,d) |=ty k2 : Type{}]]$.
The induction hypothesis then gives us
$[[S;P,d |=ty t : UPI y:Rel (UPI D.k2'). k2]]$.
Let $[[P' = P,x:Rel (UPI D,d.k2'),d]]$.
We need $[[S |=ctx P']]$, for which we need
$[[S;Rel(P) |= UPI D,d.k2' : Type{}]]$. This can be
proved by inversions and \rul{Ty\_Pi}.
We thus have $[[S |=ctx P']]$.
We now show that $[[S;P' |=ty t (\D. x dom(D) dom(d)) : k2]]$.
First, we show that $[[S;P',D |=ty x dom(D) dom(d) : k2']]$.
Once we show that $[[S |=ctx P',D]]$ (as can be shown by inversions,
\pref{lem:ctx-reg},
and \pref{lem:weakening}), then this comes directly from the type
of $[[x]]$. Thus, we can conclude, by repeated use of\rul{Ty\_Lam},
that $[[S;P' |=ty \ D. x dom(D) dom(d) : UPI D.k2']]$.
Accordingly, $[[S;P' |=ty t (\D.x dom(D) dom(d)) : k2[(\D.x dom(D) dom(d))/y] ]]$,
but the substitution in the kind has no effect by \pref{lem:scoping}.
We thus have $[[S;P' |=ty t (\D.x dom(D) dom(d)) : k2]]$.
We are done by several uses of \rul{Ty\_Lam}.
\item[Case \rul{IPrenex\_NoPi}:]
\[
\ottdruleIPrenexXXNoPi{}
\]
Assuming $[[S;Rel(P) |=ty k : Type{}]]$, we must show
$[[S;P |=ty \x:Rel k.x : UPI x:Rel k.k]]$.
This is true by straightforward application of typing rules.
\end{description}
\end{proof}

\begin{lemma}[Subsumption] ~
\label{lem:isub}
Assume $[[S;Rel(P) |=ty k1 : Type{}]]$ and $[[S;Rel(P) |=ty k2 : Type{}]]$.
If either
\begin{enumerate}
\item $[[k1 *<= k2 ~> t -| O]]$, OR
\item $[[k1 <= k2 ~> t -| O]]$
\end{enumerate}
Then $[[S;P,O |=ty t : UPI x:Rel k1. k2]]$.
\end{lemma}

\begin{proof}
By mutual induction on the subsumption judgment.

\begin{description}
\item[Case \rul{ISub\_FunRel}:]
\[
\ottdruleISubXXFunRel{}
\]
Our assumption says that
$[[S;Rel(P) |=ty UPI a:Rel k1.k2 : Type{}]]$ and
$[[S;Rel(P) |=ty UPI a:Rel k3.k4 : Type{}]]$.
Inversion of \rul{Ty\_Pi} tells us the following:
\begin{itemize}
\item $[[S;Rel(P) |=ty k1 : Type{}]]$
\item $[[S;Rel(P),a:Rel k1 |=ty k2 : Type{}]]$
\item $[[S;Rel(P) |=ty k3 : Type{}]]$
\item $[[S;Rel(P),b:Rel k3 |=ty k4 : Type{}]]$
\end{itemize}
The induction hypothesis then tells us
$[[S;P,O1 |=ty t1 : UPI x1:Rel k3. k1]]$.
\pref{lem:weakening} gives us $[[S;Rel(P),O1,b:Rel k3,a:Rel k1 |=ty k2 : Type{}]]$.
Rule \rul{Ty\_AppRel} tells us $[[S;P,O1,b:Rel k3 |=ty t1 b : k1[b/x] ]]$,
but \pref{lem:scoping} tells us that the substitution in the kind has
no effect. We can thus use \pref{lem:ty-subst} to get
$[[S;Rel(P),O1,b:Rel k3 |=ty k2[t1 b/a] : Type{}]]$.
Now, we can use the induction hypothesis again to get
$[[S;P,O1,b:Rel k3,O2 |=ty t2 : UPI x2:Rel k2[t1 b/a]. k4]]$.
\pref{lem:givens} tells us now that
$[[S;P,O1,<b:Rel k3|O2>,b:Rel k3 |=ty t2 : UPI x2:Rel k2[t1 b/a]. k4]]$.
Let $[[P' = P,O1,<b:Rel k3|O2>,x:Rel (UPI a:Rel k1.k2),b:Rel k3]]$.
To show $[[S |=ctx P']]$, we need only show that
$[[S;Rel(P),O1,<b:Rel k3|O2> |=ty UPI a:Rel k1.k2 : Type{}]]$, but this
is true by \pref{lem:weakening}.
We must now show $[[S;P' |=ty t2 (x (t1 b)) : k4]]$.
We've already ascertained that $[[S;P' |=ty t1 b : k1]]$.
We see that $[[S;P' |=ty x (t1 b) : k2[t1 b/a] ]]$.
Thus $[[S;P' |=ty t2 (x (t1 b)) : k4[x (t1 b)/x2] ]]$, but
\pref{lem:scoping} tells us that the substitution in the kind has
no effect. We are thus done by two uses of \rul{Ty\_Lam}.
\item[Case \rul{ISub\_FunIrrel}:]
Similar to previous case.
\item[Case \rul{ISub\_Unify}:]
\[
\ottdruleISubXXUnify{}
\]
We must show that $[[S;P,cu: t1[Type{}]~[Type{}] t2 |=ty \x:Rel t1. (x |> cu) : UPI x:Rel t1. t2]]$. Our last step will be \rul{Ty\_Lam} and thus
we must show
$[[S;P,cu: t1[Type{}]~[Type{}] t2, x :Rel t1 |=ty x |> cu : t2]]$,
for which we only need show that
$[[S |=ctx P,cu : t1 [Type{}]~[Type{}] t2]]$, for which we only need show that
$[[S;Rel(P) |=ty t1 : Type{}]]$ and $[[S;Rel(P) |=ty t2 : Type{}]]$, which
we know by assumption. We are done.
\item[Case \rul{ISub\_DeepSkol}:]
\[
\ottdruleISubXXDeepSkol{}
\]
We must show $[[S;P,O1,<D|O2> |=ty \x :Rel k1. t1 (\D. t2 (x ps)) : UPI x: Rel k1. k2]]$. The last step will be \rul{Ty\_Lam}, so we must show
$[[S;P,O1,<D|O2>,x:Rel k1 |=ty t1 (\D. t2 (x ps)) : k2]]$.
From $[[S;Rel(P) |=ty k1 : Type{}]]$, we can use \rul{Ctx\_TyVar} to see
$[[S |=ctx P,x:Rel k1]]$. Thus
$[[S;P,x:Rel k1 |= x : k1]]$.
\pref{lem:iinst} then tells us that
$[[S;P,x:Rel k1,O1 |=ty x ps : k1']]$.
We then know (by \pref{lem:kind-reg}) that
$[[S;Rel(P),x:Rel k1,O1 |=ty k1' : Type{}]]$.
\pref{lem:ipre} tells us that
$[[S;P |=ty t1 : UPI x1:Rel (UPI D. k2') k2]]$.
\pref{lem:kind-reg} and
inversion gives
$[[S;Rel(P,D) |=ty k2' : Type{}]]$.
We can then use the induction hypothesis with context
$[[P,x:Rel k1,O1,D]]$ (known well-formed by \pref{lem:weakening}) to get
$[[S;P,x:Rel k1,O1,D,O2 |=ty t2 : UPI x2:Rel k1'. k2']]$.
Rule \rul{Ty\_AppRel} gives us
$[[S;P,x:Rel k1,O1,D,O2 |=ty t2 (x ps) : k2'[x ps/x2] ]]$
but \pref{lem:scoping} tells us that the substitution in the kind has
no effect.
Now, we use \pref{lem:givens} to see
$[[S;P,x:Rel k1,O1,<D|O2>,D |=ty t2 (x ps) : k2']]$
and then use \rul{Ty\_Lam} (repeatedly) to see
$[[S;P,x:Rel k1,O1,<D|O2> |=ty \ D. t2 (x ps) : UPI D. k2']]$.
Thus \rul{Ty\_AppRel} tells us
$[[S;P,x:Rel k1,O1,<D|O2> |=ty t1 (\ D. t2 (x ps)) : k2[(\ D. t2 (x ps))/x1] ]]$,
but \pref{lem:scoping} tells us that the substitution in the kind
has no effect.
We only need to reshuffle the context; in other words, we must
now show
$[[S |=ctx P,O1,<D|O2>,x:Rel k1]]$ to be done.
For this to hold, we need to know that none of
$[[O1,D,O2]]$ depend on $[[x]]$.
First, note that $[[x]]$ is local to rule \rul{ISub\_DeepSkol}.
We see that $[[O1]]$ is produced by $[[|->inst]]$ with no mention of
$[[x]]$; it mustn't mention $[[x]]$ then. The case is similar for
$[[D]]$ and $[[O2]]$, both produced with no mention of $[[x]]$. Therefore,
$[[x]]$ is not mentioned in any of these, and we are done.
\end{description}
\end{proof}

\begin{theorem}[Type elaboration is sound] ~
\begin{enumerate}
\item If any of the following:
\begin{enumerate}
\item $[[S |=ctx P]]$ and $[[S;P |->ty _t ~> t : k -| O]]$, OR
\item $[[S |=ctx P]]$ and $[[S;P *|->ty _t ~> t : k -| O]]$, OR
\item $[[S;Rel(P) |=ty k : Type{}]]$ and $[[S;P |->ty _t : k ~> t -| O]]$, OR
\item $[[S;Rel(P) |=ty k : Type{}]]$ and $[[S;P *|->ty _t : k ~> t -| O]]$
\end{enumerate}
Then $[[S;P,O |=ty t : k]]$.
\item
If $[[S |=ctx P]]$ and $[[S;P |->pt _s ~> s -| O]]$,
then $[[S;P,O |=ty s : Type{}]]$.
\item
If $[[S;P |=ty k : Type{}]]$,
$[[S;P |=ty t0 : k0]]$, and
$[[S;P;k0;t0 |->alt _alt : k ~> alt -| O]]$, then
$[[S;P,O;k0;t0 |=alt alt : k]]$.
\item
If $[[S;P |=ty k : Type{}]]$,
$[[S;P |=ty t0 : k0]]$, and
$[[S;P;k0;t0 |->altc _alt : k ~> alt -| O]]$, then
$[[S;P,O;k0;t0 |=alt alt : k]]$.
\item
If $[[S |=ctx P]]$ and $[[S;P |->q _qvar ~> a : k; vis -| O]]$,
then $[[S;Rel(P),O |=ty k : Type{}]]$.
\item
If $[[S |=ctx P]]$ and $[[S;P |->aq _aqvar ~> a : k -| O]]$,
then $[[S;Rel(P),O |=ty k : Type{}]]$.
\item
If $[[S;P |=ty t1 : PI_vis a:rel k1.k2]]$
and $[[S;P;rel *|->arg _t2 : k1 ~> p2; t2 -| O]]$,
then $[[S;P,O |=ty t1 p2 : k2[t2/a] ]]$.
\end{enumerate}
\end{theorem}

\begin{proof}
Proceed by induction on the structure of the type inference derivation.

\begin{description}
\item[Case \rul{ITy\_Inst}:]
\[
\ottdruleITyXXInst{}
\]
The induction hypothesis gives us $[[S;P,O1 |=ty t : k]]$.
\pref{lem:iinst} then gives us $[[S;P,O1,O2 |=ty t ps : k']]$ as
desired.
\item[Case \rul{ITy\_Var}:]
By \rul{Ty\_Var} and \pref{lem:iinst}.
\item[Case \rul{ITy\_App}:]
\[
\ottdruleITyXXApp{}
\]
The induction hypothesis tells us that
$[[S;P,O1 |=ty t1 : k0]]$. Thus $[[S;Rel(P),O1 |=ty k0 : Type{}]]$
by \pref{lem:kind-reg}.
\pref{lem:ifun} tells us that
$[[S;Rel(P),O1,O2 |=co g : k0 [Type{}]~[Type{}] PI_Req a:rel k1.k2]]$.
Rule \rul{Ty\_Cast}
gives us $[[S;P,O1,O2 |=ty t1 |> g : PI_Req a:rel k1.k2]]$.
Another use of the induction hypothesis (for the $[[*|->arg]]$ premise)
gives us our desired outcome.
\item[Case \rul{ITy\_AppSpec}:]
By induction.
\item[Case \rul{ITy\_Annot}:]
By induction.
\item[Case \rul{ITy\_Case}:]
\[
\ottdruleITyXXCase{}
\]
The induction hypothesis tells us that
$[[S;P,O0 |=ty t0 : k0]]$.
\pref{lem:iscrut} tells us that $[[S;P,O0,O0' |=ty t0 |> g : MPI D. H'{} ts]]$
and $[[S;Rel(P,O0),O0' |=ty H'{} ts : Type{}]]$.
Rule \rul{Ctx\_UTyVar} gives us $[[S |=ctx O']]$.
The induction hypothesis (for $[[|->alt]]$) tells us that, $\forall i$,
$[[S;P,O',Oi;MPI D. H'{} ts; t0 |> g |=alt alti : au]]$.
\pref{lem:make-exh} then tells us that $[[alts']]$ are well-formed and
exhaustive. \pref{lem:weakening} (and \pref{lem:ctx-reg} on the $[[|=alt]]$
judgments) allows us to combine all the $[[Oi]]$ into
$[[Os]]$. We are done by \rul{Ty\_Case}.

\item[Case \rul{ITy\_Lam}:]
\[
\ottdruleITyXXLam{}
\]
The induction hypothesis tells us that
$[[S;Rel(P),O1 |=ty k1 : Type{}]]$.
Thus $[[S |=ctx P,O1,a:Rel k1]]$ and we can use the induction
hypothesis to get
$[[S;P,O1,a:Rel k1,O2 |=ty t : k2]]$.
By \pref{lem:givens}, we get $[[S;P,O1,<a:Rel k1|O2>,a:Rel k1 |=ty t : k2]]$
and thus
$[[S;P,O1,<a:Rel k1|O2> |=ty \ a:Rel k1. t : UPI_vis a:Rel k1. k2]]$
as desired.

\item[Case \rul{ITy\_LamIrrel}:]
Like previous case.
\item[Case \rul{ITy\_Arrow}:]
By induction and \pref{lem:weakening}
\item[Case \rul{ITy\_MArrow}:]
By induction and \pref{lem:weakening}
\item[Case \rul{ITy\_Fix}:]
\[
\ottdruleITyXXFix{}
\]
The induction hypothesis gives us $[[S;P,O1 |=ty t : k]]$
and thus $[[S;Rel(P),O1 |=ty k : Type{}]]$ by \pref{lem:kind-reg}.
\pref{lem:ifun} gives us
$[[S;Rel(P),O1,O2 |=co g : k [Type{}]~[Type{}] UPI_Req a :Rel k1. k2]]$
and then \rul{Ty\_Cast} tells us
$[[S;P,O1,O2 |=ty t |> g : UPI_Req a :Rel k1. k2]]$.
Thus, \pref{lem:ctx-reg} tells us $[[S |=ctx P,O1,O2]]$.
In order to prove $[[S |=ctx O]]$, we must show
$[[S;Rel(P),O1,O2 |=ty k2 : Type{}]]$ and
$[[S;Rel(P),O1,O2 |=ty k1 : Type{}]]$.
The first of these is a premise to \rul{ITy\_Fix}.
To get the second, we use \pref{lem:kind-reg} to get
$[[S;Rel(P),O1,O2 |=ty UPI_Req a :Rel k1. k2 : Type{}]]$
and then invert.
We can conclude $[[S |=ctx O]]$ by \rul{Ctx\_UCoVar}.

Inversion on $[[S;P,O1,O2 |=ty t |> g : UPI_Req a:Rel k1. k2]]$
tells us that
$[[S;Rel(P),O |=co g : k [Type{}]~[Type{}] UPI_Req a:Rel k1. k2]]$.
We can further see (by \rul{Co\_PiTy}) that
$[[S;Rel(P),O |=co UPI a:Rel <k1>.cu : (UPI a:Rel k1. k2) [Type{}]~[Type{}] (UPI a:Rel k1. (k1[a |> sym <k1>/a]))]]$
However, because $[[a # k1]]$ (by \pref{lem:scoping}),
that last substitution has no effect, and so
we conclude
$[[S;Rel(P),O |=co UPI a:Rel <k1>.cu : (UPI a:Rel k1. k2) [Type{}]~[Type{}] (UPI a:Rel k1. k1]]$
and thus
$[[S;P,O |=ty t |> (g ;; UPI a:Rel <k1>. cu) : UPI a:Rel k1. k1]]$.
Finally, \rul{Ty\_Fix} gives us
$[[S;P,O |=ty fix (t |> (g ;; UPI a:Rel <k1>. cu)) : k1]]$ as desired.

\item[Case \rul{ITy\_Let}:]
\[
\ottdruleITyXXLet{}
\]
The induction hypothesis gives us
$[[S;P,O |=ty t1 : k1]]$. \pref{lem:kind-reg} tells us
$[[S;Rel(P),O |=ty k1 : Type{}]]$ and thus that
$[[S |=ctx P,O,x:Rel k1]]$.
Another use of the induction hypothesis gives us
$[[S;P,O,x:Rel k1,O2 |=ty t2 : k2]]$.
\pref{lem:givens} then gives us
$[[S;P,O,<x:Rel k1|O2>,x:Rel k1 |=ty t2 : k2]]$ and thus
$[[S;P,O,<x:Rel k1|O2> |=ty \ x:Rel k1. t2 : UPI x:Rel k1. k2]]$
Rule \rul{Ty\_AppRel} gives us
$[[S;P,O,<x:Rel k1|O2> |=ty (\x :Rel k1. t2) t1 : k2[t1/x] ]]$ as desired.

\item[Case \rul{ITyC\_Case}:]
Similar to the case for \rul{ITy\_Case}. The only differences are the
definition of $[[O']]$ (which is simpler in this case) and the
use of $[[|=altc]]$ in place of $[[|=alt]]$. Both $[[|=alt]]$ and
$[[|=altc]]$ are proven sound via the induction hypothesis.

\item[Case \rul{ITyC\_Lam}:]
\[
\ottdruleITyCXXLam{}
\]
\pref{lem:ifun} tells us
$[[S;Rel(P),O0 |=co g : k [Type{}]~[Type{}] UPI_Req a:Rel k1. k2]]$.
The induction hypothesis (on $[[|->aq]]$) tells us
$[[S;Rel(P),O |=ty k1' : Type{}]]$.
\pref{lem:prop-reg} and inversions tell us
$[[S;Rel(P),O0 |=ty k1 : Type{}]]$.
We can thus use \pref{lem:isub} to see
$[[S;P,O0,O,O1 |=ty t1 : UPI x:Rel k1. k1']]$.
\pref{lem:prop-reg} and inversions tell us
$[[S;Rel(P),O0,a:Rel k1 |=ty k2 : Type{}]]$.
\rae{TODO. Make sure to update LamIrrel too}

\item[Case \rul{ITyC\_LamIrrel}:]
Like previous case. \rae{Is it?}

\item[Case \rul{ITyC\_Fix}:]
\[
\ottdruleITyCXXFix{}
\]
We know $[[S;Rel(P) |=ty k : Type{}]]$. We can thus conclude
by \rul{Ty\_Pi} that $[[S;Rel(P) |=ty UPI a:Rel k.k : Type{}]]$.
We thus use the induction hypothesis to get
$[[S;P,O |=ty t : UPI a:Rel k.k]]$.
Thus we are done by \rul{Ty\_Fix}.

\item[Case \rul{ITyC\_Infer}:]
\[
\ottdruleITyCXXInfer{}
\]
The induction hypothesis tells us that
$[[S;P,O |=ty t : k1]]$.
We thus know $[[S |=ctx P,O]]$ by \pref{lem:ctx-reg}.
\pref{prop:isolv}
tells us that $[[S |=ctx P,D]]$ and $[[S;P,D |=z Z : O]]$.
\pref{lem:weakening} gives us
$[[S;P,D,O |=ty t : k1]]$.
\pref{lem:zonking}
then tells us that $[[S;P,D |=ty t[Z] : k1[Z] ]]$.
We see from the rule that $[[t' = \D .t[Z] ]]$ and 
$[[k1' = UPI_Inf D. k1[Z] ]]$.
Thus we can see (by repeated use of \rul{Ty\_Lam})
that $[[S;P |=ty t' : k1']]$.
Accordingly, \pref{lem:kind-reg} gives us
$[[S;Rel(P) |=ty k1' : Type{}]]$.
We have assumed that $[[S;Rel(P) |=ty k2 : Type{}]]$.
We thus use \pref{lem:isub} to conclude
$[[S;P,O2 |=ty t2 : UPI x:Rel k1'. k2]]$ and then
\rul{Ty\_AppRel} to see that
$[[S;P,O2 |=ty t2 t' : k2[t'/x] ]]$. We are done,
noting that the substitution in the kind has no effect by
\pref{lem:scoping}.

\item[Case \rul{ITyC\_LamInvis}:]


\rae{Continue.}
\end{description}
\end{proof}

\rae{Refl is not redundant without a proof of Type ~ Type.}

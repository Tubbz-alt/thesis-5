\chapter{Proofs about the \bake/ algorithm}
\label{app:inference}

Throughout this appendix, I use a convention whereby
in any case where the rule under consideration is printed, any metavariable
names in the rule shadow any metavariable names in the lemma or
theorem statement.

\section{Type inference judgment properties}

\begin{definition}[Judgments with unification variables]
I write judgments with a new turnstile $\vDash$; these judgments are
identical to the corresponding judgments written with a $\vdash$ except
with the new rules as given in \pref{app:inference-rules}.
All lemmas proved over the old judgments hold over the new ones,
noting that the new \rul{UVar} rules are unaffected by context extension.
\end{definition}

\begin{definition}[Generalized judgments]
I sometimes write $[[S;P |= J]]$,
where $[[J]]$ stands for a \emph{judgment}, one of the
judgments headed by $[[|=ty]]$, $[[|=co]]$, $[[|=prop]]$,
$[[|=alt]]$, $[[|=vec]]$, $[[|=ctx]]$, or $[[|=s]]$.
Similarly, I write $[[J[theta] ]]$ to denote substitution in the
component parts of the judgment $[[J]]$.
\end{definition}

\begin{lemma}[Extension] ~
\label{lem:extension}
\begin{enumerate}
\item
If $[[S;G |- J]]$, then $[[S;G |= J]]$.
\item
If $[[S;G |= J]]$ and $[[J]]$ mentions no unification variables, then
$[[S;G |- J]]$.
\end{enumerate}
\end{lemma}

\begin{proof}
The difference between the $[[|-]]$ judgments and the $[[|=]]$ judgments
is only the addition of new rules for new forms. No previously valid
derivations are affected. Note that, although we can't prove it now, the
``mentions no unification variables'' is redundant, as shown by \pref{lem:iscoping},
below.
\end{proof}

\section{Properties adopted from \pref{app:pico-proofs}}

\begin{remark}
By the straightforward extension of the $[[Rel]](\cdot)$ operation,
all previous lemmas (\pref{lem:dom-rel}, \pref{lem:subsequence-rel},
\pref{lem:rel-idempotent}, \pref{lem:increasing-rel}) dealing with
contexts and relevance remain true under the $[[|=]]$ judgments.
\end{remark}

\begin{lemma}[Type variable kinds {[\pref{lem:tyvar-reg}]}]
\label{lem:ityvar-reg}
(as stated previously, but with reference to $[[|=]]$ judgments)
\end{lemma}

\begin{proof}
As before; the new forms do not pose any problems.
\end{proof}

\begin{lemma}[Unification type variable kinds]
\label{lem:unif-tyvar-reg}
If $[[S |=ctx P]]$ and $[[au :rel forall D.k \in P]]$, then there exists
$[[P']]$ such that $[[P' \subseteq Rel(P)]]$ and
$[[S;P',Rel(D) |=ty k : Type{}]]$. Furthermore, the size of the
derivation of $[[S;P',Rel(D) |=ty k : Type{} ]]$ is smaller than
that of $[[S |=ctx P]]$.
\end{lemma}

\begin{proof}
Straightforward induction on $[[S |=ctx P]]$.
\end{proof}

\begin{lemma}[Coercion variable kinds {[\pref{lem:covar-reg}]}]
\label{lem:icovar-reg}
(as stated previously, but with reference to $[[|=]]$ judgments)
\end{lemma}

\begin{proof}
As before; the new forms do not pose any problems.
\end{proof}

\begin{lemma}[Unification coercion variable kinds]
\label{lem:unif-covar-reg}
If $[[S |=ctx P]]$ and $[[cu : forall D. phi \in P]]$, then there exists
$[[P']]$ such that $[[P' \subseteq Rel(P)]]$ and $[[S;P',Rel(D) |=prop phi]]$.
Furthermore, the size of the derivation of $[[S;P',Rel(D) |=prop phi]]$
is smaller than that of $[[S |=ctx P]]$.
\end{lemma}

\begin{proof}
Straightforward induction on $[[S |=ctx P]]$.
\end{proof}

\begin{lemma}[Context regularity {[\pref{lem:ctx-reg}]}]
\label{lem:ictx-reg}
(as stated previously, but with reference to $[[|=]]$ judgments)
\end{lemma}

\begin{proof}
As before; the new forms do not pose any problems.
\end{proof}

\begin{lemma}[Weakening {[\pref{lem:weakening}]}]
\label{lem:iweakening}
Assume $[[S |=ctx P']]$ and $[[P \subseteq P']]$.
If $[[S;P |= J]]$, then $[[S;P' |= J]]$.
\end{lemma}

\begin{proof}
As before; the new forms do not pose any problems.
\end{proof}

\begin{lemma}[Strengthening {[\pref{lem:strengthening}]}]
\label{lem:istrengthening}
(as stated previously, but with reference to $[[|=]]$ judgments)
\end{lemma}

\begin{proof}
As before; the new forms do not pose any problems.
\end{proof}

\begin{lemma}[Scoping {[\pref{lem:scoping}]}]
\label{lem:iscoping}
(as stated previously, but with reference to $[[|=]]$ judgments)
\end{lemma}

\begin{proof}
We must consider now \rul{Ty\_UVar} and \rul{Co\_UVar}. These cases
are similar; let's focus on \rul{Ty\_UVar}:
\[
\ottdruleTyXXUVar{}
\]
We see that $[[au \in {dom(P)}]]$, and the induction hypothesis tells
us that the scoping requirement holds for $[[ps]]$.
\pref{lem:unif-tyvar-reg} tells us that $[[S;P',Rel(D) |=ty k : Type{}]]$
for some $[[P' \subseteq Rel(P)]]$. This derivation is smaller than the
one ending in \rul{Ty\_UVar}, and so we can use the induction hypothesis
to see that $[[fv(k) \subseteq ({dom(P)} \union {dom(D)})]]$.
The substitution in the conclusion removes all use of variables in $[[dom(D)]]$,
and so $[[fv(k) \subseteq {dom(P)}]]$ as desired.
\end{proof}

\begin{lemma}[Determinacy {[\pref{lem:determinacy}]}]
\label{lem:ideterminacy}
(as stated previously, but with reference to $[[|=]]$ judgments)
\end{lemma}

\begin{proof}
As before.
\end{proof}

\begin{lemma}[Type substitution {[\pref{lem:ty-subst}]}]
\label{lem:ity-subst}
If $[[S;P |=ty s : k]]$ and $[[S;P,a:rel k,P' |= J]]$, then
$[[S;P,P'[s/a] |= J[s/a] ]]$.
\end{lemma}

\begin{proof}
By induction on $[[S;P,a:rel k,P' |= J]]$. We consider only the new cases.

\begin{description}
\item[Case \rul{Ty\_UVar}:]
\[
\ottdruleTyXXUVar{}
\]
We must prove $[[S;P,P'[s/a] |=ty au_{{ps[s/a]}} : k[ps/dom(D)][s/a] ]]$.
(Recall that normal substitutions $[[theta]]$ do not map unification
variables.) We know $[[au :Rel forall D.k \in P,a:rel k,P']]$,
$[[S |=ctx P,a:rel k,P']]$ and $[[S;P,a:rel k,P' |=vec ps : D]]$.
By the induction hypothesis, we can conclude $[[S |=ctx P,P'[s/a] ]]$
and $[[S;P,P'[s/a] |=vec ps[s/a] : D[s/a] ]]$.
We now have two cases, depending on the location of $[[au]]$:
\begin{description}
\item[Case $[[au :Rel forall D.k \in P]]$:]
In this case, \pref{lem:iscoping} tells us that $[[D]]$
cannot mention
$[[a]]$, and thus $[[D[s/a] = D]]$. We can thus
use $[[au :Rel forall D.k \in P]]$ to complete the premises for \rul{Ty\_UVar},
showing that $[[S;P,P'[s/a] |=ty au_{{ps[s/a]}} : k[ps[s/a]/dom(D)] ]]$.
The kind can be rewritten as $[[k[s/a][ps[s/a]/dom(D)] ]]$ as we know
$[[a]] \not\in [[fv(k)]]$. It can then
further be rewritten to $[[k[ps/dom(D)][s/a] ]]$ as desired.
\item[Case $[[au :Rel forall D.k \in P']]$:]
It must be the case that $[[au :Rel forall (D[s/a]).(k[s/a]) \in P'[s/a] ]]$.
Rule \rul{Ty\_UVar} then gives us
$[[S;P,P'[s/a] |=ty au_{{ps[s/a]}} : k[s/a][ps[s/a]/dom(D)] ]]$ which
can be (see above) rewritten as $[[S;P,P'[s/a] |=ty au_{{ps[s/a]}} : k[ps/dom(D)][s/a] ]]$
as desired.
\end{description}
\item[Case \rul{Co\_UVar}:]
Similar to previous case.
\end{description}
\end{proof}

\begin{lemma}[Coercion substitution {[\pref{lem:co-subst}]}]
\label{lem:ico-subst}
If $[[S;P |=co g : phi]]$ and $[[S;P,c:phi,P' |= J]]$, then
$[[S;P,P'[g/c] |= J[g/c] ]]$.
\end{lemma}

\begin{proof}
Similar to previous proof.
\end{proof}

\begin{lemma}[Vector substitution {[\pref{lem:vec-subst}]}]
\label{lem:ivec-subst}
If $[[S;P |=vec ps : D]]$ and $[[S;P,D,P' |= J]]$,
then $[[S;P,P'[ps/dom(D)] |= J[ps/dom(D)] ]]$.
\end{lemma}

\begin{proof}
As before, referring to \pref{lem:ity-subst} and \pref{lem:ico-subst}.
Note that this version is generalized to work over any judgment
$[[J]]$ while the previous proof lemma works only over $[[|-ty]]$.
This generalization poses no trouble.
\end{proof}

\section{Regularity}

\begin{lemma}[Increasing relevance in vectors]
\label{lem:increasing-rel-vec}
If $[[S;P |=vec ps : D]]$, then
$[[S;Rel(P) |=vec ps : Rel(D)]]$.
\end{lemma}

\begin{proof}
Straightforward induction on the typing derivation, appealing
to \pref{lem:increasing-rel}.
\end{proof}

\begin{lemma}[Kind regularity {[\pref{lem:kind-reg}]}]
\label{lem:ikind-reg}
If $[[S;P |=ty t : k]]$, then $[[S;Rel(P) |=ty k : Type{}]]$.
\end{lemma}

\begin{proof}
By induction on the typing derivation. We consider only the new case:

\begin{description}
\item[Case \rul{Ty\_UVar}:]
\[
\ottdruleTyXXUVar{}
\]
We must prove $[[S;Rel(P) |=ty k[ps/dom(D)] : Type{}]]$.
By \pref{lem:ictx-reg} and \pref{lem:unif-tyvar-reg}, there exists
$[[P']]$ such that $[[P' \subseteq Rel(P)]]$ and
$[[S;P',Rel(D) |=ty k : Type{}]]$. \pref{lem:iweakening} then gives
us $[[S;Rel(P,D) |=ty k : Type{}]]$.
\pref{lem:increasing-rel-vec}
tells us that
$[[S;Rel(P) |=vec ps : Rel(D)]]$. We can thus use
\pref{lem:ivec-subst} to get
$[[S;Rel(P) |=ty k[ps/dom(D)] : Type{}]]$
as desired.
\end{description}
\end{proof}

\begin{lemma}[Proposition regularity {[\pref{lem:prop-reg}]}]
\label{lem:iprop-reg}
If $[[S;P |=co g : phi]]$, then $[[S;Rel(P) |=prop phi]]$.
\end{lemma}

\begin{proof}
The proof for the \rul{Co\_UVar} case is similar to the proof
above for \rul{Ty\_UVar}. Other cases are as before.
\end{proof}

\section{Zonking}

\rae{Move this out from the appendix. May need to reduplicate at-signs.}

\begin{definition}[Zonker]
A \emph{zonker} $[[Z]]$
is a substitution from unification variables $[[au]]$
and $[[cu]]$ to types and coercions, respectively. Each mapping also
includes a list of type and coercion variables under which it is quantified.
\[
[[Z]] \bnfeq [[empty]] \bnfor [[Z, forall zs. t/au]] \bnfor [[Z, forall zs. g/cu]]
\]
\end{definition}

\begin{lemma}[Zonker domains]
\label{lem:zonk-dom}
If $[[S;P |=z Z : O]]$, then $[[dom(Z) = dom(O)]]$.
\end{lemma}

\begin{proof}
By straightforward induction.
\end{proof}

\begin{lemma}[Zonking a relevant type variable]
\label{lem:zonk-rel-tyvar}
If $[[au :Rel forall D. k \in O]]$, $[[S;P |=z Z : O]]$, no
binding in $[[O]]$ refers to a later one, and the range of $[[Z]]$
is disjoint from its domain,
then there
exists $[[t]]$ such that
$[[forall dom(D). t/au \in Z]]$ and $[[S;P,D[Z] |=ty t : k[Z] ]]$.
\end{lemma}

\begin{proof}
By induction on $[[S;P |=z Z : O]]$.

\begin{description}
\item[Case \rul{Zonk\_Nil}:]
Impossible, as $[[O]]$ is empty.
\item[Case \rul{Zonk\_TyVarRel}:]
We have two cases here:
\begin{description}
\item[Case $[[O = au :Rel forall D.k, O']]$:]
We see that $[[Z = forall dom(D). t/au, Z']]$, satisfying the first
conclusion. The premise of \rul{Zonk\_TyVarRel} tells us
$[[S;P,D |=ty t : k]]$. By assumption, we know that $[[D]]$
and $[[k]]$ cannot refer to $[[au]]$ nor any variables in $[[O']]$.
Thus $[[D = D[Z] ]]$ and $[[k = k[Z] ]]$, and thus we can
conclude $[[S;P,D[Z] |=ty t : k[Z] ]]$ as desired.
\item[Case $[[O = au' :rel forall D'.k', O']]$, with $[[au]] \neq [[au']]$:]
We see that $[[Z = forall dom(D'). t'/au', Z']]$.
Let $[[Z0 = forall dom(D'). t'/au']]$.
We can further see that
$[[au :Rel forall (D[Z0]). (k[Z0]) \in O'[Z0] ]]$ and
$[[S;P |=z Z' : O'[Z0] ]]$.
Because the range of $[[Z]]$ is disjoint from its domain and
the fact that $[[O]]$ is well-scoped, we know $[[O'[Z0] ]]$
must be well-scoped.
We can thus use the induction hypothesis to get $[[t]]$ such that
$[[forall dom(D). t/au \in Z']]$ and $[[S;P,D[Z0][Z'] |=ty t : k[Z0][Z'] ]]$.
Because $[[Z]]$ is idempotent, we can rewrite this as
$[[S;P,D[Z] |=ty t : k[Z] ]]$ as desired.
\end{description}
\item[Case \rul{Zonk\_TyVarIrrel}:]
Like second half of previous case.
\item[Case \rul{Zonk\_CoVar}:]
Like previous case.
\end{description}
\end{proof}

%% \begin{lemma}[Zonking an irrelevant type variable]
%% \label{lem:zonk-irrel-tyvar}
%% If $[[au :Irrel forall D. k \in O]]$, $[[S;P |=z Z : O]]$, no
%% binding in $[[O]]$ refers to a later one, and the range of $[[Z]]$
%% is disjoint from its domain,
%% then there
%% exists $[[t]]$ such that
%% $[[forall dom(D). t/au \in Z]]$ and $[[S;Rel(P,D[Z]) |=ty t : k[Z] ]]$.
%% \end{lemma}

%% \begin{proof}
%% Similar to previous proof.
%% \end{proof}

\begin{lemma}[Zonking a coercion variable]
\label{lem:zonk-covar}
If $[[cu : forall D. phi \in O]]$, $[[S;P |=z Z : O]]$, no
binding in $[[O]]$ refers to a later one, and the range of $[[Z]]$
is disjoint from its domain,
then there
exists $[[g]]$ such that
$[[forall dom(D). g/cu \in Z]]$ and $[[S;P,D[Z] |=co g : phi[Z] ]]$.
\end{lemma}

\begin{proof}
Similar to previous proof.
\end{proof}

\begin{lemma}[Zonking]
\label{lem:zonking}
If $[[Z]]$ is idempotent, $[[S;P |=z Z : O]]$ and $[[S;P,O,D2 |= J]]$, then
$[[S;P,D2[Z] |= J[Z] ]]$.
\end{lemma}

\begin{proof}
By induction on the derivation $[[S;P,O,D2 |= J]]$.

\begin{description}
\item[Case \rul{Ty\_Var}:]
\[
\ottdruleTyXXVar{}
\]
We know $[[S |=ctx P,O,D2]]$ and $[[a :Rel k \in P,O,D2]]$.
We must prove $[[S;P,D2[Z] |=ty a[Z] : k[Z] ]]$.
Zonking a non-unification variable (like $[[a]]$) has no effect, so
we must prove
$[[S;P,D2[Z] |=ty a : k[Z] ]]$.
We will use \rul{Ty\_Var}, so we must prove the following:
\begin{description}
\item[$[[S |=ctx P,D2[Z] ]]$:] By the induction hypothesis.
\item[$[[a :Rel k[Z] \in P,D2[Z] ]]$:] From
$[[a :Rel k \in P,O,D2]]$, we know that $[[a]]$ must appear either
in $[[P]]$ or in $[[D2]]$. If $[[a]]$ is in $[[P]]$, we are done,
using \pref{lem:iscoping} to show that zonking $[[k]]$ has no effect.
If $[[a]]$ is in $[[D2]]$, then $[[a :Rel k[Z] ]]$ must be
in $[[D2[Z] ]]$, and so we are done with this case.
\end{description}
\item[Case \rul{Co\_Var}:]
Similar to previous case.
\item[Case \rul{Ty\_UVar}:]
\[
\ottdruleTyXXUVar{}
\]
We know $[[S;P,O,D2 |=ty au_ps : k[ps/dom(D)] ]]$ and must
prove $[[S;P,D2[Z] |=ty au_ps[Z] : k[ps/dom(D)][Z] ]]$.
We further know that $[[S;P,O,D2 |=vec ps : D]]$
By the induction hypothesis, $[[S;P,D2[Z] |=vec ps[Z] : D[Z] ]]$
and $[[S |=ctx P,D2[Z] ]]$.
There are then several possibilities:
\begin{description}
\item[Case $[[au :Rel forall D. k \in P]]$:]
 By \pref{lem:zonk-dom},
we know that $[[dom(Z) = dom(O)]]$. From $[[S |=ctx P,O,D2]]$
and \pref{lem:iscoping}
we know that nothing in $[[P]]$ can mention any variable bound in $[[O]]$.
We also know that $[[au_ps[Z] = au_{{ps[Z]}}]]$ and $[[k[Z] = k]]$.
The telescope $[[D]]$ is mentioned in $[[P]]$ and therefore is unaffected
by the zonking substitution $[[Z]]$.
We can thus conclude that $[[au:Rel forall D. k \in P,D2[Z] ]]$
and $[[S;P,D2[Z] |=vec ps[Z] : D]]$. We can thus use
\rul{Ty\_UVar} to conclude $[[S;P,D2[Z] |=ty au_{{ps[Z]}} : k[ps[Z]/dom(D)] ]]$. We can rewrite this kind to be
$[[k[ps/dom(D)][Z] ]]$ as desired because $[[k[Z] = k]]$.

\item[Case $[[au :Rel forall D. k \in O]]$:]
We then use
\pref{lem:zonk-rel-tyvar} to get
$[[S;P,D[Z] |=ty t : k[Z] ]]$ and 
$[[forall dom(D). t/au \in Z]]$.
Thus (by \pref{defn:zonking}) $[[au_ps[Z] = t[ps[Z]/dom(D) ] ]]$.
\pref{lem:iweakening} gives us
$[[S;P,D2[Z],D[Z] |=ty t : k[Z] ]]$.
The induction hypothesis tells us that
$[[S;P,D2[Z] |=vec ps[Z] : D[Z] ]]$.
Now, we apply \pref{lem:ivec-subst} to get
$[[S;P,D2[Z] |=ty t[ps[Z]/dom(D)] : k[Z][ps[Z]/dom(D)] ]]$,
which can easily be rewritten to
$[[S;P,D2[Z] |=ty t[ps[Z]/dom(D)] : k[ps/dom(D)][Z] ]]$
as desired.
\end{description}
\item[Case \rul{Co\_UVar}:]
Similar to previous case, but using \pref{lem:zonk-covar}.
\item[Other cases:]
Similar to proof for \pref{lem:ty-subst}.
\end{description}
\end{proof}

\section{Solver}

The solver ($[[|->solv]]$) must have the following properties.

\begin{property}[Solver is sound]
\label{prop:isolv}
If $[[S |=ctx P,O]]$ and
$[[S;P |->solv O ~> D; Z]]$,
then $[[Z]]$ is idempotent, $[[S |=ctx P,D]]$, and $[[S;P,D |=z Z : O]]$.
\end{property}

\section{Supporting functions}

\begin{definition}[$[[make_exhaustive]]$]
Define $[[make_exhaustive(alts;k)]]$ as follows:
\begin{align*}
[[make_exhaustive(alts; k) &= alts]] & ([[(_ -> t) \in alts]]) \\
[[make_exhaustive(alts; k) &= alts; _ -> &error k]]\, \texttt{"failed match"} & \text{(otherwise)}
\end{align*}
\end{definition}

\section{Supporting lemmas}

\begin{lemma}[Vector extension]
\label{lem:vec-ext}
If $[[S;P,D,P' |=vec ps : D']]$, then $[[S;P,D,P' |=vec dom(D),ps: D,D']]$.
\end{lemma}

\begin{proof}
We know $[[S |=ctx P,D,P']]$ by \pref{lem:ictx-reg}.
Proceed by induction on the structure of $[[D]]$.

\begin{description}
\item[Case $[[D = empty]]$:] Trivial.
\item[Case $[[D = a:rel k,D1]]$:]
To use \rul{Vec\_TyRel}, we must show $[[S;P,D,P' |=ty a : k]]$ (which
is by \rul{Ty\_Var}) and $[[S;P,D,P' |=vec dom(D1),ps : (D1,D')[a/a] ]]$.
The substitution clearly has no effect, so we are done by the induction
hypothesis.
\item[Other cases:] Similar.
\end{description}
\end{proof}

\begin{lemma}[Type variables instantiation]
\label{lem:tyvars-inst}
If $[[S |-ctx as :Irrel ks]]$, then $[[S |-ctx bs:Irrel ks[bs/as] ]]$.
\end{lemma}

\begin{proof}
By induction on the length of $[[ks]]$.

\begin{description}
\item[Case $[[ks = empty]]$:] Trivial.
\item[Case $[[ks = ks',k0]]$:] Here, we know $[[as = as',a0]]$ and
$[[bs = bs',b0]]$. Our assumption is that $[[S |-ctx as' :Irrel ks', a0 :Irrel k0]]$.
Inversion (of \rul{Ctx\_TyVar}) gives us $[[S;as':Rel ks' |-ty k0 : Type{}]]$
and $[[S |-ctx as' :Irrel ks']]$. The induction hypothesis tells us
$[[S |-ctx bs':Irrel ks'[bs'/as'] ]]$. We must show
$[[S;bs' :Rel ks'[bs'/as'] |-ty k0[bs'/as'] : Type{}]]$.
Use \pref{lem:weakening} (Weakening) to get
$[[S;bs' :Rel ks'[bs'/as'],as':Rel ks' |-ty k0 : Type{}]]$.
\pref{lem:tel}
gives us $[[S;bs':Rel ks'[bs'/as'] |-vec bs' : (bs' :Rel ks'[bs'/as'])]]$. We can thus use \pref{lem:vec-subst} to get
$[[S;bs' :Rel ks'[bs'/as'] |-ty k0[bs'/as'] : Type{}]]$ as desired.
We then use \rul{Ctx\_TyVar} and we are done.
\end{description}
\end{proof}

\begin{lemma}[Decreasing relevance]
\label{lem:decreasing-rel}
If $[[S |=ctx Rel(P)]]$, then $[[S |=ctx P]]$.
\end{lemma}

\begin{proof}
Straightforward induction on $[[S |=ctx Rel(P)]]$.
\end{proof}

\begin{lemma}[Closing substitution substitution] ~
\label{lem:closing-subst-subst}
\begin{enumerate}
\item If $[[S;G, a:Rel k,G' |-subst theta : D]]$ and $[[S;G |-ty s : k]]$,
then $[[S;G,G'[s/a] |-subst s/a o theta : D[s/a] ]]$.
\item If $[[S;G, a:Irrel k,G' |-subst theta : D]]$ and $[[S;Rel(G) |-ty s : k]]$,
then $[[S;G,G'[s/a] |-subst s/a o theta : D[s/a] ]]$.
\item If $[[S;G, c:phi,G' |-subst theta : D]]$ and $[[S;G |-co g : phi]]$,
then $[[S;G,G'[g/c] |-subst g/c o theta : D[g/c] ]]$
\end{enumerate}
\end{lemma}

\begin{proof}
By induction on the $[[|-subst]]$ derivation. We will consider the
type substitution case; the others are similar.

\begin{description}
\item[Case \rul{Subst\_Nil}:] Trivial.
\item[Case \rul{Subst\_TyRel}:]
In this case, we know $[[S;G,a:rel k,G' |-subst theta : b:Rel k0, D]]$
and must show $[[S;G,G'[s/a] |-subst s/a o theta : b:Rel k0[s/a], D[s/a] ]]$.
Inverting gives us $[[S;G,a:rel k,G' |-ty b[theta] : k0]]$ and
$[[S;G,a:rel k, G' |-subst theta : D[theta \inter b] ]]$.
To use \rul{Subst\_TyRel}, we must show
$[[S;G,G'[s/a] |-ty b[s/a o theta] : k0[s/a] ]]$ and
$[[S;G,G'[s/a] |-subst s/a o theta : D[s/a][(s/a o theta) \inter b] ]]$.
The first of these is directly from the induction hypothesis.
The induction hypothesis also gives us
$[[S;G,G'[s/a] |-subst s/a o theta : D[theta \inter b][s/a] ]]$.
We are left only to show that
$[[D[theta \inter b][s/a] = D[s/a][(s/a o theta) \inter b] ]]$.
On the right, we care only about $[[theta]]$'s action on $[[b]]$, so we
can rewrite to $[[D[s/a][s/a o (theta \inter b)] ]]$, which can then
be rewritten to $[[D[theta \inter b][s/a] ]]$ as desired.
\item[Case \rul{Subst\_TyIrrel}:]
Similar to previous case.
\item[Case \rul{Subst\_Co}:]
Similar to previous case.
\end{description}
\end{proof}

\begin{lemma}[Closing substitution]
\label{lem:closing-subst}
Assume $[[S;G |-subst theta : D]]$. Let $[[theta' = theta \inter dom(D)]]$.
\begin{enumerate}
\item If $[[S;G,D,G' |-ty t : k]]$, then $[[S;G,G'[theta'] |-ty t[theta'] : k[theta'] ]]$.
\item If $[[S;G,D,G' |-co g : phi]]$, then $[[S;G,G'[theta'] |-co g[theta'] : phi[theta'] ]]$.
\item If $[[S;G,D,G' |-prop phi]]$, then $[[S;G,G'[theta'] |-prop phi[theta'] ]]$.
\item If $[[S;G,D,G';s0;t0 |-alt alt : k]]$,
then $[[S;G,G'[theta'];s0[theta'];t0[theta'] |-alt alt[theta'] : k[theta'] ]]$.
\item If $[[S;G,D,G' |-vec ps : D]]$, then
$[[S;G,G'[theta'] |-vec ps[theta'] : D[theta'] ]]$.
\item If $[[S |-ctx G,D,G']]$, then $[[S |-ctx G,G'[theta'] ]]$.
\item If $[[S;G,D,G' |-s t --> t']]$, then $[[S;G,G'[theta'] |-s t[theta'] --> t'[theta'] ]]$.
\end{enumerate}
\end{lemma}

\begin{proof}
By induction on $[[S;G |-subst theta : D]]$. By analogy with the $[[S;P |= J]]$
notation, I will use $[[S;G |- J]]$ to refer collectively to the judgments
over which this lemma is defined.

\begin{description}
\item[Case \rul{Subst\_Nil}:]
In this case, $[[D = empty]]$ and we are done by assumption.
\item[Case \rul{Subst\_TyRel}:]
\[
\ottdruleSubstXXTyRel{}
\]
We know $[[S;G |-subst theta : a:Rel k, D]]$ and $[[S;G,a:Rel k,D,G' |- J]]$.
We must prove $[[S;G |- J[theta \inter a,dom(D)] ]]$.
We know $[[S;G |-ty a[theta] : k]]$ and thus we can use
\pref{lem:ty-subst} to get $[[S;G,D[theta \inter a],G'[theta \inter a] |- J[theta \inter a] ]]$.
We then use the induction hypothesis to get
$[[S;G |- J[theta \inter a][theta \inter dom(D)] ]]$.
It remains only to show that
$[[{theta \inter a} o {theta \inter dom(D)} = theta \inter a,dom(D)]]$.
This amounts to showing that $[[dom(D) # a[theta] ]]$. We have
this by \pref{lem:scoping}, and so we are done.
\item[Case \rul{Subst\_TyIrrel}:]
Similar to previous case.
\item[Case \rul{Subst\_Co}:]
Similar to previous case, referring to \pref{lem:co-subst}.
\end{description}
\end{proof}

\section{Generalization}

\rae{Perhaps move from appendix. Think about reduplicating at-signs.}

\begin{definition}[Generalizer]
\label{defn:generalizer}
A \emph{generalizer} $[[X]]$
is a mapping from unification variables to vectors:
\[
[[X]] \bnfeq [[empty]] \bnfor [[X, au |-> ps]] \bnfor [[X, cu |-> ps]]
\]
A generalizer can be applied postfix as a function. It operates only
on occurrences of unification variables, acting homomorphically on all other
forms:
\[
\begin{array}{r@{\quad}c@{\quad}r@{\;}l}
[[au |-> ps1 \in X]] & \Rightarrow & [[au_ps2[X] &= au_{{ps1,ps2}}]]\\
\text{otherwise} && [[au_ps[X] &= au_{{ps[X]}}]] \\
[[cu |-> ps1 \in X]] & \Rightarrow & [[cu_ps2[X] &= cu_{{ps1,ps2}}]]\\
\text{otherwise} && [[cu_ps[X] &= cu_{{ps[X]}}]]
\end{array}
\]
\end{definition}

\begin{lemma}[Generalization by type variable]
\label{lem:igen-tyvar}
If $[[S;P,D,au :rel forall D'.k,P' |= J]]$,
then
$[[S;P,au :rel forall D,D'.k,D,P'[au |-> dom(D)] |= J[au |-> dom(D)] ]]$.
\end{lemma}

\begin{proof}
Let $[[X = au |-> dom(D)]]$.
Proceed by induction on the typing derivation.
The only interesting case is for unification variables:
\begin{description}
\item[Case \rul{Ty\_UVar}:]
Here, we know $[[S;P,D,au:rel forall D'.k,P' |=ty bu_ps : k0]]$
and must show $[[S;P,au :rel forall D,D'.k, D, P'[X] |=ty bu_ps[X] : k0[X] ]]$.
We have two cases:
\begin{description}
\item[Case $[[au = bu]]$:]
In this case, we know $[[rel = Rel]]$ and $[[k0 = k[ps/dom(D')] ]]$.
In order to use \rul{Ty\_UVar}, we must show
$[[S |=ctx P,au:Rel forall D,D'.k, D, P'[X] ]]$ (which we get from the
induction hypothesis) and 
$[[S;P,au :Rel forall D,D'.k, D, P'[X] |=vec dom(D),ps : D,D']]$.
We know $[[S;P,D,au :rel forall D'.k, P' |=vec ps : D']]$.
The induction hypothesis tells us that
$[[S;P,au :rel forall D,D'.k, D, P'[X] |=vec ps[X] : D'[X] ]]$.
However, we can see (\pref{lem:iscoping}) that $[[D'[X] = D]]$.
Then, \pref{lem:vec-ext} tells us
$[[S;P,au :rel forall D,D'.k, D, P'[X] |=vec dom(D),ps[X] : D,D']]$
as desired. Rule \rul{Ty\_UVar} gives us
$[[S;P,au :rel forall D,D'.k, D, P'[X] |=ty au_{{dom(D),ps[X]}} : k[dom(D),ps/dom(D,D')] ]]$. Indeed we can rewrite the kind as
$[[k[ps/dom(D')] ]]$ and we are done.
\item[Case $[[au]] \neq [[bu]]$:]
As with other substitution properties, we must break into cases depending
on where $[[bu]]$ is, but all cases are straightforwardly shown by
the induction hypothesis.
\end{description}
\item[Case \rul{Co\_UVar}:]
Similar to non-matching sub-case of previous case.
\end{description}
\end{proof}

\begin{lemma}[Generalization by coercion variable]
\label{lem:igen-covar}
If $[[S;P,D,cu : forall D'.phi,P' |= J]]$,
then
$[[S;P,cu : forall D,D'.phi,D,P'[cu |-> dom(D)] |= J[cu |-> dom(D)] ]]$.
\end{lemma}

\begin{proof}
Similar to previous proof.
\end{proof}

\begin{lemma}[Generalizer scope]
\label{lem:gen-scope}
If $[[O +> D ~> O';X]]$, then $[[dom(X) = dom(O)]]$.
\end{lemma}

\begin{proof}
Straightforward induction on $[[O +> D ~> O';X]]$.
\end{proof}

\begin{lemma}[Generalization]
\label{lem:igen}
If $[[O +> D ~> O'; X]]$ and $[[S;P,D,O |= J]]$,
then $[[S;P,O',D |= J[X] ]]$.
\end{lemma}

\begin{proof}
By induction on $[[O +> D ~> O'; X]]$.

\begin{description}
\item[Case \rul{IGen\_Nil}:]
By assumption.
\item[Case \rul{IGen\_TyVar}:]
Here, we know $[[O = au :rel forall D'. k, O1]]$
and $[[O' = au :rel forall D,D'.k, O1']]$.
Let $[[X0 = au |-> dom(D)]]$.
The first step is to show
$[[S;P,au:rel forall D,D'.k,D,O1[X0] |= J[X0] ]]$.
This is true by \pref{lem:igen-tyvar}.
We know $[[O1[X0] +> D ~> O1' ; X1]]$.
We then use the induction hypothesis to get
$[[S;P,au:rel forall D,D'.k, O1',D |= J[X0][X1] ]]$.
However, because the domains of $[[X0]]$ and $[[X1]]$ are distinct
(by the well-formedness of $[[O]]$), we can rewrite as
$[[S;P,O',D |= J[X] ]]$ as desired.
\item[Case \rul{IGen\_CoVar}:]
Similar to previous case, appealing to \pref{lem:igen-covar}.
\end{description}
\end{proof}

\section{Soundness}
\label{sec:app-inference-soundness}

\begin{lemma}[Instantiation]
\label{lem:iinst}
If $[[S;P |=ty t : k]]$ and $[[|->inst_vis k ~> ps; k' -| O]]$,
then $[[S;P,O |=ty t ps : k']]$ and $[[k']]$ is not a $\Pi$-type
with a binder (with visibility $[[vis2]]$) such that $[[vis2 <= vis]]$.
\end{lemma}

\begin{proof}
Let's call the condition on the visibility of the binder (if any)
of the result kind the \emph{visibility condition}. Proceed
by induction on the derivation of the $[[|->inst]]$ judgment.

\begin{description}
\item[Case \rul{IInst\_Rel}:]
\[
\ottdruleIInstXXRel{}
\]
We must show that $[[S;P,au:Rel forall{}.k1,O |=ty t au_{} ps : k2']]$ and that
$[[k2']]$ satisfies the visibility condition. We can assume that
$[[S;P |=ty t : PI_vis2 a:Rel k1. k2]]$.
By inversion by \rul{Ty\_Pi}, \pref{lem:ictx-reg}, and \pref{lem:ityvar-reg},
we can see that $[[S;Rel(P) |=ty k1 : Type{}]]$. Thus
$[[S |=ctx P,au:Rel forall{}.k1]]$ and \pref{lem:iweakening} gives us
$[[S;P,au:Rel forall{}.k1 |=ty t : PI_vis2 a:Rel k1. k2]]$.
Thus, \rul{Ty\_AppRel} gives us $[[S;P,au:Rel forall{}.k1 |=ty t au_{} : k2[au_{}/a] ]]$.
The induction hypothesis then
tells us that $[[S;P,au:Rel forall{}.k1,O |=ty t au_{} ps : k2']]$ and gives us the
visibility condition, as desired.
\item[Case \rul{IInst\_Irrel}:]
Like previous case.
\item[Case \rul{IInst\_Co}:]
Like previous cases, but appealing to \pref{lem:icovar-reg} instead
of \pref{lem:ityvar-reg}.
\item[Case \rul{IInst\_Done}:]
The typing rule is by assumption. The visibility condition is by the
fact that no previous rule in the judgment applied.
\end{description}
\end{proof}

\begin{lemma}[Function position]
\label{lem:ifun}
If $[[S;P |=ty k : Type{}]]$ and $[[|->fun k; rel1 ~> g; PI; a; rel2; k1; k2 -| O]]$,
then $[[S;P,O |=co g : k [Type{}]~[Type{}] PI_Req a:rel2 k1.k2]]$.
\end{lemma}

\begin{proof}
By case analysis on the derivation of $[[|->fun]]$.

\begin{description}
\item[Case \rul{IFun\_Id}:]
\[
\ottdruleIFunXXId{}
\]
Let $[[k = PI_Req a:rel k1. k2]]$.
We know $[[S;P |=ty k : Type{}]]$
and thus $[[S;P |=co <k> : k [Type{}]~[Type{}] k]]$ as desired.
\item[Case \rul{IFun\_Cast}:]
\[
\ottdruleIFunXXCast{}
\]
Let $[[P0 = P,bu1:Irrel forall{}.Type{},bu2:Irrel forall{}.Type{}]]$ and
$[[P1 = P0,cu: forall{}. k0 [Type{}]~[Type{}] UPI_Req a:rel bu1_{}.bu2_{}]]$.
We first must show $[[S |=ctx P']]$. We know $[[S |=ctx P]]$ by \pref{lem:ictx-reg}.
Adding $[[bu1]]$ and $[[bu2]]$ to $[[P]]$ maintains well-formedness; thus
$[[S |=ctx P0]]$. In order
to add the binding for $[[cu]]$, we must show that
$[[S;Rel(P0) |=ty k0 : Type{}]]$ and $[[S;Rel(P0) |=ty UPI_Req a:rel bu1_{}.bu2_{} : Type{}]]$.
The former is by assumption.
The latter comes from $[[S |=ctx P0]]$, two uses of \rul{Ty\_UVar}, and
a use of \rul{Ty\_Pi}. Thus $[[S |=ctx P1]]$
and
$[[S;P1 |=co cu_{} : k0 [Type{}]~[Type{}] UPI_Req a:rel bu1_{}.bu2_{}]]$ as desired.
\end{description}
\end{proof}

\begin{lemma}[Scrutinee position]
\label{lem:iscrut}
If $[[S;P |=ty t : k]]$ and $[[S;P |->scrut _alts; k ~> g; D; H'; ts -| O]]$,
then $[[S;P,O |=ty t |> g : MPI D. H'{} ts]]$ and
$[[S;Rel(P,O) |=ty H'{} ts : Type{}]]$.
\end{lemma}

\begin{proof}
By case analysis on the derivation for the $[[|->scrut]]$ judgment.

\begin{description}
\item[Case \rul{IScrut\_Id}:]
\[
\ottdruleIScrutXXId{}
\]
Let $[[k = MPI D. H{} ts]]$.
Working backwards from a use of \rul{Ty\_Cast}, we need to show
that $[[S;Rel(P) |=co <k> : k [Type{}]~[Type{}] k]]$, and thus that
$[[S;Rel(P) |=ty k : Type{}]]$. This comes directly from \pref{lem:ikind-reg}.
The second conclusion is assumed as a premise of \rul{IScrut\_Id}.
\item[Case \rul{IScrut\_Cast}:]
\[
\ottdruleIScrutXXCast{}
\]
Let $[[P0 = P,aus :Irrel forall{}.ks[aus_{}/as] ]]$ and $[[P1 = P0,cu:forall{}.k [Type{}]~[Type{}] H'{} aus_{}]]$.
We must first show that $[[S |=ctx P0]]$.
We know $[[|-sig S]]$ (by \pref{lem:ictx-reg}). \pref{lem:tycon-tel} tells
us $[[S |-ctx as :Irrel ks]]$. \pref{lem:tyvars-inst} and \pref{lem:extension}
then tell us
$[[S |=ctx aus :Irrel forall{}.ks[aus_{}/as] ]]$. We have $[[S |=ctx P]]$ by \pref{lem:ictx-reg}
and thus can use \pref{lem:iweakening} $[[S |=ctx P0]]$ as desired.
To show $[[S |=ctx P1]]$, we must now show that
$[[S;P0 |=ty k : Type{}]]$ and $[[S;P0 |=ty H'{} aus_{} : Type{}]]$.
The former is by \pref{lem:ikind-reg} and \pref{lem:iweakening}.
For the latter: use \pref{lem:tycon-kind} and \pref{lem:iweakening}
to see that
$[[S;P0 |=ty MPI as:Irrel ks, D2. H'{} as : Type{}]]$.
Repeated inversion on \rul{Ty\_Pi} tells us
$[[S;P0,as:Irrel ks, D2 |=ty H'{} as : Type{}]]$.
\pref{lem:istrengthening} gives us $[[S;P0,as:Irrel ks |=ty H'{} as : Type{}]]$.
\pref{lem:tel} tells us that $[[S;P0 |=vec aus_{} : (aus :Irrel forall{}.ks[aus_{}/as])]]$.
We thus use \pref{lem:ivec-subst} to see that $[[S;P0 |=ty H'{} aus_{} : Type{}]]$
as desired.
We can thus conclude $[[S |=ctx P1]]$ by \rul{Ctx\_UCoVar}.
We are done with the first conclusion by \rul{Ty\_Cast} and \rul{Co\_Var}.
We get the second conclusion easily by noting that $[[D = empty]]$ and
by \pref{lem:ikind-reg}.
\end{description}
\end{proof}

\begin{lemma}[$[[make_exhaustive]]$]
\label{lem:make-exh}
Assume that, $\forall i$, $[[S;P;MPI D.H{} ss;t |=alt alti : k]]$ and
$[[alts' = make_exhaustive(alts; k)]]$. Furthermore, assume no pattern
appears twice in $[[alts]]$. Then $\forall j$,
$[[S;P;MPI D.H{} ss;t |=alt altj' : k]]$ and $[[alts' are exhaustive for H (wrt S)]]$.
\end{lemma}

\begin{proof}
If there is a default pattern in $[[alts]]$, then $[[make_exhaustive]]$ does
nothing. In this case, the default pattern makes the $[[alts]]$ exhaustive.
We have already assumed they are unique.

Otherwise, $[[make_exhaustive]]$ adds a default. Assuming
$[[&error :Rel UPI (a :Irrel Type{}), (b :Rel &String{}). a]]$,
we have $\forall j$, $[[S;P;MPI D.H{} ss; t |=alt altj' : k]]$, and indeed
the alternatives are now exhaustive.
\end{proof}

\begin{lemma}[Prenex]
\label{lem:ipre}
If $[[S;Rel(P) |=ty k : Type{}]]$ and
$[[|->pre k ~> D; k'; t]]$, then
$[[S;P |=ty t : UPI x:Rel (UPI D. k'). k]]$.
\end{lemma}

\begin{proof}
By induction on the $[[|->pre]]$ judgment.

\begin{description}
\item[Case \rul{IPrenex\_Invis}:]
\[
\ottdruleIPrenexXXInvis{}
\]
We know $[[S;Rel(P) |=ty UPI_vis d.k2 : Type{}]]$.
Inversion gives us $[[S;Rel(P,d) |=ty k2 : Type{}]]$.
The induction hypothesis thus tells us that
$[[S;P,d |=ty t : UPI x2:Rel (UPI D.k2'). k2]]$.
Let $[[P' = P,x:Rel (UPI d,D. k2'),d]]$. We need
$[[S |=ctx P']]$, for which we need
$[[S;Rel(P) |=ty UPI d,D.k2' : Type{}]]$, which can
be proved by inversions and \rul{Ty\_Pi}.
We thus have $[[S |=ctx P']]$.
We now show that $[[S;P' |=ty t (x dom(d)) : k2]]$.
First, we note that $[[S;P' |=ty x dom(d) : UPI D.k2']]$
by the appropriate application rule. (It depends on the
relevance of $[[d]]$.) There is no substitution in the kind, because
we are applying to $[[dom(d)]]$. Thus
$[[S;P' |=ty t (x dom(d)) : k2[x dom(d)/x2] ]]$ by \rul{Ty\_AppRel}.
However, we know $[[x2 # k2]]$ by \pref{lem:iscoping} and so we
are done by two uses of \rul{Ty\_Lam}.
\item[Case \rul{IPrenex\_Vis}:]
\[
\ottdruleIPrenexXXVis{}
\]
We know $[[S;Rel(P) |=ty UPI_Req d.k2 : Type{}]]$.
Inversion gives us $[[S;Rel(P,d) |=ty k2 : Type{}]]$.
The induction hypothesis then gives us
$[[S;P,d |=ty t : UPI x2:Rel (UPI D.k2'). k2]]$.
Let $[[P' = P,x:Rel (UPI D,d.k2'),d]]$.
We need $[[S |=ctx P']]$, for which we need
$[[S;Rel(P) |=ty UPI D,d.k2' : Type{}]]$. This can be
proved by inversions and \rul{Ty\_Pi}.
We thus have $[[S |=ctx P']]$.
We now show that $[[S;P' |=ty t (\D. x dom(D) dom(d)) : k2]]$.
First, we show that $[[S;P',D |=ty x dom(D) dom(d) : k2']]$.
Once we show that $[[S |=ctx P',D]]$ (as can be shown by inversions,
\pref{lem:ictx-reg},
and \pref{lem:iweakening}), then this comes directly from the type
of $[[x]]$. Thus, we can conclude, by repeated use of\rul{Ty\_Lam},
that $[[S;P' |=ty \ D. x dom(D) dom(d) : UPI D.k2']]$.
Accordingly, $[[S;P' |=ty t (\D.x dom(D) dom(d)) : k2[(\D.x dom(D) dom(d))/x2] ]]$,
but the substitution in the kind has no effect by \pref{lem:iscoping}.
We thus have $[[S;P' |=ty t (\D.x dom(D) dom(d)) : k2]]$.
We are done by several uses of \rul{Ty\_Lam}.
\item[Case \rul{IPrenex\_NoPi}:]
\[
\ottdruleIPrenexXXNoPi{}
\]
Assuming $[[S;Rel(P) |=ty k : Type{}]]$, we must show
$[[S;P |=ty \x:Rel k.x : UPI x:Rel k.k]]$.
This is true by straightforward application of typing rules.
\end{description}
\end{proof}

\begin{lemma}[Subsumption] ~
\label{lem:isub}
Assume $[[S;Rel(P) |=ty k1 : Type{}]]$ and $[[S;Rel(P) |=ty k2 : Type{}]]$.
If either
\begin{enumerate}
\item $[[k1 *<= k2 ~> t -| O]]$, OR
\item $[[k1 <= k2 ~> t -| O]]$
\end{enumerate}
Then $[[S;P,O |=ty t : UPI x:Rel k1. k2]]$.
\end{lemma}

\begin{proof}
By mutual induction on the subsumption judgments.

\begin{description}
\item[Case \rul{ISub\_FunRel}:]
\[
\ottdruleISubXXFunRel{}
\]
Our assumption says that
$[[S;Rel(P) |=ty PI a:Rel k1.k2 : Type{}]]$ and
$[[S;Rel(P) |=ty UPI a:Rel k3.k4 : Type{}]]$.
Inversion of \rul{Ty\_Pi} tells us the following:
\begin{itemize}
\item $[[S;Rel(P) |=ty k1 : Type{}]]$
\item $[[S;Rel(P),a:Rel k1 |=ty k2 : Type{}]]$
\item $[[S;Rel(P) |=ty k3 : Type{}]]$
\item $[[S;Rel(P),b:Rel k3 |=ty k4 : Type{}]]$
\end{itemize}
The induction hypothesis then tells us
$[[S;P,O1 |=ty t1 : UPI x1:Rel k3. k1]]$.
\pref{lem:iweakening} gives us $[[S;Rel(P,O1),b:Rel k3,a:Rel k1 |=ty k2 : Type{}]]$.
Rule \rul{Ty\_AppRel} tells us $[[S;P,O1,b:Rel k3 |=ty t1 b : k1[b/x] ]]$,
but \pref{lem:iscoping} tells us that the substitution in the kind has
no effect. We can thus use \pref{lem:ity-subst} to get
$[[S;Rel(P,O1),b:Rel k3 |=ty k2[t1 b/a] : Type{}]]$.
Now, we can use the induction hypothesis again to get
$[[S;P,O1,b:Rel k3,O2 |=ty t2 : UPI x2:Rel k2[t1 b/a]. k4]]$.
\pref{lem:igen} tells us now that
$[[S;P,O1,O2',b:Rel k3 |=ty t2[X] : (UPI x2:Rel k2[t1 b/a]. k4)[X] ]]$,
but \pref{lem:gen-scope} tells us the $[[ [X] ]]$ in the kind has no effect.
Let $[[P' = P,O1,O2',x:Rel (PI a:Rel k1.k2),b:Rel k3]]$.
To show $[[S |=ctx P']]$, we need only show that
$[[S;Rel(P,O1),O2' |=ty PI a:Rel k1.k2 : Type{}]]$ (noting that
\pref{lem:igen} and \pref{lem:ictx-reg} imply $[[S |=ctx P,O1,O2']]$), but this
is true by \pref{lem:iweakening}.
We must now show $[[S;P' |=ty t2[X] (x (t1 b)) : k4]]$.
We've already ascertained that $[[S;P' |=ty t1 b : k1]]$.
We see that $[[S;P' |=ty x (t1 b) : k2[t1 b/a] ]]$.
Thus $[[S;P' |=ty t2[X] (x (t1 b)) : k4[x (t1 b)/x2] ]]$, but
\pref{lem:iscoping} tells us that the substitution in the kind has
no effect. We are thus done by two uses of \rul{Ty\_Lam}.
\item[Case \rul{ISub\_FunIrrelRel}:]
Similar to previous case. Note that $[[b]]$ can be used irrelevantly
even though it is bound relevantly. The opposite way would not work.
\item[Case \rul{ISub\_FunIrrel}:]
Similar to previous case.
\item[Case \rul{ISub\_Unify}:]
\[
\ottdruleISubXXUnify{}
\]
We must show that $[[S;P,cu: forall{}.t1[Type{}]~[Type{}] t2 |=ty \x:Rel t1. (x |> cu_{}) : UPI x:Rel t1. t2]]$. Our last step will be \rul{Ty\_Lam} and thus
we must show
$[[S;P,cu: forall{}. t1[Type{}]~[Type{}] t2, x :Rel t1 |=ty x |> cu_{} : t2]]$,
for which we only need show that
$[[S |=ctx P,cu : forall{}. t1 [Type{}]~[Type{}] t2]]$, for which we only need show that
$[[S;Rel(P) |=ty t1 : Type{}]]$ and $[[S;Rel(P) |=ty t2 : Type{}]]$, which
we know by assumption. We are done.
\item[Case \rul{ISub\_DeepSkol}:]
\[
\ottdruleISubXXDeepSkol{}
\]
We must show $[[S;P,O' |=ty \x :Rel k1. t1 (\D. t2[X] (x ps[X])) : UPI x: Rel k1. k2]]$. The last step will be \rul{Ty\_Lam}, so we must show
$[[S;P,O',x:Rel k1 |=ty t1 (\D. t2[X] (x ps[X])) : k2]]$.
From $[[S;Rel(P) |=ty k1 : Type{}]]$, we can use \rul{Ctx\_TyVar} to see
$[[S |=ctx P,x:Rel k1]]$. Thus
$[[S;P,x:Rel k1 |=ty x : k1]]$.
\pref{lem:iinst} then tells us that
$[[S;P,x:Rel k1,O1 |=ty x ps : k1']]$.
We then know (by \pref{lem:ikind-reg}) that
$[[S;Rel(P,x:Rel k1,O1) |=ty k1' : Type{}]]$.
\pref{lem:ipre} tells us that
$[[S;P |=ty t1 : UPI x1:Rel (UPI D. k2'). k2]]$.
\pref{lem:ikind-reg} and
inversion gives
$[[S;Rel(P,D) |=ty k2' : Type{}]]$.
We can then use the induction hypothesis with context
$[[P,x:Rel k1,D,O1]]$ (known well-formed by \pref{lem:iweakening}) to get
$[[S;P,x:Rel k1,D,O1,O2 |=ty t2 : UPI x2:Rel k1'. k2']]$.
\pref{lem:igen} shows that
$[[S;P,x:Rel k1,O',D |=ty t2[X] : (UPI x2:Rel k1'. k2')[X] ]]$.
The kind can be rewritten to $[[UPI x2:Rel (k1'[X]). k2'[X] ]]$
but \pref{lem:gen-scope} tells us that $[[ k2'[X] = k2' ]]$.
We established earlier that $[[S;P,x:Rel k1,O1 |=ty x ps : k1']]$.
We can weaken this to $[[S;P,x:Rel k1,D,O1,O2 |=ty x ps : k1']]$
and then use \pref{lem:igen} to get
$[[S;P,x:Rel k1,O',D |=ty (x ps)[X] : k1'[X] ]]$.
We know that $[[x[X] = x]]$ because $[[x]]$ is just a non-unification
variable.
Rule \rul{Ty\_AppRel} thus gives us
$[[S;P,x:Rel k1,O',D |=ty t2[X] (x ps[X]) : k2'[x ps[X]/x2] ]]$
but \pref{lem:iscoping} tells us that the substitution in the kind has
no effect.
We now use \rul{Ty\_Lam} (repeatedly) to see
$[[S;P,x:Rel k1,O' |=ty \ D. t2[X] (x ps[X]) : UPI D. k2']]$.
Thus \rul{Ty\_AppRel} tells us
$[[S;P,x:Rel k1,O' |=ty t1 (\ D. t2[X] (x ps[X])) : k2[(\ D. t2[X] (x ps[X]))/x1] ]]$,
but \pref{lem:iscoping} tells us that the substitution in the kind
has no effect.
We only need to reshuffle the context; in other words, we must
now show
$[[S |=ctx P,O',x:Rel k1]]$ to be done.
For this to hold, we need to know that none of
$[[O']]$ depend on $[[x]]$.
First, note that $[[x]]$ is local to rule \rul{ISub\_DeepSkol}.
We see that $[[D]]$ is produced by $[[|->pre]]$ with no
mention of $[[x]]$, $[[O1]]$ is produced by $[[|->inst]]$ with no mention of
$[[x]]$, and $[[O2]]$ is produced by $[[*<=]]$ with no mention of
$[[x]]$.
Therefore,
$[[x]]$ is not mentioned in any of these, and we are done.
\end{description}
\end{proof}

\begin{lemma}[Type elaboration is sound] ~
\label{lem:isound}
\begin{enumerate}
\item If any of the following:
\begin{enumerate}
\item $[[S |=ctx P]]$ and $[[S;P |->ty _t ~> t : k -| O]]$, OR
\item $[[S |=ctx P]]$ and $[[S;P *|->ty _t ~> t : k -| O]]$, OR
\item $[[S;Rel(P) |=ty k : Type{}]]$ and $[[S;P |->ty _t : k ~> t -| O]]$, OR
\item $[[S;Rel(P) |=ty k : Type{}]]$ and $[[S;P *|->ty _t : k ~> t -| O]]$
\end{enumerate}
Then $[[S;P,O |=ty t : k]]$.
\item
If $[[S |=ctx P]]$ and $[[S;P |->pt _s ~> s -| O]]$,
then $[[S;Rel(P,O) |=ty s : Type{}]]$.
\item
If $[[S;P |=ty t1 : PI_vis a:rel k1.k2]]$
and $[[S;P;rel *|->arg _t2 : k1 ~> p2; t2 -| O]]$,
then $[[S;P,O |=ty t1 p2 : k2[t2/a] ]]$.
\item
If $[[S;Rel(P) |=ty k : Type{}]]$,
$[[S;P |=ty t0 : MPI D. H{} ts]]$,
$[[S;Rel(P) |=ty H{} ts : Type{}]]$, and
$[[S;P;MPI D.H{} ts;t0 |->alt _alt : k ~> alt -| O]]$, then
$[[S;P,O;MPI D.H{} ts;t0 |=alt alt : k]]$.
\item
If $[[S;Rel(P) |=ty k : Type{}]]$,
$[[S;P |=ty t0 : MPI D. H{} ts]]$, 
$[[S;Rel(P) |=ty H{} ts : Type{}]]$,
and
$[[S;P;k0;t0 |->altc _alt : k ~> alt -| O]]$, then
$[[S;P,O;k0;t0 |=alt alt : k]]$.
\item
If $[[S |=ctx P]]$ and $[[S;P |->q _qvar ~> a : k; vis -| O]]$,
then $[[S;Rel(P,O) |=ty k : Type{}]]$.
\item
If $[[S |=ctx P]]$ and $[[S;P |->aq _aqvar ~> a : k -| O]]$,
then $[[S;Rel(P,O) |=ty k : Type{}]]$.
\item
If $[[S;P |=ty t0 : k]]$ and $[[S;P |->aq _aqvar : k ~> a : k'; x.t -| O]]$,
then $[[S;P,O |=ty t[t0/x] : k']]$.
\end{enumerate}
\end{lemma}

\begin{proof}
Proceed by induction on the structure of the type inference derivation.

\begin{description}
\item[Case \rul{ITy\_Inst}:]
\[
\ottdruleITyXXInst{}
\]
The induction hypothesis gives us $[[S;P,O1 |=ty t : k]]$.
\pref{lem:iinst} then gives us $[[S;P,O1,O2 |=ty t ps : k']]$ as
desired.
\item[Case \rul{ITy\_Var}:]
By \rul{Ty\_Var} and \pref{lem:iinst}.
\item[Case \rul{ITy\_App}:]
\[
\ottdruleITyXXApp{}
\]
The induction hypothesis tells us that
$[[S;P,O1 |=ty t1 : k0]]$. Thus $[[S;Rel(P,O1) |=ty k0 : Type{}]]$
by \pref{lem:ikind-reg}.
\pref{lem:ifun} tells us that
$[[S;Rel(P,O1,O2) |=co g : k0 [Type{}]~[Type{}] PI_Req a:rel k1.k2]]$.
Rule \rul{Ty\_Cast}
gives us $[[S;P,O1,O2 |=ty t1 |> g : PI_Req a:rel k1.k2]]$.
Another use of the induction hypothesis (for the $[[*|->arg]]$ premise)
gives us our desired outcome.
\item[Case \rul{ITy\_AppSpec}:]
By induction.
\item[Case \rul{ITy\_Annot}:]
By induction.
\item[Case \rul{ITy\_Case}:]
\[
\ottdruleITyXXCase{}
\]
The induction hypothesis tells us that
$[[S;P,O0 |=ty t0 : k0]]$.
\pref{lem:iscrut} tells us that $[[S;P,O0,O0' |=ty t0 |> g : MPI D. H'{} ts]]$
and $[[S;Rel(P,O0,O0') |=ty H'{} ts : Type{}]]$.
Rule \rul{Ctx\_UTyVar} gives us $[[S |=ctx O']]$.
The induction hypothesis (for $[[|->alt]]$) tells us that, $\forall i$,
$[[S;P,O',Oi;MPI D. H'{} ts; t0 |> g |=alt alti : au_{} ]]$.
\pref{lem:make-exh} then tells us that $[[alts']]$ are well-formed and
exhaustive. \pref{lem:iweakening} (and \pref{lem:ictx-reg} on the $[[|=alt]]$
judgments) allows us to combine all the $[[Oi]]$ into
$[[Os]]$. We are done by \rul{Ty\_Case}.

\item[Case \rul{ITy\_Lam}:]
\[
\ottdruleITyXXLam{}
\]
The induction hypothesis (on $[[|->q]]$) tells us that
$[[S;Rel(P,O1) |=ty k1 : Type{}]]$.
Thus $[[S |=ctx P,O1,a:Rel k1]]$ and we can use the induction
hypothesis to get
$[[S;P,O1,a:Rel k1,O2 |=ty t : k2]]$.
By \pref{lem:igen}, we get $[[S;P,O1,O2',a:Rel k1 |=ty t[X] : k2[X] ]]$
and thus
$[[S;P,O1,O2' |=ty \ a:Rel k1. (t[X]) : UPI_vis a:Rel k1. (k2[X])]]$
as desired.

\item[Case \rul{ITy\_LamIrrel}:]
Like previous case.
\item[Case \rul{ITy\_Arrow}:]
By induction and \pref{lem:iweakening}
\item[Case \rul{ITy\_MArrow}:]
By induction and \pref{lem:iweakening}
\item[Case \rul{ITy\_Fix}:]
\[
\ottdruleITyXXFix{}
\]
The induction hypothesis gives us $[[S;P,O1 |=ty t : k]]$
and thus $[[S;Rel(P,O1) |=ty k : Type{}]]$ by \pref{lem:ikind-reg}.
\pref{lem:ifun} gives us
$[[S;Rel(P,O1,O2) |=co g : k [Type{}]~[Type{}] UPI_Req a :Rel k1. k2]]$
and then \rul{Ty\_Cast} tells us
$[[S;P,O1,O2 |=ty t |> g : UPI_Req a :Rel k1. k2]]$.
Thus, \pref{lem:ictx-reg} tells us $[[S |=ctx P,O1,O2]]$.
In order to prove $[[S |=ctx O]]$, we must show
$[[S;Rel(P,O1,O2) |=ty k2 : Type{}]]$ and
$[[S;Rel(P,O1,O2) |=ty k1 : Type{}]]$.
The first of these is a premise to \rul{ITy\_Fix}.
To get the second, we use \pref{lem:ikind-reg} to get
$[[S;Rel(P,O1,O2) |=ty UPI_Req a :Rel k1. k2 : Type{}]]$
and then invert.
We can conclude $[[S |=ctx O]]$ by \rul{Ctx\_UCoVar}.

Inversion on $[[S;P,O1,O2 |=ty t |> g : UPI_Req a:Rel k1. k2]]$
tells us that
$[[S;Rel(P,O) |=co g : k [Type{}]~[Type{}] UPI_Req a:Rel k1. k2]]$.
We can further see (by \rul{Co\_PiTy}) that
$[[S;Rel(P,O) |=co UPI a:Rel <k1>.cu_{} : (UPI a:Rel k1. k2) [Type{}]~[Type{}] (UPI a:Rel k1. (k1[a |> sym <k1>/a]))]]$
However, because $[[a # k1]]$ (by \pref{lem:iscoping}),
that last substitution has no effect, and so
we conclude
$[[S;Rel(P,O) |=co UPI a:Rel <k1>.cu_{} : (UPI a:Rel k1. k2) [Type{}]~[Type{}] (UPI a:Rel k1. k1)]]$
and thus
$[[S;P,O |=ty t |> (g ;; UPI a:Rel <k1>. cu_{}) : UPI a:Rel k1. k1]]$.
Finally, \rul{Ty\_Fix} gives us
$[[S;P,O |=ty fix (t |> (g ;; UPI a:Rel <k1>. cu_{})) : k1]]$ as desired.

\item[Case \rul{ITy\_Let}:]
\[
\ottdruleITyXXLet{}
\]
The induction hypothesis gives us
$[[S;P,O |=ty t1 : k1]]$. \pref{lem:ikind-reg} tells us
$[[S;Rel(P,O) |=ty k1 : Type{}]]$ and thus that
$[[S |=ctx P,O,x:Rel k1]]$.
Another use of the induction hypothesis gives us
$[[S;P,O,x:Rel k1,O2 |=ty t2 : k2]]$.
\pref{lem:igen} then gives us
$[[S;P,O,O2',x:Rel k1 |=ty t2[X] : k2[X] ]]$ and thus
$[[S;P,O,O2' |=ty \ x:Rel k1. (t2[X]) : UPI x:Rel k1. (k2[X]) ]]$
Rule \rul{Ty\_AppRel} gives us
$[[S;P,O,O2' |=ty (\x :Rel k1. (t2[X])) t1 : k2[X][t1/x] ]]$ as desired.

\item[Case \rul{ITyC\_Case}:]
Similar to the case for \rul{ITy\_Case}. The only differences are the
definition of $[[O']]$ (which is simpler in this case) and the
use of $[[|->altc]]$ in place of $[[|->alt]]$. Both $[[|->alt]]$ and
$[[|->altc]]$ are proven sound via the induction hypothesis.

\item[Case \rul{ITyC\_LamDep}:]
\[
\ottdruleITyCXXLamDep{}
\]
We have assumed $[[S;Rel(P) |=ty k : Type{}]]$ and thus can use
\pref{lem:ifun} to get
$[[S;Rel(P,O0) |=co g : k [Type{}]~[Type{}] UPI_Req a:Rel k1. k2]]$.
(The $[[a /# k2]]$ premise is not used in this rule; it is used to filter
out which cases are handled in the
next one.)
By \pref{lem:ictx-reg}, we have
$[[S |=ctx Rel(P)]]$ and thus can use the induction hypothesis to get
$[[S;Rel(P,O1) |=ty k1' : Type{}]]$.
We must now prove that
$[[S;Rel(P,O),b:Rel k1' |=ty k2[b |> sym cu_{}/a] : Type{}]]$.
First, we prove that $[[S |=ctx Rel(P,O),b:Rel k1']]$.
For this, it is left to prove only that $[[S;Rel(P,O0,O1) |=ty k1 : Type{}]]$.
This we can get from \pref{lem:iprop-reg}, inversion of \rul{Ty\_Pi},
and \pref{lem:ityvar-reg}.
The inversion of \rul{Ty\_Pi} also tells us that
$[[S;Rel(P,O0),a:Rel k1 |=ty k2 : Type{}]]$.
\pref{lem:iweakening} allows us to weaken this to
$[[S;Rel(P,O),b:Rel k1',a:Rel k1 |=ty k2 : Type{}]]$.
We can see that $[[S;Rel(P,O),b:Rel k1' |=ty b |> sym cu_{} : k1]]$.
We thus use \pref{lem:ity-subst} to get
$[[S;Rel(P,O),b:Rel k1' |=ty k2[b |> sym cu_{}/a] : Type{}]]$ as desired.
We then use the induction hypothesis to get
$[[S;P,O,b:Rel k1',O2 |=ty t : k2[b |> sym cu_{}/a] ]]$.
\pref{lem:igen} allows us to rewrite this to
$[[S;P,O,O2',b:Rel k1' |=ty t[X] : k2[b |> sym cu_{}/a][X] ]]$,
but \pref{lem:gen-scope} tells us the $[[ [X] ]]$ in the kind has no effect.
\pref{lem:iweakening} allows us to weaken this to
$[[S;P,O,O2',a:Rel k1,b:Rel k1' |=ty t[X] : k2[b |> sym cu_{}/a] ]]$.
We can see that
$[[S;P,O,O2',a:Rel k1 |=ty a |> cu_{} : k1']]$ and thus
we can use \pref{lem:ity-subst} to get
$[[S;P,O,O2',a:Rel k1 |=ty t[X][a |> cu_{}/b] : k2[b |> sym cu_{}/a][a |> cu_{}/b] ]]$.
Inlining substitutions, we can rewrite the kind to
$[[k2[(a |> cu_{}) |> sym cu_{}/a] ]]$.
We can then see that
$[[S;P,O,O2',a:Rel k1 |=ty t[X][a |> cu_{}/b] |> h : k2]]$ and by
\rul{Ty\_Lam} that
$[[S;P,O,O2' |=ty \ a:Rel k1. (t[X][a |> cu_{}/b] |> h) : UPI a :Rel k1. k2]]$.
A use of \rul{Ty\_Cast} gives us
$[[S;P,O,O2' |=ty (\ a:Rel k1. (t[X][a |> cu_{}/b] |> h)) |> sym g : k]]$
as desired.

\item[Case \rul{ITyC\_Lam}:]
\[
\ottdruleITyCXXLam{}
\]
\pref{lem:ifun} tells us
$[[S;Rel(P,O0) |=co g : k [Type{}]~[Type{}] UPI_Req a:Rel k1. k2]]$.
\pref{lem:iprop-reg} and inversions tell us
$[[S;Rel(P,O0) |=ty k1 : Type{}]]$ and
$[[S;Rel(P,O0),a:Rel k1 |=ty k2 : Type{}]]$.
We can conclude $[[S |=ctx Rel(P,O0),a:Rel k1]]$ and thus (using
\pref{lem:decreasing-rel})
$[[S;P,O0,a:Rel k1 |=ty a : k1]]$.
The induction hypothesis on $[[|->aq]]$ then tells us
$[[S;P,O0,a:Rel k1,O1 |=ty t1[a/x] : k1']]$.
We can see by the construction of $[[O1]]$ and $[[k1']]$
that $[[a # O1]]$ and $[[a # k1']]$.
Because we are in rule \rul{ITyC\_Lam}, it means that
\rul{ITyC\_LamDep} does not apply. This can be for one of two reasons,
and thus we now have two cases:
\begin{description}
\item[Case $[[_aqvar = a]]$ (unannotated binder):]
In this case, we see (by \rul{IAQVarC\_Var}) that $[[k1' = k1]]$.
We can choose $[[a = b]]$ by the $\alpha$-renaming.
Thus, $[[S;Rel(P,O0),b:Rel k1' |=ty k2 : Type{}]]$.
\item[Case $[[a # k2]]$:]
We now use \pref{lem:istrengthening} to get
$[[S;Rel(P,O0) |=ty k2 : Type{}]]$.
\end{description}
Regardless of which case above we are in,
we now must prove $[[S |=ctx P,O0,O1,b:Rel k1']]$. To do this, we must
show only that $[[S;Rel(P,O0,O1) |=ty k1' : Type{}]]$, which comes
from \pref{lem:ikind-reg} and \pref{lem:istrengthening}.
We can then use \pref{lem:iweakening} to get
$[[S;Rel(P,O0,O1),b:Rel k1' |=ty k2 : Type{}]]$.
The induction hypothesis now applies to get
$[[S;P,O0,O1,b:Rel k1',O2 |=ty t : k2]]$.
\pref{lem:igen} tells us
$[[S;P,O0,O1,O2',b:Rel k1' |=ty t[X] : k2[X] ]]$, but
\pref{lem:gen-scope} tells us the $[[ [X] ]]$ in the kind has no effect.
\pref{lem:iweakening} gives us
$[[S;P,O0,a:Rel k1,O1,O2',b:Rel k1' |=ty t[X] : k2]]$.
We can thus use \pref{lem:ity-subst} to get
$[[S;P,O0,a:Rel k1,O1,O2' |=ty t[X][t1[a/x]/b] : k2[t1[a/x]/b] ]]$,
but \pref{lem:iscoping} tells us the substitution in the kind has
no effect.
Noting that, by analysis stemming from our two cases previously, $[[a # O2']]$,
we can reshuffle
the context to be
$[[P,O0,O1,O2',a:Rel k1]]$ and thus conclude
$[[S;P,O0,O1,O2' |=ty \ a:Rel k1. t[X][t1[a/x]/b] : UPI a:Rel k1. k2]]$.
Thus \rul{Ty\_Cast} gives us
$[[S;P,O0,O1,O2' |=ty (\ a:Rel k1. t[X][t1[a/x]/b]) |> sym g : k]]$ as desired.
\item[Case \rul{ITyC\_LamIrrelDep}:]
Like case for \rul{ITyC\_LamDep}.
\item[Case \rul{ITyC\_LamIrrel}:]
Like case for \rul{ITyC\_Lam}.
\item[Case \rul{ITyC\_Fix}:]
\[
\ottdruleITyCXXFix{}
\]
We know $[[S;Rel(P) |=ty k : Type{}]]$. We can thus conclude
by \rul{Ty\_Pi} that $[[S;Rel(P) |=ty UPI a:Rel k.k : Type{}]]$.
We thus use the induction hypothesis to get
$[[S;P,O |=ty t : UPI a:Rel k.k]]$.
Thus we are done by \rul{Ty\_Fix}.

\item[Case \rul{ITyC\_Infer}:]
\[
\ottdruleITyCXXInfer{}
\]
The induction hypothesis tells us that
$[[S;P,O |=ty t : k1]]$.
We have assumed $[[S;Rel(P) |=ty k2 : Type{}]]$.
We can thus use \pref{lem:ipre} to get
$[[S;P |=ty t2 : UPI x:Rel (UPI D.k2'). k2]]$.
\pref{lem:ikind-reg} and inversion gives us
$[[S;Rel(P,D) |=ty k2' : Type{}]]$
and thus \pref{lem:ictx-reg} and \pref{lem:decreasing-rel} give us
$[[S |=ctx P,D]]$.
We can thus use \pref{lem:iweakening} to get
$[[S;P,D,O |=ty t : k1]]$
and then
\pref{lem:igen} to get
$[[S;P,O',D |=ty t[X1] : k1[X1] ]]$.
\pref{lem:ikind-reg} tells us $[[S;Rel(P,O',D) |=ty k1[X1] : Type{}]]$
and \pref{lem:iweakening} tells us
$[[S;Rel(P,O',D) |=ty k2' : Type{}]]$.
We can thus use \pref{lem:isub} to get
$[[S;P,O',D,O2 |=ty t2' : UPI x:Rel (k1[X1]). k2']]$.
\pref{lem:igen} then tells us
$[[S;P,O',O2',D |=ty t2'[X2] : (UPI x:Rel (k1[X1]). k2')[X2] ]]$,
but \pref{lem:gen-scope} tells us that the $[[ [X2] ]]$ in the kind
has no effect (because neither $[[k2']]$ nor $[[k1]]$ nor $[[X1]]$ can
mention anything bound in $[[O2]]$).
We thus have
$[[S;P,O',O2',D |=ty t2'[X2] : UPI x:Rel (k1[X1]). k2' ]]$.
\rul{Ty\_AppRel} (with \pref{lem:iweakening}) tells us
$[[S;P,O',O2',D |=ty t2'[X2] t[X1] : k2'[t[X1]/x] ]]$
but \pref{lem:iscoping} tells us that the substitution in the kind has
no effect.
Multiple uses of \rul{Ty\_Lam} gives us
$[[S;P,O',O2' |=ty \ D. t2'[X2] t[X1] : UPI D. k2']]$.
Yet another use of \pref{lem:iweakening} and \rul{Ty\_AppRel} gives us
$[[S;P,O',O2' |=ty t2 (\D. t2'[X2] t[X1]) : k2[\D. t2'[X2] t[X1]/x] ]]$,
where \pref{lem:iscoping} tells us that the substitution in the kind
has no effect. We are thus done.

%% The induction hypothesis tells us that
%% $[[S;P,O |=ty t : k1]]$.
%% We thus know $[[S |=ctx P,O]]$ by \pref{lem:ictx-reg}.
%% \pref{prop:isolv}
%% tells us that $[[S |=ctx P,D]]$ and $[[S;P,D |=z Z : O]]$.
%% \pref{lem:iweakening} gives us
%% $[[S;P,D,O |=ty t : k1]]$.
%% \pref{lem:zonking}
%% then tells us that $[[S;P,D |=ty t[Z] : k1[Z] ]]$.
%% We see from the rule that $[[t' = \D .t[Z] ]]$ and 
%% $[[k1' = UPI_Inf D. k1[Z] ]]$.
%% Thus we can see (by repeated use of \rul{Ty\_Lam})
%% that $[[S;P |=ty t' : k1']]$.
%% Accordingly, \pref{lem:ikind-reg} gives us
%% $[[S;Rel(P) |=ty k1' : Type{}]]$.
%% We have assumed that $[[S;Rel(P) |=ty k2 : Type{}]]$.
%% We thus use \pref{lem:isub} to conclude
%% $[[S;P,O2 |=ty t2 : UPI x:Rel k1'. k2]]$ and then
%% \rul{Ty\_AppRel} to see that
%% $[[S;P,O2 |=ty t2 t' : k2[t'/x] ]]$. We are done,
%% noting that the substitution in the kind has no effect by
%% \pref{lem:iscoping}.

\item[Invisible $\lambda$/$\Lambda$ cases:]
Like corresponding visible $\lambda$/$\Lambda$ cases. Note that the
difference between the $[[|->ty]]$ and $[[*|->ty]]$ checking judgments
is relevant for user-facing issues of type inference (e.g., principal
types), not the soundness we are proving here.

\item[Case \rul{ITyC\_Let}:]
Similar to case for \rul{ITy\_Let}. The only difference is that the
expected type is propagated down.

\item[Case \rul{ITyC\_Skol}:]
\[
\ottdruleITyCXXSkol{}
\]
We have assumed
$[[S;Rel(P) |=ty UPI_vis dollar a:rel k1.k2 : Type{}]]$. Inversion
gives us $[[S;Rel(P),dollar a:Rel k1 |=ty k2 : Type{}]]$, and we can
thus use the induction hypothesis to get
$[[S;P,dollar a :rel k1,O |=ty t : k2]]$.
\pref{lem:igen} tells us
$[[S;P,O',dollar a:rel k1 |=ty t[X] : k2[X] ]]$, but
\pref{lem:gen-scope} tells us that the $[[ [X] ]]$ in the kind has
no effect.
We can thus conclude
$[[S;P,O' |=ty \ dollar a:rel k1 . (t[X]) : UPI_vis dollar a:rel k1.k2 ]]$
as desired.

\item[Case \rul{ITyC\_Otherwise}:]
By induction.

\item[Case \rul{IPtC\_Pi}:]
\[
\ottdruleIPtCXXPi{}
\]
The induction hypothesis (on $[[|->q]]$) tells us
$[[S;Rel(P,O) |=ty k : Type{}]]$. Thus
$[[S |=ctx Rel(P,O,a:rel k)]]$ and we can use the induction hypothesis
(on $[[|->pt]]$) to get $[[S;Rel(P,O,a:rel k,O2) |=ty s : Type{}]]$.
\pref{lem:igen} gives us
$[[S;Rel(P,O,O2',a:rel k) |=ty s[X] : Type{}]]$ and
thus
$[[S;Rel(P,O,O2') |=ty UPI a:rel k. (s[X]) : Type{}]]$ as desired.

\item[Case \rul{IPtC\_Constrained}:]
\[
\ottdruleIPtCXXConstrained{}
\]
\pref{lem:type-in-type}, \pref{lem:iweakening} and \pref{lem:extension} tell us
$[[S;Rel(P) |=ty Type{} : Type{}]]$ and thus we can use the induction
hypothesis on $[[|->ty]]$ to get
$[[S;P,O1 |=ty t : Type{}]]$.
We thus have $[[S |=ctx P,O1,dollar a:Rel t]]$ and can use the induction
hypothesis on $[[|->pt]]$ to get
$[[S;Rel(P,O1,dollar a:Rel t,O2) |=ty s : Type{}]]$.
\pref{lem:igen} gives us
$[[S;Rel(P,O1,O2',dollar a:Rel t) |=ty s[X] : Type{}]]$ and thus
$[[S;Rel(P,O1,O2') |=ty UPI_Inf dollar a:Rel t. (s[X]) : Type{}]]$
as desired.

\item[Case \rul{IPtC\_Mono}:]
By induction.

\item[Case \rul{IArg\_Rel}:]
By induction and straightforward use of typing rules.
\item[Case \rul{IArg\_Irrel}:]
By induction and straightforward use of typing rules.
\item[Case \rul{IAlt\_Con}:]
\[
\ottdruleIAltXXCon{}
\]
We wish to prove
$[[S;P,O';MPI D'. H'{} ts; t0 |=alt H -> \ D3, (c : t0 [MPI D'.H'{} ts]~[MPI D4.H'{} ts] H{ts} xs). (t[X]) : k]]$, given the premises above along with
\begin{itemize}
\item $[[S;Rel(P) |=ty k : Type{}]]$
\item $[[S;P |=ty t0 : MPI D'.H'{} ts]]$
\item $[[S;Rel(P) |=ty H'{} ts : Type{}]]$
\end{itemize}
We will use \rul{Alt\_Match}. This requires the following:
\begin{description}
\item[$[[S |-tc H : D1;D2;H']]$:] This is a premise above.
\item[$[[D3,D4 = D2[ts/dom(D1)] ]]$:] This is a premise above.
\item[$[[dom(D4) = dom(D')]]$:] This is a premise above.
\item[$[[match_{dom(D3)}(types(D4);types(D')) = Just theta]]$:] This is a premise above.
\item[$[[S;P,O' |=ty \ D3, (c : t0 [MPI D'.H'{} ts]~[MPI D4.H'{} ts] H{ts} xs). (t[X]) : MUPI D3, c : t0 [MPI D'.H'{} ts]~[MPI D4.H'{} ts] H{ts} dom(D3). k]]$:]
Let $[[P' = P,O',D3,c: t0 [MPI D'.H'{} ts]~[MPI D4.H'{} ts] H{ts} xs]]$. We
must show only that $[[S;P' |=ty t[X] : k]]$. (Note that $[[dom(D3) = xs]]$,
which is the one discrepancy between the quantified contexts above.)
To use the induction hypothesis on $[[|->ty]]$, we must show
$[[S;Rel(P,D3) |=ty k : Type{}]]$, which means we must show only that
$[[S |=ctx P,D3]]$ and then use \pref{lem:iweakening}.
\pref{lem:tycon-tel} gives us $[[S |-ctx D1,D2]]$ and by \pref{lem:extension},
$[[S |=ctx D1,D2]]$.
\pref{lem:tycon-parent} gives us $[[S |-tc H' : empty;Rel(D1);Type]]$.
 We know $[[S;Rel(P) |=ty H'{} ts : Type{}]]$.
By \pref{lem:tycon-inversion} (easily updated to use $[[|=]]$ judgments),
we can see that $[[S;Rel(P) |=vec ts : Rel(D1)]]$ and thus
\pref{lem:ivec-subst} tells us $[[S |=ctx D2[ts/dom(D1)] ]]$ and
by \pref{lem:ictx-reg} and \pref{lem:iweakening}, $[[S |=ctx P,D3]]$ as
desired.
We have concluded that $[[S;Rel(P,D3) |=ty k : Type{}]]$ and so can
use the induction hypothesis to get
$[[S;P,D3,O |=ty t : k]]$.
\pref{lem:igen} tells us
$[[S;P,O',D3 |=ty t[X] : k[X] ]]$, but \pref{lem:gen-scope} tells us
that the $[[ [X] ]]$ in the conclusion has no effect.
The last step here is to use weakening to add the binding for $[[c]]$ to
the context. This requires proving only that
$[[S;Rel(P,O',D3) |=ty H{ts} xs : MPI D4.H'{} ts]]$.
We can see that $[[S;Rel(P,O',D3) |=ty H{ts} : MPI D3,D4. H'{} ts]]$
by \rul{Ty\_Con}. We are thus done by \pref{lem:tel-app} (easily
updated for $[[|=]]$ judgments).
\end{description}

\item[Case \rul{IAlt\_Default}:]
By induction and \rul{Alt\_Default}.

\item[Case \rul{IAltC\_Con}:]
This case is identical to that for \rul{IAlt\_Con}. The difference is
the assumptions that can be made when solving for the unification variables
in $[[O]]$, which does not affect the course of this proof.

\item[Case \rul{IAltC\_Default}:]
Similar to the case for \rul{IAlt\_Default}.

\item[Case \rul{IQVar\_Req}:]
By induction.

\item[Case \rul{IQVar\_Spec}:]
By induction.

\item[Case \rul{IAQVar\_Var}:]
\[
\ottdruleIAQVarXXVar{}
\]
We must show only that $[[S;Rel(P),bu :Rel forall{}. Type{} |=ty bu_{} : Type{}]]$.
This is true by \rul{Ty\_UVar}.

\item[Case \rul{IAQVar\_Annot}:]
By induction.

\item[Case \rul{IAQVarC\_Var}:]
\[
\ottdruleIAQVarCXXVar{}
\]
Given $[[S;P |=ty t0 : k]]$, we must show
$[[S;P |=ty x[t0/x] : k]]$. By assumption.

\item[Case \rul{IAQVarC\_Annot}:]
\[
\ottdruleIAQVarCXXAnnot{}
\]
Given $[[S;P |=ty t0 : k]]$, we must show
$[[S;P,O1,O2 |=ty (t x)[t0/x] : s]]$, which can be rewritten to
$[[S;P,O1,O2 |=ty t t0 : s]]$.
We know $[[S |=ctx P]]$ by \pref{lem:ictx-reg}. The induction
hypothesis then tells us
$[[S;Rel(P,O1) |=ty s : Type{}]]$.
\pref{lem:ikind-reg} tells us
$[[S;Rel(P) |=ty k : Type{}]]$.
We can thus use \pref{lem:isub} to get
$[[S;P,O1,O2 |=ty  t : UPI x:Rel k.s]]$.
Rule \rul{Ty\_AppRel} gives us
$[[S;P,O1,O2 |=ty t t0 : s[t0/x] ]]$, but \pref{lem:iscoping}
tells us that the substitution in the kind has no effect.
We are done.
\end{description}
\end{proof}

\begin{lemma}[Declarations]
\label{lem:idecl}
If $[[S |-ctx G]]$ and $[[S;G |->decl _decl ~> x : k := t]]$,
then $[[dom(_decl) = x]]$ and $[[S;G |-ty t : k]]$.
\end{lemma}

\begin{proof}
By case analysis on the type inference judgment.

\begin{description}
\item[Case \rul{IDecl\_Synthesize}:]
\[
\ottdruleIDeclXXSynthesize{}
\]
By \pref{lem:extension}, we have $[[S |=ctx G]]$. We then use
\pref{lem:isound} to get $[[S;G,O |=ty t : k]]$. \pref{lem:ictx-reg}
gives us $[[S |=ctx G,O]]$.
\pref{prop:isolv} tells us that $[[Z]]$ is idempotent, that
$[[S |=ctx G,D]]$, and that $[[S;G,D |=z Z : O]]$.
\pref{lem:iweakening} gives us $[[S;G,D,O |=ty t : k]]$.
We can then use \pref{lem:zonking} to get
$[[S;G,D |=ty t[Z] : k[Z] ]]$.
Rule \rul{Ty\_Lam} (used repeatedly) gives us
$[[S;G |=ty t' : k']]$.
\pref{lem:extension} gives $[[S;G |-ty t' : k']]$ as desired.

\item[Case \rul{IDecl\_Check}:]
\[
\ottdruleIDeclXXCheck{}
\]
\pref{lem:extension} provides $[[S |=ctx G]]$. We then use
\pref{lem:isound} to get $[[S;Rel(G,O1) |=ty s : Type{}]]$.
\pref{lem:ictx-reg} gives us $[[S |=ctx Rel(G,O1)]]$.
\pref{prop:isolv} tells us $[[Z1]]$ is idempotent,
$[[S |=ctx Rel(G),D1]]$, and $[[S;Rel(G),D1 |=z Z1 : Rel(O1)]]$.
\pref{lem:iweakening} gives us
$[[S;Rel(G),D1,Rel(O1) |=ty s : Type{}]]$.
\pref{lem:zonking} then says that
$[[S;Rel(G),D1 |=ty s[Z1] : Type{}]]$.
\pref{lem:increasing-rel} gives us
$[[S;Rel(G),Rel(D1) |=ty s[Z1] : Type{}]]$
and thus we can use \rul{Ty\_Pi} repeatedly to get
$[[S;Rel(G) |=ty s' : Type{}]]$.
A second use of \pref{lem:isound} gives us
$[[S;G,O2 |=ty t : s']]$.
A second use of \pref{prop:isolv} tells us
$[[Z2]]$ is idempotent and $[[S;G |=z Z2 : O2]]$.
We can thus use \pref{lem:zonking} once again to tell us
$[[S;G |=ty t[Z2] : s'[Z2] ]]$, except that
\pref{lem:iscoping} tells us that zonking the kind has no effect.
Thus $[[S;G |=ty t' : s']]$,
and \pref{lem:extension} gives us $[[S;G |-ty t' : s']]$ as desired.
\end{description}
\end{proof}

\begin{theorem}[Full program elaboration is sound]
\label{thm:iprog}
If $[[S |-ctx G]]$ and $[[S;G |->prog _prog ~> G'; theta]]$,
then:
\begin{enumerate}
\item $[[S |-ctx G,G']]$
\item $[[S;G |-subst theta : G']]$
\item $[[dom(_prog) \subseteq dom(G')]]$
\end{enumerate}
\end{theorem}

\begin{proof}
By induction on the type inference judgment.

\begin{description}
\item[Case \rul{IProg\_Nil}:]
Trivial.
\item[Case \rul{IProg\_Decl}:]
\[
\ottdruleIProgXXDecl{}
\]
\pref{lem:idecl} tells us that
$[[x = dom(_decl)]]$ and $[[S;G |-ty t : k]]$.
We must show
$[[S |-ctx G, x:Rel k, c : x [k]~[k] t]]$. To do this, we need only
$[[S;Rel(G) |-ty k : Type{}]]$, which we get from \pref{lem:kind-reg}.
We can then use the induction hypothesis to get
$[[S |-ctx G, x:Rel k, c : x [k]~[k] t, G']]$,
$[[S;G, x:Rel k, c : x [k]~[k] t |-subst theta : G']]$,
and $[[dom(_prog) \subseteq dom(G')]]$.
We already have that the outgoing context is well-formed and the
domain condition. We need only show that
$[[S;G |-subst (t/x,<t>/c) o theta : x :Rel k, c : x [k]~[k] t, G']]$.
Let $[[theta' = (t/x,<t>/c) o theta]]$.
We will work backwards. The last step will be \rul{Subst\_TyRel}.
We must show $[[S;G |-ty x[theta'] : k]]$ and
$[[S;G |-subst theta' : (c:x [k]~[k] t, G')[t/x] ]]$.
We have already established the former (noting that $[[x[theta'] = t]]$).
We rewrite the latter as
$[[S;G |-subst theta' : c:t [k]~[k] t, G'[t/x] ]]$.
This will be shown by \rul{Subst\_Co}. We must then show
$[[S;Rel(G) |-co c[theta'] : t [k]~[k] t]]$ and
$[[S;G |-subst theta' : G'[t/x][<t>/c] ]]$.
The former is straightforwardly by \rul{Co\_Refl} and
\pref{lem:increasing-rel}.
For the latter, recall that we know
$[[S;G, x:Rel k, c : x [k]~[k] t |-subst theta : G']]$.
Thus, two uses of \pref{lem:closing-subst-subst} gives us
$[[S;G |-subst theta' : G'[t/x][<t>/c] ]]$ as desired.
We are done.
\end{description}
\end{proof}

\section{Conservativity with respect to \outsidein/}
\label{sec:app-oi-expr}.

This section assumes the introduction to \pref{sec:oi}, where much of
the conservativity argument is given.

\begin{claim}[Expressions]
\label{claim:oi-expr}
If $[[G oi|-> _t : k ~> Qw]]$ under axiom set $[[QQ]]$ and signature
$[[S]]$, then
$[[S;G,encode(QQ) |->ty _t ~> \cdot : k -| aus :Irrel forall{}.Type{}, encode(Qw)]]$
where $[[aus = fuv(k) \union fuv(Qw)]]$.
\end{claim}

\begin{proof}[Proof sketch]
\begin{description}
\item[Case \rul{VarCon}:]
\outsidein/ fully instantiates all variables, producing unification
variables for any quantified type variables and emitting wanted constraints
for any constraint in the variable's type. \bake/ does the same, via
its $[[|->inst]]$ judgment.

\item[Case \rul{App}:]
In this case, $[[_t = _t1 _t2]]$.
\outsidein/'s
is a fairly typicaly application form rule, but using constraints to assert
that the type of $[[_t1]]$ is indeed a function. \Bake/ works similarly,
using its $[[|->fun]]$ judgment to assert that a type is a $\Pi$-type.
Of course, \outsidein/'s treatment of $[[_t2]]$ uses synthesis while
\bake/'s uses its checking judgment.

\item[Case \rul{Abs}:]
This rule coresponds quite closely to \bake/'s \rul{ITy\_Lam} rule.
Note that \outsidein/ does not permit annotations on $\lambda$-bound
variables, simplifying the treatment of abstractions. Furthermore,
\bake/ must use its generalization judgment (written with $[[+>]]$)
to handle its unification variables, while \outsidein/ does not need
to have this complication.

\item[Case \rul{Case}:]
Contrast \outsidein/'s rule with \bake/'s:
\[
\ottdrule{%
\ottpremise{\Gamma \varrow e : \tau \rightsquigarrow C \quad \beta, \overline{\gamma} \text{ fresh}}%
\ottpremise{K_i{:}\forall \overline{a} \overline{b}_i . Q_i \Rightarrow \overline{\upsilon}_i \to \texttt{T}\, \overline{a} \quad \overline{b}_i \text{ fresh}}%
\ottpremise{\Gamma,(\overline{x_i{:}[\overline{a \mapsto \gamma}]\upsilon_i}) \varrow e_i : \tau_i \rightsquigarrow C_i \quad \overline{\delta}_i = \mathit{fuv}(\tau_i,C_i) - \mathit{fuv}(\Gamma,\overline{\gamma})}%
\ottpremise{C'_i = \left\{ \begin{array}{ll}
C_i \wedge \tau_i \sim \beta & \text{if $\overline{b}_i = \epsilon$ and $Q_i = \epsilon$} \\
\exists \overline{\delta}_i.([\overline{a \mapsto \gamma}]Q_i \supset C_i \wedge \tau_i \sim \beta) & \text{otherwise} \end{array} \right.}}%
{\Gamma \varrow \texttt{case}\,e\,\texttt{of}\,\{\overline{K_i\,\overline{x}_i \to e_i}\} : \beta \rightsquigarrow C \wedge (\texttt{T}\,\overline{\gamma} \sim \tau) \wedge (\bigwedge C'_i)}%
{\rul{Case}}
\]
%% \ottdrule{%
%% \ottpremise{
%% \Gamma \varrow e : \tau \rightsquigarrow C \quad \beta, \overline{\gamma} \text{ fresh} \quad C' = (\texttt{T}\,\overline{\gamma} \sim \tau) \wedge C}%
%% \ottpremise{\text{for each } K_i\,\overline{x}_i \to e_i \text{ do}}%
%% \ottpremise{\quad K_i{:}\forall \overline{a}.\overline{\upsilon}_i \to \texttt{T}\, \overline{a} \in \Gamma \quad \Gamma, (\overline{x_i{:}[\overline{a \mapsto \gamma}]\upsilon_i}) \varrow e_i : \tau_i \rightsquigarrow C_i}%
%% \ottpremise{\quad C'_i = C_i \wedge \tau_i \sim \beta}}%
%% {\Gamma \varrow \texttt{case}\,e\,\texttt{of}\,\{\overline{K_i \overline{x}_i \to e_i}\} : \beta \rightsquigarrow C' \wedge (\bigwedge C'_i)}%
%% {\rul{Case}}
\[
\ottdruleITyXXCase{}
\]
\[
\ottdruleIAltXXCon{}
\]
The first premises line up well, with both checking the scrutinee. Both
rules then must ensure that the scrutinee's type is headed by a type
constant (\texttt{T} in \outsidein/, $[[H]]$ in \bake/). This is done
via the emission of a constraint in \outsidein/ (the $\texttt{T}\,\overline{\gamma} \sim \tau$ constraint in the conclusion)
and the use of $[[|->scrut]]$ in \bake/. One reason for a difference in
treatment here is that \bake/ wishes to use any information available because
of the existence of its checking judgment, whereas \outsidein/ is free to
invent new, uninformative unification variables ($\overline{\gamma}$).
This difference makes \bake/ produce the unification variables only when
the scrutinee's type ($[[k0]]$) is not already manifestly the right shape.

Both rules then check the individual alternatives, which have to look
up the constructor ($K_i$ and $[[H]]$, respectively) in the environment.
\Pico/ gathers the three sorts of existentials together in $[[D2]]$;
\outsidein/ expands this out to the $\overline{b}_i$, $Q_i$, and $\overline{\upsilon}_i$. \outsidein/ does not permit unsaturated matching, so we can
treat $[[D4]]$ as empty. \outsidein/ does not consider scoped type variables;
it thus only brings in $\overline{x}_i$ of types $\overline{\upsilon}_i$
while checking each alternative; \bake/ brings all of $[[D3]]$ into scope.
\outsidein/ checks the synthesized type of each alternative, $\tau_i$ against
the overall result type $\beta$; \bake/ ensures the types of the alternatives
line up by using a checking judgment against the result kind $[[k]]$. (Note
that, like \outsidein/, this result kind is a unification variable. We can
see that the $[[k]]$ in \rul{IAlt\_Con} is the $[[au]]$ from \rul{ITy\_Case}.)

The constraint $C'_i$ emitted by \outsidein/ is delicately constructed.
If there are no existential type variables and no local constraints,
\outsidein/ emits a simple constraint. Otherwise, it has to emit
an implication constraint. \outsidein/'s implication constraints
allow unification variables to be local to a certain constraint; the
treatment of implication constraints is somewhat different than that of
simple constraints. In particular, when solving an implication constraint,
any unification variables that arose outside of that implication are
considered untouchable---they cannot then be unified.
(See \pref{sec:untouchability}.) In order
to avoid imposing the untouchability restriction, \outsidein/ makes a
simple constraint when possible. Due to \bake/'s more uniform treatment
of implications, this distinction is not necessary; untouchability is
informed by the order of unification variables in the context passed
to the solver.

\Bake/ makes its version of implication constraints via the generalization
judgment (written with $[[+>]]$). All of the constraints generated while
checking the alternative are quantified over variables in $[[D3]]$; this
precisely corresponds to the apapearance of the $Q_i$ to the left of the
$\supset$ in \outsidein/'s constraint $C'_i$. (Recall that $Q_i$ is a
component of \bake/'s $[[D3]]$.) \Bake/ also adds another equality
assumption into its $[[D3']]$; this equality has to do with dependent
pattern matching (\pref{sec:dependent-pat-match}) and has no place in
the non-dependent language of \outsidein/.

\item[Case \rul{Let}:]
Other than \bake/'s generalization step, these rules line up perfectly.

\item[Cases \rul{LetA} and \rul{GLetA}:]
These cases cover annotated \ottkw{let}s, where the bound variable is
also given a type. I do not consider this form separately, instead
preferring to use the checking judgments to handle this case.
\end{description}
\end{proof}

\section{Conservativity with respect to System SB}
\label{sec:app-sb}

This section compares \bake/ with System SB, as presented by
\citet[Figure 8]{visible-type-application}. Omitted elaborations
are denoted with $[[\cdot]]$. Please refer to the introduction to
\pref{sec:sb} for changes needed to both System SB and \bake/ in
order to prove the following claims.

\begin{claim}[System SB Subsumption]
\label{claim:sb-sub}
If $[[k1 <=dsk k2]]$, then $[[k1 <= k2 ~> \cdot -| O]]$.
\end{claim}

\begin{proof}[Proof sketch]
Note that this refers to the judgment in \citet[bottom of Figure 9]{visible-type-application}. If we assume all relevances are $[[Rel]]$, the rules of
the \bake/ subsumption judgments are identical to those of the SB judgments.
The one exception is the comparison between \rul{DSK\_Refl} and
\rul{ISub\_Unify}, where \bake/ emits an equality constraint instead of
simply asserting that the two types are equal. This variance is addressed
by the tweaks above, and thus we are done.
\end{proof}

\begin{claim}[Conservativity with respect to System SB] ~
\label{claim:sb}
Assume $[[P]] \approx [[G]]$.
\begin{enumerate}
\item If $[[G |-sb _t => k]]$, then
$[[S;P |->ty _t ~> \cdot : k -| O]]$.
\item If $[[G *|-sb _t => k]]$, then
$[[S;P *|->ty _t ~> \cdot : k -| O]]$.
\item If $[[G |-sb _t <= k]]$, then
$[[S;P |->ty _t : k ~> \cdot -| O]]$.
\item If $[[G *|-sb _t <= k]]$, then
$[[S;P *|->ty _t : k ~> \cdot -| O]]$.
\end{enumerate}
\end{claim}

\begin{proof}[Proof sketch]
By induction on the input derivation. This remains only a proof sketch because
I have not concretely defined the tweaks above, nor have I given a full
accounting of how types written in SB source are checked to become \pico/
types.

\begin{description}
\item[Case \rul{SB\_Abs}:]
We know here that $[[_t = \ x . _t0]]$, $[[k = UPI_Req x:Rel au_{}.k2]]$, and
that $[[G, x :Rel au_{} *|-sb _t0 => k2]]$.
We will use \rul{ITy\_Lam}.
By \rul{IQVar\_Req} and \rul{IAQVar\_Var},
we can see that $[[S;P |->q x ~> x : au_{}; Req -| au :Irrel forall{}. Type{}]]$.
The induction hypothesis tells us that
$[[S;P, au :Irrel forall{}.Type{}, x :Rel au_{} *|->ty _t0 ~> \cdot : k2 -| O]]$.
We can thus use \rul{ITy\_Lam} to get
$[[S;P *|->ty \ x . _t0 ~> \cdot : UPI_Req x:Rel au_{}. k2 -| au :Irrel forall{}. Type{}, O]]$.
We then must use \rul{ITy\_Inst} to remove the star from the judgment;
however, given that the kind starts with a visible binder, instantiation has
no effect, and we are thus done.
\item[Case \rul{SB\_InstS}:]
By \rul{ITy\_Inst}, noting that \bake/'s instantiation operation $[[|->inst]]$
behaves exactly like the manual instantation in \rul{SB\_InstS}'s conclusion.
\item[Case \rul{SB\_Var}:]
By \rul{ITy\_Var}.
\item[Case \rul{SB\_App}:]
By \rul{ITy\_App}, noting that all visible quantification in System SB
is relevant, and thus the $[[*|->arg]]$ judgment reduces to $[[*|->ty]]$.
\item[Case \rul{SB\_TApp}:]
By \rul{ITy\_AppSpec}.
\item[Case \rul{SB\_Annot}:]
Here, we know $[[_t = (/\ @as . _t0) :: _s0]]$ where
$[[S;P |->pt _s0 ~> k -| O1]]$ and $[[k = UPI_Spec as :Irrel Type{}, bs :Irrel Type{}. k0]]$.
Furthermore, we know $[[G, as :Irrel Type{} *|-sb _t0 <= k0]]$.
The induction hypothesis tells us
$[[S;P, as:Irrel Type{}, dollar bs:Irrel Type{} *|->ty _t0 : k0 ~> \cdot -| O2]]$.
We wish to use \rul{ITyC\_Skol} (repeatedly) to get from that last judgment
to $[[S;P, as:Irrel Type{} *|->ty _t0 : UPI_Spec dollar bs :Irrel Type{}. k0 ~> \cdot -| O3]]$. Rename $[[dollar bs]]$ to $[[bs]]$.
We now wish to use \rul{ITyC\_LamInvisIrrel} (repeatedly). Consider one use.
We can see that $[[S;P |->aq a : Type{} ~> a : Type{}; x.x -| empty]]$.
We know $[[S;P, as:Irrel Type{} *|->ty _t0 : UPI_Spec bs:Irrel Type{}. k0 ~> \cdot -| O3]]$
and can thus conclude
$[[S;P *|->ty /\ @a . _t0 : UPI_Spec a :Irrel Type{}, bs:Irrel Type{}. k0 ~> \cdot -| O4]]$. Repeat this process to get
$[[S;P *|->ty /\ @as . _t0 : UPI_Spec as:Irrel Type{}, bs:Irrel Type{}. k0 ~> \cdot -| O5]]$.
This can be rewritten as
$[[S;P *|->ty /\ @as . _t0 : k ~> \cdot -| O5]]$.
Thus \rul{ITy\_Annot} gives us
$[[S;P *|->ty (/\ @as . _t0) :: _s0 ~> \cdot : k -| O6]]$ as desired.
\item[Case \rul{SB\_Let}:]
By \rul{ITy\_Let}.
\item[Case \rul{SB\_DLet}:]
By \rul{ITyC\_Let}. Note that System SB's decision to put \rul{SB\_DLet}
in the unstarred judgment is immaterial, as pointed out by
\citet[footnote 13]{visible-type-application}.
\item[Case \rul{SB\_DAbs}:]
By \rul{ITyC\_Lam}.
\item[Case \rul{SB\_Infer}:]
By \rul{ITyC\_Infer} and \pref{claim:sb-sub}.
\item[Case \rul{SB\_DeepSkol}:]
Recall that according to the tweaks I have made to this algorithm, this
rule now does shallow skolemization. We are done by \rul{ITyC\_Skol}.
\end{description}
\end{proof}

%%  LocalWords:  Zonking Zonker zonker zonking

\chapter{Proofs about \pico/}
\label{app:pico-proofs}

\rae{Are all ott-defined functions listed in the text somewhere?}

You may find the full grammar for \pico/ in \pref{fig:pico-grammar}
and its notation conventions in \pref{fig:pico-notation}.
The definition for values is in \pref{sec:value-defn} and of
the $[[~#]]$ operator in \pref{sec:almost-devoid}.

\section{Auxiliary definitions}

\begin{definition}[Free variables]
Define $[[fv]]$ to be a function extracting free variables, overloaded to work
over types $[[t]]$, coercions $[[g]]$, propositions $[[phi]]$,
vectors $[[p]]$,
alternatives $[[alt]]$, and telescopes $[[D]]$. 
The definitions are entirely standard.
\end{definition}

\begin{definition}[Context extension]
Define the relation $[[G \subseteq G']]$ to mean that $[[G]]$ is a (not necessarily
contiguous) subsequence of $[[G']]$.
\end{definition}

\section{Structural properties}

\subsection{Relevant contexts}

\begin{lemma}[$[[dom]]$/$[[Rel]]$]
\label{lem:dom-rel}
$[[dom(Rel(G)) = dom(G)]]$
\end{lemma}

\begin{proof}
By its definition $[[Rel(G)]]$ binds the same variables as $[[G]]$.
\end{proof}

\begin{lemma}[Subsequence/$[[Rel]]$]
\label{lem:subsequence-rel}
If $[[G \subseteq G']]$ then $[[Rel(G) \subseteq Rel(G')]]$.
\end{lemma}

\begin{proof}
By the definitions of $\subseteq$ and $[[Rel]]$.
\end{proof}

\begin{lemma}[$[[Rel]]$ is idempotent]
\label{lem:rel-idempotent}
$[[Rel(Rel(G)) = Rel(G)]]$
\end{lemma}

\begin{proof}
By the definition of $[[Rel]]$.
\end{proof}

\begin{lemma}[Increasing relevance] ~
\label{lem:increasing-rel}
Let $[[G]]$ and $[[G']]$ be the same except that some bindings
in $[[G']]$ are labeled $[[Rel]]$ where those same bindings
in $[[G]]$ are labeled $[[Irrel]]$.
\begin{enumerate}
\item If $[[S;G |-ty t : k]]$, then $[[S;G' |-ty t : k]]$.
\item If $[[S;G |-co g : phi]]$, then $[[S;G' |-co g : phi]]$.
\item If $[[S;G |-prop phi]]$, then $[[S;G' |-prop phi]]$.
\item If $[[S;G;s0;t0 |-alt alt : k]]$, then $[[S;G';s0;t0 |-alt alt : k]]$.
\item If $[[S;G |-vec ps : D]]$, then $[[S;G' |-vec ps : D]]$.
\item If $[[S |-ctx G]]$, then $[[S |-ctx G']]$.
\item If $[[S;G |-s t --> t']]$, then $[[S;G' |-s t --> t']]$.
\end{enumerate}
\end{lemma}

\begin{proof}
By straightforward mutual induction, appealing to
\pref{lem:rel-idempotent}.
\end{proof}

%% \begin{lemma}[Decreasing relevance]
%% \label{lem:decreasing-rel}
%% If $[[S |-ctx G, a:Rel k]]$, then $[[S |-ctx G, a:Irrel k]]$.
%% \end{lemma}

%% \begin{proof}
%% By inverting and then using \rul{Ctx\_TyVar}.
%% \end{proof}

\subsection{Regularity, Part I}

\begin{lemma}[Type variable kinds]
\label{lem:tyvar-reg}
If $[[S |-ctx G]]$ and $[[a :rel k \in G]]$, then there exists
$[[G']]$ such that $[[G' \subseteq Rel(G)]]$ and $[[S;G' |-ty k : Type{} ]]$.
Furthermore, the size of the derivation of $[[S;G' |-ty k : Type{} ]]$
is smaller than that of $[[S |-ctx G]]$.
\end{lemma}

\begin{proof}
Straightforward induction on $[[S |-ctx G]]$.
\end{proof}

\begin{lemma}[Coercion variable kinds]
\label{lem:covar-reg}
If $[[S |-ctx G]]$ and $[[c : phi \in G]]$, then there exists
$[[G']]$ such that $[[G' \subseteq Rel(G)]]$ and $[[S;G' |-prop phi]]$.
Furthermore, the size of the derivation of $[[S;G' |-prop phi]]$
is smaller than that of $[[S |-ctx G]]$.
\end{lemma}

\begin{proof}
Straightforward induction on $[[S |-ctx G]]$.
\end{proof}

\begin{lemma}[Context regularity]
\label{lem:ctx-reg}
If:
\begin{enumerate}
\item $[[S;G |-ty t : k]]$, OR
\item $[[S;G |-co g : phi]]$, OR
\item $[[S;G |-prop phi]]$, OR
\item $[[S;G;s0;t0 |-alt alt : k]]$, OR
\item $[[S;G |-vec ps : D]]$, OR
\item $[[S |-ctx G]]$
\end{enumerate}
Then $[[S |-ctx prefix(G)]]$ and $[[|-sig S]]$, where $[[prefix(G)]]$ is an
arbitrary prefix of $[[G]]$. Furthermore, both resulting derivations are no
larger than the input derivations.
\end{lemma}

\begin{proof}
Straightforward mutual induction.
\end{proof}

\subsection{Weakening}

\begin{lemma}[Weakening]
\label{lem:weakening}
Assume $[[S |-ctx G']]$ and $[[G \subseteq G']]$.
\begin{enumerate}
\item If $[[S;G |-ty t : k ]]$ then $[[S;G' |-ty t : k]]$.
\item If $[[S;G |-co g : phi ]]$, then $[[S;G' |-co g : phi]]$.
\item If $[[S;G |-prop phi ]]$, then $[[S;G' |-prop phi]]$.
\item If $[[S;G;s0;t0 |-alt alt : k]]$, then $[[S;G';s0;t0 |-alt alt : k]]$.
\item If $[[S;G |-vec ps : D]]$, then $[[S;G' |-vec ps : D]]$.
\item If $[[S |-ctx G, D]]$, then $[[S |-ctx G', D]]$.
\item If $[[S;G |-s t --> t']]$, then $[[S;G' |-s t --> t']]$.
\end{enumerate}
\end{lemma}

\begin{proof}
By straightforward mutual induction, appealing to
\pref{lem:subsequence-rel}, \pref{lem:increasing-rel} (in order to
be able to use the induction hypothesis in, e.g., \rul{Ty\_AppIrrel}),
and
\pref{lem:ctx-reg}
(in order to use the induction hypothesis in, e.g., \rul{Ty\_Pi}).
\end{proof}

\begin{lemma}[Strengthening]
\label{lem:strengthening}
Assume $[[G' \subseteq G]]$ and the
variables $[[{dom(G)} \ {dom(G')}]]$ are never used.
\begin{enumerate}
\item If $[[S;G |-ty t : k ]]$ then $[[S;G' |-ty t : k]]$.
\item If $[[S;G |-co g : phi ]]$, then $[[S;G' |-co g : phi]]$.
\item If $[[S;G |-prop phi ]]$, then $[[S;G' |-prop phi]]$.
\item If $[[S;G;s0;t0 |-alt alt : k]]$, then $[[S;G';s0;t0 |-alt alt : k]]$.
\item If $[[S;G |-vec ps : D]]$, then $[[S;G' |-vec ps : D]]$.
\item If $[[S |-ctx G]]$, then $[[S |-ctx G']]$.
\item If $[[S;G |-s t --> t']]$, then $[[S;G' |-s t --> t']]$.
\end{enumerate}
\end{lemma}

\begin{proof}
Similar to previous proof.
\end{proof}

\subsection{Scoping}

\begin{lemma}[Scoping] ~
\label{lem:scoping}
\begin{enumerate}
\item If $[[S;G |-ty t : k]]$, then $[[fv(t) \subseteq {dom(G)}]]$ and 
$[[fv(k) \subseteq {dom(G)}]]$.
\item If $[[S;G |-co g : phi]]$, then $[[fv(g) \subseteq {dom(G)}]]$ and
$[[fv(phi) \subseteq {dom(G)}]]$.
\item If $[[S;G |-prop phi]]$, then $[[fv(phi) \subseteq {dom(G)}]]$.
\item If $[[S;G;s0;t0 |-alt H -> t : k]]$, 
  then $[[fv(t) \subseteq {dom(G)}]]$.
\item If $[[S;G |-vec ps : D]]$, then $[[fv(ps) \subseteq {dom(G)}]]$ and
$[[fv(D) \subseteq {dom(G)}]]$.
\item If $[[S |-ctx G]]$, then $[[fv(G) = \emptyset]]$.
\item If $[[|-sig S]]$ and $[[S |-tc H : D1;D2;H']]$, 
then $[[fv(D1) = \emptyset]]$ and $[[fv(D2) \subseteq {dom(D1)}]]$.
\end{enumerate}
\end{lemma}

\begin{proof}
By straightforward mutual induction, appealing to \pref{lem:dom-rel},
\pref{lem:tyvar-reg},
\pref{lem:covar-reg},
and \pref{lem:ctx-reg}.
\end{proof}

\section{Unification}
\label{sec:match-properties}

We assume the following properties of our unification algorithm.

\begin{property}[Domain of $[[match]]$]
\label{prop:match-dom}
If $[[match_V(ts1; ts2) = Just theta]]$, then $[[theta = ps/zs]]$ for some
$[[ps]]$ and $[[zs]]$ with $[[V = {zs}]]$. In other words, the domain of the
substitution returned by a successful use of $[[match]]$ is the variables
$[[V]]$ passed into $[[match]]$.
\end{property}

\begin{property}[$[[match]]$ is sound]
\label{prop:match-sound}
If $[[match_V(ts1; ts2) = Just theta]]$, then $[[ts1[theta] = ts2]]$.
\end{property}

\begin{property}[$[[match]]$/substitution]
\label{prop:match-subst}
If $[[match_V(ts1;ts2) = Just theta]]$ and $[[dom(theta0) \inter V = \emptyset]]$,
$[[match_V(ts1[theta0];ts2[theta0]) = Just theta']]$ for some $[[theta']]$.
\end{property}

\section{Determinacy}

\begin{lemma}[Uniqueness of signatures] ~
\label{lem:uniq-sig}
Assume $[[|-sig S]]$.
\begin{enumerate}
\item If $[[T:(as:ks1) \in S]]$ and $[[T:(as:ks2) \in S]]$, then $[[ks1 = ks2]]$.
\item If $[[K:(D1;T1) \in S]]$ and $[[K:(D2;T2) \in S]]$, then $[[D1 = D2]]$
and $[[T1 = T2]]$.
\end{enumerate}
\end{lemma}

\begin{proof}
By the freshness conditions on $[[|-sig S]]$.
\end{proof}

\begin{lemma}[Uniqueness of contexts] ~
\label{lem:uniq-ctx}
Assume $[[S |-ctx G]]$.
\begin{enumerate}
\item If $[[a :rel1 k1 \in G]]$ and $[[a :rel2 k2 \in G]]$,
then $[[rel1 = rel2]]$ and $[[k1 = k2]]$.
\item If $[[c:phi1 \in G]]$ and $[[c:phi2 \in G]]$,
then $[[phi1 = phi2]]$.
\end{enumerate}
\end{lemma}

\begin{proof}
By the freshness conditions on $[[S |-ctx G]]$.
\end{proof}

\begin{lemma}[Determinacy of type constants]
\label{lem:determinacy-tycon}
If $[[|-sig S]]$, $[[S |-tc H : D1;D1';H1]]$, and $[[S |-tc H : D2;D2';H2]]$, then $[[D1 = D2]]$, $[[D1' = D2']]$, and $[[H1 = H2]]$.
\end{lemma}

\begin{proof}
From \pref{lem:uniq-sig}.
\end{proof}

\begin{lemma}[Values do not step]
\label{lem:value-no-step}
There exists no $[[t]]$ such that $[[S;G |-s v --> t]]$.
\end{lemma}

\begin{proof}
By induction on the structure of $[[v]]$.
\end{proof}

\begin{lemma}[Determinacy] ~
\label{lem:determinacy}
\begin{enumerate}
\item If $[[S;G |-ty t : k1]]$ and $[[S;G |-ty t : k2]]$, then
$[[k1 = k2]]$.
\item If $[[S;G |-co g : phi1]]$ and $[[S;G |-co g : phi2]]$, then
$[[phi1 = phi2]]$.
\item If $[[S;G |-s t --> s1]]$ and $[[S;G |-s t --> s2]]$, then
$[[s1 = s2]]$.
\end{enumerate}
\end{lemma}

\begin{proof}
By mutual induction, appealing to \pref{lem:uniq-ctx},
\pref{lem:determinacy-tycon} (which
requires a use of \pref{lem:ctx-reg} first), and
\pref{lem:value-no-step}.
\end{proof}

\section{Vectors}

\begin{lemma}
\label{lem:cev-cons-rel}
If $[[S;G |-ty t : k]]$ and $[[S;G |-cev ps : D[t/a] ]]$, then
$[[S;G |-cev t, ps : a :Rel k, D]]$.
\end{lemma}

\begin{proof}
By induction on $[[S;G |-cev ps : D[t/a ] ]]$.

\begin{description}
\item[Case \rul{Cev\_Nil}:] In this case, $[[ps]]$ and $[[D]]$ are both
empty, and so we are done by \rul{Cev\_Nil} and \rul{Cev\_TyRel}.
\item[Case \rul{Cev\_TyRel}:] We now have $[[ps = ps', s]]$ and
$[[D = D', b :Rel k0]]$, with $[[S;G |-ty s : k0[t/a][ps'/dom(D')] ]]$
and $[[S;G |-cev ps' : D'[t/a] ]]$. The induction hypothesis gives
us $[[S;G |-cev t, ps' : a :Rel k, D']]$. We are done by
\rul{Cev\_TyRel}.
\item[Other cases:] Similar.
\end{description}
\end{proof}

\begin{lemma}
\label{lem:cev-cons-irrel}
If $[[S;Rel(G) |-ty t : k]]$ and $[[S;G |-cev ps : D[t/a] ]]$, then
$[[S;G |-cev t, ps : a :Irrel k, D]]$.
\end{lemma}

\begin{proof}
Similar to previous proof.
\end{proof}

\begin{lemma}
\label{lem:cev-cons-co}
If $[[S;Rel(G) |-co g : phi]]$ and $[[S;G |-cev ps : D[g/c] ]]$, then
$[[S;G |-cev g, ps : c : phi, D]]$.
\end{lemma}

\begin{proof}
Similar to previous proof.
\end{proof}

\begin{lemma}
\label{lem:vec-snoc-rel}
If $[[S;G |-vec ps : D]]$ and $[[S;G |-ty t : k[ps/dom(D)] ]]$,
then $[[S;G |-vec ps, t : D, a :Rel k]]$.
\end{lemma}

\begin{proof}
By induction on $[[S;G |-vec ps : D]]$.

\begin{description}
\item[Case \rul{Vec\_Nil}:] In this case, $[[ps]]$ and $[[D]]$ are both
empty, and so we are done by \rul{Vec\_Nil} and \rul{Vec\_TyRel}.
\item[Case \rul{Vec\_TyRel}:] We now have
$[[ps = s, ps']]$ and $[[D = b :Rel k0, D']]$ with
$[[S;G |-ty s : k0]]$ and $[[S;G |-vec ps' : D'[s/b] ]]$.
We know, by assumption, that $[[S;G |-ty t : k[ps/dom(D)] ]]$.
This expands to $[[S;G |-ty t : k[s/b][ps'/dom(D')] ]]$
(noting that \pref{lem:scoping} assures us that $[[s]]$ has no variables
in $[[dom(D')]]$ free). We can thus use the induction hypothesis
to get $[[S;G |-vec ps', t : D'[s/b], a :Rel k[s/b] ]]$, or, equivalently,
$[[S;G |-vec ps', t : (D', a:Rel k)[s/b] ]]$.
We are done by \rul{Vec\_TyRel}.
\item[Other cases:] Similar.
\end{description}
\end{proof}

\begin{lemma}
\label{lem:vec-snoc-irrel}
If $[[S;G |-vec ps : D]]$ and $[[S;Rel(G) |-ty t : k[ps/dom(D)] ]]$,
then $[[S;G |-vec ps, t : D, a:Irrel k]]$.
\end{lemma}

\begin{proof}
Similar to previous proof.
\end{proof}

\begin{lemma}
\label{lem:vec-snoc-co}
If $[[S;G |-vec ps : D]]$ and $[[S;Rel(G) |-co g : phi[ps/dom(D)] ]]$,
then $[[S;G |-vec ps, g : D, c:phi]]$.
\end{lemma}

\begin{proof}
Similar to previous proof.
\end{proof}

\begin{lemma}[Vec/Cev]
\label{lem:vec-cev}
We have $[[S;G |-vec ps : D]]$ if and only if $[[S;G |-cev ps : D]]$.
\end{lemma}

\begin{proof}
We'll prove the forward direction first, by induction on the typing
derivation:

\begin{description}
\item[Case \rul{Vec\_Nil}:] We are done by \rul{Cev\_Nil}.
\item[Case \rul{Vec\_TyRel}:] By the induction hypothesis and \pref{lem:cev-cons-rel}.
\item[Case \rul{Vec\_TyIrrel}:] By the induction hypothesis and \pref{lem:cev-cons-irrel}.
\item[Case \rul{Vec\_Co}:] By the induction hypothesis and \pref{lem:cev-cons-co}.
\end{description}

The reverse direction is similar, appealing to \pref{lem:vec-snoc-rel},
\pref{lem:vec-snoc-irrel}, and \pref{lem:vec-snoc-co}.
\end{proof}

\begin{lemma}[Vector lengths]
\label{lem:vec-length}
If $[[S;G |-vec ps : D]]$, then $[[length ps = length D]]$.
\end{lemma}

\begin{proof}
Straightforward induction on $[[S;G |-vec ps : D]]$.
\end{proof}

\begin{lemma}[Vector kinds]
\label{lem:vec-kind}
If $[[S;G |-vec ps : D]]$, then for every $[[p \in ps]]$, we have one of the
following:
\begin{enumerate}
\item $[[p = t]]$ and $[[S;G |-ty t : k]]$ for some $[[k]]$
\item $[[p = {t}]]$ and $[[S;Rel(G) |-ty t : k]]$ for some $[[k]]$
\item $[[p = g]]$ and $[[S;Rel(G) |-co g : phi]]$ for some $[[phi]]$
\end{enumerate}
The resulting derivation is smaller than the input derivation.
\end{lemma}

\begin{proof}
Straightforward induction on $[[S;G |-vec ps : D]]$.
\end{proof}

\begin{lemma}[Application inversion]
\label{lem:app-inversion}
If $[[S;G |-ty t ps : k]]$ where $[[ps = ps0,ps1]]$,
then $[[S;G |-ty t ps0 : MUPI D.k0]]$, $[[S;G |-vec ps1 : D]]$
and $[[k = k0[ps1/dom(D)] ]]$.
\end{lemma}

\begin{proof}
Straightforward induction on $[[ps1]]$.
\end{proof}

\begin{lemma}[Telescope application]
\label{lem:tel-app}
If $[[S;G |-ty t : MUPI D.s]]$ and $[[S;G |-vec ps : D]]$,
then $[[S;G |-ty t ps : s[ps/dom(D)] ]]$.
\end{lemma}

\begin{proof}
By straightforward induction on $[[S;G |-vec ps : D]]$.
\end{proof}

\begin{lemma}[Telescope instantiation]
\label{lem:tel-inst}
If $[[S;G |-co h : MPI D.s [Type{}]~[Type{}] MPI D'.s']]$,
 $(\forall [[i]], [[S;G |-co gi : ti [ki]~[ki'] ti']])$,
$[[S;G |-vec ts : D]]$, and $[[S;G |-vec ts' : D']]$,
then $[[S;G |-co h@gs : s[ts/dom(D)] [Type{}]~[Type{}] s'[ts'/dom(D')] ]]$.
\end{lemma}

\begin{proof}
By induction on the structure of the list $[[gs]]$.

\begin{description}
\item[Case $[[gs = empty]]$:] By \pref{lem:vec-length}, we can see that $[[D]]$
and $[[D']]$ must both be empty. We are done by assumption.
\item[Case $[[gs = g0, gs1]]$:] In this case, we know $[[S;G |-vec t0, ts1 : D]]$
and thus that $[[D = a :Rel k0, D1]]$
with $[[S;G |-ty t0 : k0]]$ and $[[S;G |-vec ts1 : D1[t0/a] ]]$.
Similarly, we have $[[S;G |-ty t0' : k0']]$ and $[[S;G |-vec ts1' : D1'[t0'/a] ]]$.
We must show $[[S;G |-co (h@g0)@gs1 : s[t0/a,ts1/dom(D1)] [Type{}]~[Type{}] s'[t0'/a,ts1'/dom(D1')] ]]$.
We can rewrite our assumption (expanding $[[D]]$ and $[[D']]$) to be
$[[S;G |-co h : MPI a:Rel k0, D1.s [Type{}]~[Type{}] MPI a:Rel k0',D1'.s']]$
and thus derive
$[[S;G |-co h@g0 : MPI (D1[t0/a]).(s[t0/a]) [Type{}]~[Type{}] MPI (D1'[t0'/a]).(s'[t0'/a]) ]]$.
We can then use the induction hypothesis to get
$[[S;G |-co (h@g0)@gs : s[t0/a][ts1/dom(D1)] [Type{}]~[Type{}] s'[t0'/a][ts1'/dom(D1')] ]]$, which (noting that $[[t0]]$ cannot have any of the $[[dom(D1)]]$ free)
is what we wish to prove.
\end{description}
\end{proof}

\begin{remark}
The above \pref{lem:tel-inst} could be made more general, to work with
$[[UPI]]$ as well as $[[MPI]]$. However, doing so would make the statement
and proof more cluttered, and it is only ever needed with $[[MPI]]$.
\end{remark}

\section{Substitution}

\begin{lemma}[Value substitution]
\label{lem:value-subst}
If $[[v]]$ is a value with a free variable $[[a]]$,
then $[[v[s/a] ]]$ is also a value.
\end{lemma}

\begin{proof}
By the definition of values.
\end{proof}

\begin{lemma}[Substitution/erasure]
\label{lem:subst-erase}
$[[|t|[|s|/a] = |t[s/a]|]]$
\end{lemma}

\begin{proof}
By induction on the structure of $[[t]]$.
\end{proof}

\begin{lemma}[Type substitution]
\label{lem:ty-subst}
Assume $[[S;G |-ty s : k]]$.
\begin{enumerate}
\item If $[[S;G,a:rel k,G' |-ty t : k0]]$, then $[[S;G,G'[s/a] |-ty t[s/a] : k0[s/a] ]]$.
\item If $[[S;G,a:rel k,G' |-co g : phi]]$, then $[[S;G,G'[s/a] |-co g[s/a] : phi[s/a] ]]$.
\item If $[[S;G,a:rel k,G' |-prop phi]]$, then $[[S;G,G'[s/a] |-prop phi[s/a] ]]$.
\item If $[[S;G,a:rel k,G';s0;t0 |-alt alt : k]]$,
then $[[S;G,G'[s/a];s0[s/a];t0[s/a] |-alt alt[s/a] : k[s/a] ]]$.
\item If $[[S;G,a:rel k,G' |-vec ps : D]]$, then
$[[S;G,G'[s/a] |-vec ps[s/a] : D[s/a] ]]$.
\item If $[[S |-ctx G,a:rel k,G']]$, then $[[S |-ctx G,G'[s/a] ]]$.
\item If $[[S;G,a:rel k,G' |-s t --> t']]$, then $[[S;G,G'[s/a] |-s t[s/a] --> t'[s/a] ]]$.
\end{enumerate}
\end{lemma}

\begin{proof}
By mutual induction. Some interesting cases are below.

\begin{description}
\item[Case \rul{Ty\_Var}:] Here, we know $[[t]]$ is some variable $[[b]]$. There
are three cases to consider:
\begin{description}
\item[Case $[[b:Rel k0 \in G]]$:] We must derive $[[S;G,G'[s/a] |-ty b : k0[s/a] ]]$.
We will use \rul{Ty\_Var}. We establish $[[S |-ctx G,G'[s/a] ]]$ by the induction
hypothesis. Scoping (\pref{lem:scoping}) tells us that $[[a \notin fv(k0)]]$, and so we are
done by the fact that $[[b :Rel k0 \in G]]$.
\item[Case $[[b = a]]$:] By weakening (\pref{lem:weakening}).
\item[Case $[[b:Rel k0 \in G']]$:] Once again, we get $[[S |-ctx G,G'[s/a] ]]$ by the
induction hypothesis. Furthermore, we get $[[b:Rel k0[s/a] \in G'[s/a] ]]$ from 
$[[b:Rel k0 \in G']]$.
\end{description}
\item[Case \rul{Ty\_Con}:] By \pref{lem:scoping}, \pref{lem:ctx-reg}, and induction.
\item[Case \rul{Alt\_Match}:]
We adopt the metavariable names from the rule:
\[
\ottdruleAltXXMatch{}
\]
We will use \rul{Alt\_Match} to prove our desired conclusion. Several
premises are unchanged. The remaining ones we will have to prove:
\begin{description}
\item[$[[D3',D4' = D2[ss[s/a]/dom(D1)] ]]$:] By our choice of $[[D3' = D3[s/a] ]]$ and $[[D4' = D4[s/a] ]]$.
\item[$[[match_{dom(D3)}(types(D4[s/a]);types(D'[s/a])) = Just theta']]$:]
We can freely choose $[[theta']]$, but we still need to make sure that
the match succeeds. This is by \pref{prop:match-subst}.
\end{description}
\item[Case \rul{Co\_Var}:] Similar to \rul{Ty\_Var}.
\item[Case \rul{Co\_PiTy}:]
We adopt the metavariable names from the rule (renaming the variable to be substituted
to $[[b]]$):
\[
\ottdruleCoXXPiTy{}
\]
The induction hypothesis gives us:
\begin{itemize}
\item $[[S;G,G'[s/b] |-co h[s/b] : k1[s/b] [Type{}]~[Type{}] k2[s/b] ]]$
\item $[[S;G,G'[s/b],a:Rel k1[s/b] |-co g[s/b] : s1[s/b] [Type{}]~[Type{}] s2[s/b] ]]$
\end{itemize}
By \rul{Co\_PiTy}, we get
\[
[[S;G,G'[s/b] |-co PI a:rel h[s/b]. g[s/b] : (PI a:rel k1[s/b]. s1[s/b]) [Type{}]~[Type{}] (PI a:rel k2[s/b]. (s2[s/b][a |> sym h[s/b]/a])) ]]
\]
All that remains to show is that
$[[s2[s/b][a |> sym h[s/b]/a] = s2[a |> sym h/a][s/b] ]]$, but this
follows from the fact that $[[a # s]]$, guaranteed by the Barendregt
convention. We are done with this case.
\item[Case \rul{Co\_PiCo}:]
We adopt the metavariable names from the rule:
\[
\ottdruleCoXXPiCo{}
\]
For the most part, this follows the pattern of case \rul{Co\_PiTy}, but
we must make sure that $[[c ~# g[s/a] ]]$. This fact follows from the
Barendregt convention, which asserts that $[[c]]$ cannot appear in $[[s]]$.
\item[Other cases:] By the induction hypothesis, using \pref{lem:value-subst} for
certain step rules, and using the Barendregt convention to rearrange substitutions
(as in the \rul{Co\_PiTy} case).
\end{description}
\end{proof}

\begin{lemma}[Coercion substitution]
\label{lem:co-subst}
Assume $[[S;G |-co g : phi]]$.
\begin{enumerate}
\item If $[[S;G,c:phi,G' |-ty t : k0]]$, then $[[S;G,G'[g/c] |-ty t[g/c] : k0[g/c] ]]$.
\item If $[[S;G,c:phi,G' |-co h : phi']]$, then $[[S;G,G'[g/c] |-co h[g/c] : phi'[g/c] ]]$.
\item If $[[S;G,c:phi,G' |-prop phi']]$, then $[[S;G,G'[g/c] |-prop phi'[g/c] ]]$.
\item If $[[S;G,c:phi,G';s0;t0 |-alt alt : k]]$,
then $[[S;G,G'[g/c];s0[g/c];t0[g/c] |-alt alt[g/c] : k[g/c] ]]$.
\item If $[[S;G,c:phi,G' |-vec ps : D]]$, then
$[[S;G,G'[g/c] |-vec ps[g/c] : D[g/c] ]]$.
\item If $[[S |-ctx G,c:phi,G']]$, then $[[S |-ctx G,G'[g/c] ]]$.
\item If $[[S;G,c:phi,G' |-s t --> t']]$, then $[[S;G,G'[g/c] |-s t[g/c] --> t'[g/c] ]]$.
\end{enumerate}
\end{lemma}

\begin{proof}
Similar to proof for \pref{lem:ty-subst}.
\end{proof}

\begin{lemma}[Vector substitution]
\label{lem:vec-subst}
If $[[S;G |-vec ps : D]]$ and $[[S;G,D,G' |-ty t : k]]$,
then $[[S;G,G'[ps/dom(D)] |-ty t[ps/dom(D)] : k[ps/dom(D)] ]]$.
\end{lemma}

\begin{proof}
By induction on the structure of $[[D]]$.

\begin{description}
\item[Case $[[D = empty]]$:] By assumption.
\item[Case $[[D = a0 :Rel k0,D']]$:] We know
$[[ps = s0, ps']]$, $[[S;G |-ty s0 : k0]]$, and $[[S;G |-vec ps' : D'[s0/a] ]]$.
\pref{lem:ty-subst} tells us
$[[S;G,D'[s0/a],G'[s0/a] |-ty t[s0/a] : k[s0/a] ]]$.
We are done by a use of the induction hypothesis.
\item[Other cases:] Similar.
\end{description}
\end{proof}

\section{Type constants}

\begin{lemma}[Type-in-type]
\label{lem:type-in-type}
If $[[|-sig S]]$, then $[[S;empty |-ty Type{} : Type{} ]]$.
\end{lemma}

\begin{proof}
Working backward, use \rul{Ty\_Con} so that we must show the
following:
\begin{description}
\item[$[[S |-tc Type : empty; empty; Type]]$:] By \rul{Tc\_Type}.
\item[$[[S |-ctx empty]]$:] By \rul{Ctx\_Nil}.
\item[$[[S;empty |-vec empty : empty]]$:] By \rul{Vec\_Nil}.
\end{description}
We are thus done.
\end{proof}

\begin{lemma}[Telescopes]
\label{lem:tel}
If $[[S |-ctx G, D]]$, then $[[S;G,D |-vec dom(D) : D]]$.
\end{lemma}

\begin{proof}
Proceed by induction on the structure of $[[D]]$.

\begin{description}
\item[Case $[[D = empty]]$:] By \rul{Vec\_Nil}.
\item[Case $[[D = a:Rel k, D']]$:]
We must show $[[S;G,a:Rel k, D' |-vec a, dom(D') : a:Rel k, D']]$.
By \rul{Vec\_TyRel}, we must show
$[[S;G,a:Rel k, D' |-ty a : k]]$ and
$[[S;G,a:Rel k, D' |-vec dom(D') : D']]$.
The first is by \rul{Ty\_Var} and the second is by the induction hypothesis.
\item[Other cases:] Similar.
\end{description}
\end{proof}

\begin{lemma}[Type constant telescopes]
\label{lem:tycon-tel}
If $[[|-sig S]]$ and $[[S |-tc H : D1;D2;H']]$,
then $[[S |-ctx D1,D2 ]]$.
\end{lemma}

\begin{proof}
By case analysis on $[[S |-tc H : D1;D2;H']]$.
\begin{description}
\item[Case \rul{Tc\_ADT}:] Here $[[D1 = empty]]$ and $[[D2 = as :Rel ks]]$
We see that $[[S |-ctx as :Irrel ks]]$ from $[[|-sig S]]$ (\rul{Sig\_ADT}).
A use of \pref{lem:increasing-rel} solves our goal.
\item[Case \rul{Tc\_DataCon}:] Here $[[D1 = as :Irrel ks]]$. We must show
$[[S |-ctx as :Irrel ks, D2]]$. From $[[|-sig S]]$, we see that
$[[S |-ctx as:Irrel ks, D2]]$ (\rul{Sig\_DataCon}).
\item[Case \rul{Tc\_Type}:] Here $[[D1 = D2]] = [[empty]]$. We are done
by \rul{Ctx\_Nil}.
\end{description}
\end{proof}


\begin{lemma}[Type constant kinds]
\label{lem:tycon-kind}
If $[[|-sig S]]$ and $[[S |-tc H : D1;D2;H']]$,
then $[[S;empty |-ty MPI D1,D2.H'{} dom(D1) : Type{} ]]$.
\end{lemma}

\begin{proof}
To prove $[[S;empty |-ty MPI D1,D2.H'{} dom(D1) : Type{} ]]$,
we will use \rul{Ty\_Pi} (repeatedly). We thus must show
$[[S;Rel(D1,D2) |-ty H'{} dom(D1) : Type{} ]]$.
This, in turn, will be by \rul{Ty\_AppRel} (repeatedly). We thus
must show 
\begin{description}
\item[$[[S;Rel(D1,D2) |-ty H'{} : MPI Rel(D1). Type{} ]]$] (We are being
a bit more specific here than necessary.) Case analysis of
$[[S |-tc H : D1;D2;H']]$ gives us several cases:
\begin{description}
\item[Case \rul{Tc\_ADT}:] Here, $[[D1 = empty]]$ and
$[[H' = Type]]$, and we must show $[[S;Rel(D2) |-ty Type{} : Type{} ]]$.
According to \rul{Ty\_Con} we must show only that $[[S |-ctx Rel(D2) ]]$,
which follows from \pref{lem:tycon-tel} and \pref{lem:increasing-rel}.
\item[Case \rul{Tc\_DataCon}:] Here, $[[D1 = as :Irrel ks]]$ and
$[[H' = T]]$. We must show
$[[S;as :Rel ks,Rel(D2) |-ty T{} : MPI as :Rel ks. Type{} ]]$.
Using \rul{Ty\_Con} means we must show $[[S |-tc T : empty; as :Rel ks; Type]]$
and $[[S |-ctx as :Rel ks, Rel(D2)]]$. The latter comes from
$[[|-sig S]]$ and \pref{lem:tycon-tel}. The former comes directly from
\rul{Tc\_ADT}.
\item[Case \rul{Tc\_Type}:] By \pref{lem:type-in-type}.
\end{description}
\item[$[[S;Rel(D1,D2) |-vec dom(D1) : Rel(D1) ]]$] This last judgment
expands out to be all the typing judgments we need in \rul{Ty\_AppRel}.
See \rul{Vec\_TyRel}. To prove this, we use \pref{lem:tel}, meaning
that we need only show $[[S |-ctx Rel(D1,D2)]]$, which we
get from \pref{lem:tycon-tel}. We are done.
\end{description}
\end{proof}

\begin{lemma}[Type constant inversion]
\label{lem:tycon-inversion}
If $[[S;G |-ty H{ts} ps : k]]$, then:
\begin{enumerate}
\item $[[S |-tc H : as :Irrel ks;D;H' ]]$
\item $[[S;Rel(G) |-vec ts : as :Rel ks]]$
\item $[[D1,D2 = D[ts/as] ]]$
\item $[[S;G |-vec ps : D1 ]]$
\item $[[k = MPI (D2[ps/dom(D1)]). H'{} ts]]$
\end{enumerate}
\end{lemma}

\begin{proof}
By \pref{lem:app-inversion}, \pref{lem:tel-app}, and \pref{lem:determinacy},
and inversion and application of typing rules.
\end{proof}

\section{Regularity, Part II}

\begin{lemma}[Kind regularity]
\label{lem:kind-reg}
If $[[S;G |-ty t : k]]$, then $[[S;Rel(G) |-ty k : Type{} ]]$.
\end{lemma}

\begin{proof}
By induction on the typing derivation.

\begin{description}
\item[Case \rul{Ty\_Var}:] By \pref{lem:tyvar-reg} (and \pref{lem:weakening}).
\item[Case \rul{Ty\_Con}:] We'll adopt the metavariable names
from the rule:
\[
\ottdruleTyXXCon{}
\]
Use \pref{lem:ctx-reg} to get
$[[|-sig S]]$. Then use \pref{lem:tycon-kind} to get
$[[S;empty |-ty MPI D1,D2.H'{} dom(D1) : Type{} ]]$.
Repeated inversion on \rul{Ty\_Pi} gives us
$[[S;Rel(D1) |-ty MPI D2.H'{} dom(D1) : Type{} ]]$.
\pref{lem:weakening} gives us
$[[S;Rel(G),Rel(D1) |-ty MPI D2.H'{} dom(D1) : Type{} ]]$.
\pref{lem:vec-subst} gives us
$[[S;Rel(G) |-ty MPI (D2[ts/dom(D1)]). H'{} ts : Type{} ]]$
as desired.
\item[Case \rul{Ty\_AppRel}:]
We'll adopt the metavariable names from the rule:
\[
\ottdruleTyXXAppRel{}
\]
The induction hypothesis gives us $[[S;Rel(G) |-ty PI a:Rel k1. k2 : Type{} ]]$.
Inversion on \rul{Ty\_Pi} gives us
$[[S;Rel(G),a:Rel k1 |-ty k2 : Type{} ]]$.
\pref{lem:increasing-rel} gives us $[[S;Rel(G) |-ty t2 : k1]]$,
and then \pref{lem:ty-subst} applies, giving us $[[S;Rel(G) |-ty k2[t2/a] : Type{} ]]$ as desired.
\item[Case \rul{Ty\_AppIrrel}:]
Similar to last case, noting that inverting \rul{Ty\_Pi} converts the $[[Irrel]]$
to a $[[Rel]]$ and without the need for \pref{lem:increasing-rel}.
\item[Case \rul{Ty\_CApp}:]
Similar to previous case.
\item[Case \rul{Ty\_Pi}:]
By \pref{lem:ctx-reg} and \pref{lem:type-in-type}.
\item[Case \rul{Ty\_Cast}:]
By inversion.
\item[Case \rul{Ty\_Case}:]
By inversion.
\item[Case \rul{Ty\_Lam}:]
We'll adopt the metavariable names from the rule:
\[
\ottdruleTyXXLam{}
\]
We must show $[[S;Rel(G) |-ty UPI d.k : Type{} ]]$.
Working backward, use \rul{Ty\_Pi} so that we must show
$[[S;Rel(G,d) |-ty k : Type{} ]]$, which is true by induction.
\item[Case \rul{Ty\_Fix}:]
We'll adopt the metavariable names from the rule:
\[
\ottdruleTyXXFix{}
\]
The induction hypothesis tells us $[[S;Rel(G) |-ty UPI a:Rel k.k : Type{} ]]$.
Inversion on \rul{Ty\_Pi} tells us $[[S;Rel(G),a:Rel k |-ty k : Type{} ]]$.
\pref{lem:tyvar-reg} gives us $[[S;Rel(G) |-ty k : Type{} ]]$ as desired.
\item[Case \rul{Ty\_Absurd}:] Immediate.
\end{description}
\end{proof}

\begin{lemma}[Proposition regularity]
\label{lem:prop-reg}
If $[[S;G |-co g : phi]]$, then $[[S;Rel(G) |-prop phi]]$.
\end{lemma}

\begin{proof}
By induction on the typing derivation.

\begin{description}
\item[Case \rul{Co\_Var}:] By \pref{lem:covar-reg}, \pref{lem:ctx-reg}, and
 \pref{lem:weakening}.
\item[Case \rul{Co\_Refl}:] Immediate.
\item[Case \rul{Co\_Sym}:] By induction.
\item[Case \rul{Co\_Trans}:] By induction.
\item[Case \rul{Co\_Coherence}:] Immediate.
\item[Case \rul{Co\_Con}:] Immediate.
\item[Case \rul{Co\_AppRel}:] Immediate.
\item[Case \rul{Co\_AppIrrel}:] Immediate.
\item[Case \rul{Co\_CApp}:] Immediate.
\item[Case \rul{Co\_PiTy}:] 
We adopt the metavariable names from the statement of the rule:
\[
\nosupp{\ottdruleCoXXPiTy{}}
\]
The induction hypothesis (and inversion) give us the following:
\begin{itemize}
\item $[[S;Rel(G) |-ty k1 : Type{}]]$
\item $[[S;Rel(G) |-ty k2 : Type{}]]$
\item $[[S;Rel(G),a:Rel k1 |-ty s1 : Type{}]]$
\item $[[S;Rel(G),a:Rel k1 |-ty s2 : Type{}]]$
\end{itemize}
We can straightforwardly use \rul{Ty\_Pi} to show that
$[[S;Rel(G) |-ty PI a:rel k1.s1 : Type{}]]$.
Choose a fresh $[[b]]$. We know $[[S |-ctx Rel(G),a:Rel k1]]$ by \pref{lem:ctx-reg}.
We can then use \rul{Ctx\_TyVar} (with \pref{lem:increasing-rel})
to show that $[[S |-ctx Rel(G),b :Rel k2,a:Rel k1]]$ (along with a little inversion
and rebuilding to reorder the variables).
We established above that $[[S;Rel(G),a:Rel k1 |-ty s2 : Type{}]]$.
Use weakening, \pref{lem:weakening}, (here and elsewhere in this case) to get
$[[S;Rel(G),b:Rel k2,a:Rel k1 |-ty s2 : Type{}]]$.
We can use \rul{Co\_Sym} to see that
$[[S;Rel(G),b:Rel k2 |-co sym h : k2 [Type{}]~[Type{}] k1]]$
and then \rul{Ty\_Cast} to see that
$[[S;Rel(G),b:Rel k2 |-ty b |> sym h : k1]]$.
\pref{lem:ty-subst} then gives us
$[[S;Rel(G),b:Rel k2 |-ty s2[b |> sym h/a] : Type{}]]$.
Use \rul{Ty\_Pi} to get $[[S;Rel(G) |-ty PI b:rel k2.(s2[b |> sym h/a]) : Type{}]]$
and $\alpha$-equivalence to get
$[[S;Rel(G) |-ty PI a:rel k2.(s2[a |> sym h/a]) : Type{}]]$.
We are done by \rul{Prop\_Equality}.
\item[Case \rul{Co\_PiCo}:]
We adopt the metavariable names from the statement of the rule:
\[
\nosupp{\ottdruleCoXXPiCo{}}
\]
The induction hypothesis (and inversion) give us the following:
\begin{itemize}
\item $[[S;Rel(G) |-ty t1 : k3]]$
\item $[[S;Rel(G) |-ty t2 : k4]]$
\item $[[S;Rel(G) |-ty s1 : k5]]$
\item $[[S;Rel(G) |-ty s2 : k6]]$
\item $[[S;Rel(G),c:t1 [k3]~[k5] s1 |-ty k1 : Type{}]]$
\item $[[S;Rel(G),c:t1 [k3]~[k5] s1 |-ty k2 : Type{}]]$
\end{itemize}
We can straightforwardly use \rul{Ty\_Pi} to show that
$[[S;Rel(G) |-ty PI c:t1 [k3]~[k5] s1.k1 : Type{}]]$.
Choose a fresh $[[b]]$. We know $[[S |-ctx Rel(G),c:t1 [k3]~[k5] s1]]$ by \pref{lem:ctx-reg}.
We can then use \rul{Ctx\_CoVar} (with \pref{lem:increasing-rel})
to show that $[[S |-ctx Rel(G),c2 : t2 [k4]~[k6] s2,c:t1 [k3]~[k5] s1]]$ (along with a little inversion
and rebuilding to reorder the variables).
We also know $[[S;Rel(G),c:t1 [k3]~[k5] s1 |-ty k2 : Type{}]]$.
Use weakening, \pref{lem:weakening}, (here and elsewhere in this case) to get
$[[S;Rel(G),c2:t2 [k4]~[k6] s2,c:t1 [k3]~[k5] s1 |-ty k2 : Type{}]]$.
We can use typing rules straightforwardly to see that
$[[S;Rel(G),c2:t2 [k4]~[k6] s2 |-co h1 ;; c2 ;; sym h2 : t1 [k3]~[k5] s1]]$.
\pref{lem:co-subst} then gives us
$[[S;Rel(G),c2:t2 [k4]~[k6] s2 |-ty k2[h1 ;; c2 ;; sym h2/c] : Type{}]]$.
Use \rul{Ty\_Pi} to get $[[S;Rel(G) |-ty PI c2:t2 [k4]~[k6] s2.(k2[h1;;c2;;sym h2/c]) : Type{}]]$
and $\alpha$-equivalence to get
$[[S;Rel(G) |-ty PI c:t2 [k4]~[k6] s2.(k2[h1;;c;;sym h2/c]) : Type{}]]$.
We are done.
\item[Case \rul{Co\_Case}:] Immediate.
\item[Case \rul{Co\_Lam}:]
We adopt the metavariable names from the statement of the rule:
\[
\nosupp{\ottdruleCoXXLam{}}
\]
We can use
\rul{Ty\_Lam} to get $[[S;G |-ty \a:rel k1.t1 : UPI a:rel k1.s1]]$.
Proceeding similarly to the case for \rul{Co\_PiTy}, we can
get $[[S;G |-ty \a:rel k2.(t2[a |> sym h/a]) : UPI a:rel k2. (s2[a |> sym h/a])]]$
and we are done by \pref{lem:increasing-rel}.
\item[Case \rul{Co\_CLam}:]
Similar to previous case and the case for \rul{Co\_PiCo}.
\item[Case \rul{Co\_Fix}:] Immediate.
\item[Case \rul{Co\_Absurd}:] By induction and \rul{Ty\_Absurd}.
\item[Case \rul{Co\_ArgK}:] By induction, inversion, \pref{lem:ctx-reg},
and \pref{lem:tyvar-reg}.
\item[Case \rul{Co\_CArgK1}:] By induction, inversion, \pref{lem:ctx-reg},
and \pref{lem:covar-reg}.
\item[Case \rul{Co\_CArgK2}:] Similar to previous case.
\item[Case \rul{Co\_ArgKLam}:] Similar to case for \rul{Co\_ArgK}.
\item[Case \rul{Co\_CArgKLam1}:] Similar to case for \rul{Co\_CArgK1}.
\item[Case \rul{Co\_CArgKLam2}:] Similar to previous case.
\item[Case \rul{Co\_Res}:] Immediate.
\item[Case \rul{Co\_ResLam}:] Immediate.
\item[Case \rul{Co\_InstRel}:] We adopt the metavariable names from the
statement of the rule:
\[
\ottdruleCoXXInstRel{}
\]
We will prove that $[[s1[t1/a] ]]$ is well-typed; the proof for $[[s2[t2/a] ]]$
is similar.
The induction hypothesis (and some inversion) tells us
$[[S;Rel(G) |-ty PI a:Rel k1. s1 : Type{}]]$.
Further inversion gives us $[[S;G,a:Rel k1 |-ty s1 : Type{}]]$.
The induction hypothesis and an inversion also gives us
$[[S;Rel(G) |-ty t1 : k1]]$.
\pref{lem:ty-subst} gives us $[[S;Rel(G) |-ty s1[t1/a] : Type{}]]$ as desired.
\item[Case \rul{Co\_InstIrrel}:] Similar to previous case.
\item[Case \rul{Co\_CInst}:] Similar to previous case.
\item[Case \rul{Co\_InstLamRel}:] Similar to previous case.
\item[Case \rul{Co\_InstLamIrrel}:] Similar to previous case.
\item[Case \rul{Co\_CInstLam}:] Similar to previous case.
\item[Case \rul{Co\_NthRel}:] Immediate.
\item[Case \rul{Co\_NthIrrel}:] Immediate.
\item[Case \rul{Co\_Left}:] Immediate.
\item[Case \rul{Co\_RightRel}:]
We adopt the metavariable names from the statement of the rule:
\[
\nosupp{\ottdruleCoXXRightRel{}}
\]
The induction hypothesis tells us $[[S;Rel(G) |-prop t1 s1 (k3[s1/a])~(k4[s2/a]) t2 s2]]$, and thus inversion gives us $[[S;Rel(G) |-ty t1 s1 : k3[s1/a] ]]$.
We know $[[S;G |-ty t1 : MPI a:Rel k1. k3]]$, and thus we can invert the
type application to get $[[S;Rel(G) |-ty s1 : k1]]$ as desired. We can
similarly derive the type for $[[s2]]$, and we are thus done.
\item[Case \rul{Co\_RightIrrel}:] Similar to previous case.
\item[Case \rul{Co\_Kind}:] By \pref{lem:kind-reg}.
\item[Case \rul{Co\_Step}:] Immediate.
\end{description}
\end{proof}

\section{Preservation}

\begin{lemma}[Correctness of $[[build_kpush_co]]$]
\label{lem:build-kpush-co}
Assume $[[S;G |-cev ps : D[ts/as] ]]$, and let $[[gi = build_kpush_co(h; ps_{1..i-1})]]$
and $[[pi' = cast_kpush_arg(pi;gi)]]$.
If $[[S;Rel(G) |-co h : (MPI D.s)[ts/as] [Type{}]~[Type{}] (MPI D.s)[ts'/as] ]]$, then:
\begin{enumerate}
\item
$[[S;Rel(G) |-co build_kpush_co(h; ps) : s[ts/as][ps/dom(D)] [Type{}]~[Type{}] s[ts'/as][ps'/dom(D)] ]]$
\item $[[S;G |-cev ps' : D[ts'/as] ]]$
\end{enumerate}
\end{lemma}

\begin{proof}
Proceed by induction on $[[S;G |-cev ps : D[ts/as] ]]$.

\begin{description}
\item[Case \rul{Cev\_Nil}:] In this case, both $[[ps]]$ and $[[D]]$ are
empty. We must prove $[[S;Rel(G) |-co build_kpush_co(h; empty) : s[ts/as] [Type{}]~[Type{}] s[ts'/as] ]]$. By definition, $[[build_kpush_co(h; empty) = h]]$. We
are done by assumption and \rul{Cev\_Nil}.
\item[Case \rul{Cev\_TyRel}:]
In this case, we have $[[ps = ps0, t0]]$ and $[[D = D0, b :Rel k]]$
with $[[S;G |-cev ps0 : D0[ts/as] ]]$ and $[[S;G |-ty t0 : k[ts/as][ps0/dom(D0)] ]]$.
We can see that $[[build_kpush_co(h; ps0, t0) = let c := build_kpush_co(h; ps0) in c@(t0 ~={argk c} t0 |> argk c) ]]$.
The induction hypothesis tells us that
$[[S;Rel(G) |-co c : (MPI b :Rel k.s)[ts/as][ps0/dom(D0)] [Type{}]~[Type{}] (MPI b:Rel k.s)[ts'/as][ps0'/dom(D0)] ]]$. We can thus deduce the following:
\begin{itemize}
\item $[[S;Rel(G) |-co argk c : k[ts/as][ps0/dom(D0)] [Type{}]~[Type{}] k[ts'/as][ps0'/dom(D0)] ]]$
\item $[[S;Rel(G) |-ty t0 |> argk c : k[ts'/as][ps0'/dom(D0)] ]]$
\item $[[S;Rel(G) |-co t0 ~={argk c} t0 |> argk c : t0 [k[ts/as][ps0/dom(D0)] ]~[k[ts'/as][ps0'/dom(D0)] ] t0 |> argk c ]]$
\item $[[S;Rel(G) |-co c@(t0 ~={argk c} t0 |> argk c) : s[ts/as][ps0/dom(D0)][t0/b] [Type{}]~[Type{}] s[ts'/as][ps0'/dom(D0)][t0 |> argk c/b] ]]$
\end{itemize}
Note that $[[cast_kpush_arg(t0;c) = t0 |> argk c]]$ and thus that we can say
$[[t0' = t0 |> argk c]]$. Noting that the $[[ps0]]$ cannot have $[[b]]$ free due to
the Barendregt convention, we can rewrite the substutition $[ [[ps0/dom(D0)]] ][ [[t0/b]] ]$ as $[ [[ps/dom(D)]] ]$ and rewrite the last judgment above as
$[[S;Rel(G) |-co build_kpush_co(h; ps) : s[ts/as][ps/dom(D)] [Type{}]~[Type{}] s[ts'/as][ps'/dom(D)] ]]$, which is what we are trying to prove. We are done
proving result (1).

For result (2), we must prove $[[S;G |-cev ps0', t0 |> argk c : D0[ts'/as], b :Rel k[ts'/as] ]]$. This fact comes from a straightforward use of \rul{Cev\_TyRel}.
\item[Case \rul{Cev\_TyIrrel}:]
Similar to previous case.
\item[Case \rul{Cev\_Co}:]
In this case, we have $[[ps = ps0, g0]]$ and $[[D = D0, c0 : phi0]]$
with $[[S;G |-cev ps0 : D0[ts/as] ]]$ and $[[S;Rel(G) |-co g0 : phi0[ts/as][ps0/dom(D0)] ]]$.
We can see that $[[build_kpush_co(h; ps0, g0) = let c := build_kpush_co(h; ps0) in c@(g0, sym (argk 1 c) ;; g0 ;; argk 2 c)]]$.
The induction hypothesis tells us that
$[[S;Rel(G) |-co c : (MPI c0:phi0.s)[ts/as][ps0/dom(D0)] [Type{}]~[Type{}] (MPI c0:phi0.s)[ts'/as][ps0'/dom(D0)] ]]$. Let $[[phi0 = s1 [k1]~[k2] s2]]$. We can thus deduce the following:
\begin{itemize}
\item $[[S;Rel(G) |-co sym (argk 1 c) : s1[ts'/as][ps0'/dom(D0)] [k1[ts'/as][ps0'/dom(D0)] ]~[k1[ts/as][ps0/dom(D0)] ] s1[ts/as][ps0/dom(D0)] ]]$
\item $[[S;Rel(G) |-co argk 2 c : s2[ts/as][ps0/dom(D0)] [k2[ts/as][ps0/dom(D0)] ]~[k2[ts'/as][ps0'/dom(D0)] ] s2[ts'/as][ps0'/dom(D0)] ]]$
\item $[[S;Rel(G) |-co sym (argk 1 c) ;; g0 ;; argk 2 c : s1[ts'/as][ps0'/dom(D0)] [k1[ts'/as][ps0'/dom(D0)] ]~[k2[ts'/as][ps0'/dom(D0)] ] s2[ts'/as][ps0'/dom(D0)] ]]$
\item $[[S;Rel(G) |-co c@(g0, sym (argk 1 c) ;; g0 ;; argk 2 c) : s[ts/as][ps0/dom(D0)][g0/c0] [Type{}]~[Type{}] s[ts'/as][ps0'/dom(D0)][sym (argk 1 c) ;; g0 ;; argk 2 c/c0] ]]$
\end{itemize}
Note that $[[cast_kpush_arg(g0;c) = sym (argk 1 c) ;; g0 ;; argk 2 c]]$ and
thus that we can say $[[g0' = sym (argk 1 c) ;; g0 ;; argk 2 c]]$.
Noting that the $[[ps0]]$ cannot have $[[c0]]$ free due to the Barendregt
convention, we can rewrite the substitution $[ [[ps0/dom(D0)]] ][ [[g0/c0]] ]$
as $[ [[ps/dom(D)]] ]$ and rewrite the last judgment above as
$[[S;Rel(G) |-co build_kpush_co(h; ps) : s[ts/as][ps/dom(D)] [Type{}]~[Type{}] s[ts'/as][ps'/dom(D)] ]]$, which is what we are trying to prove. We are done
proving result (1).

To prove result (2), we must show $[[S;G |-cev ps0', sym (argk 1 c) ;; g0 ;; argk 2 c : D0[ts'/as], c0 : phi0[ts'/as] ]]$, which we get from a straightforward
use of \rul{Cev\_Co}.
\end{description}
\end{proof}

\begin{remark}
\pref{lem:build-kpush-co} could also be rewritten to work with
$[[UPI]]$, but with no need.
\end{remark}

\begin{theorem}[Preservation]
\label{thm:preservation}
If $[[S;G |-ty t : k]]$ and $[[S;G |-s t --> t']]$, then
$[[S;G |-ty t' : k]]$.
\end{theorem}

\begin{proof}
By induction on the typing derivation.

\begin{description}
\item[Case \rul{Ty\_Var}:] Impossible, as variables do not step.
\item[Case \rul{Ty\_Con}:] Impossible, as constants do not step.
\item[Case \rul{Ty\_AppRel}:] We now have several cases, depending on
how the expression has stepped:
\begin{description}
\item[Case \rul{S\_BetaRel}:] By \pref{lem:ty-subst}.
\item[Case \rul{S\_App\_Cong}:] By induction.
\item[Case \rul{S\_PushRel}:] We adopt the metavariable names from the
statement of the rule:
\[
\ottdruleSXXPushRel{}
\]
Inversion on $[[S;G |-ty (v |> g0) t : k0]]$
gives us $[[S;G |-ty t : k']]$ and $[[S;G |-ty v : PI a:rel k.s]]$.
Straightforward application of typing rules gives us
$[[S;Rel(G) |-co g1 : k' [Type{}]~[Type{}] k]]$
and $[[S;Rel(G) |-co g2 : s[t |> g1/a] [Type{}]~[Type{}] s'[t/a] ]]$.
We can then derive
$[[S;G |-ty t |> g1 : k]]$ and thus
$[[S;G |-ty v (t |> g1) : s[t |> g1/a] ]]$
and
$[[S;G |-ty v (t |> g1) |> g2 : s'[t/a] ]]$
as desired.
\end{description}
\item[Case \rul{Ty\_AppIrrel}:] We now have several cases:
\begin{description}
\item[Case \rul{S\_BetaIrrel}:] By \pref{lem:ty-subst}.
\item[Case \rul{S\_App\_Cong}:] By induction.
\item[Case \rul{S\_PushIrrel}:] Similar to the case for \rul{S\_PushRel}.
\end{description}
\item[Case \rul{Ty\_CApp}:] We now have several cases:
\begin{description}
\item[Case \rul{S\_CBeta}:] By \pref{lem:co-subst}.
\item[Case \rul{S\_App\_Cong}:] By induction.
\item[Case \rul{S\_CPush}:] We adopt the metavariable names of the rule:
\[
\ottdruleSXXCPush{}
\]
We can see that $[[S;G |-ty (v |> g0) h : s'[h/c] ]]$.
Let $[[phi = t1 [k1]~[k2] t2 ]]$ and $[[phi' = t3 [k3]~[k4] t4]]$.
Inversion and application of typing rules tells us the following:
\begin{itemize}
\item $[[S;G |-ty v : PI c:phi. s]]$
\item $[[S;Rel(G) |-co h : t3 [k3]~[k4] t4]]$
\item $[[S;Rel(G) |-co g1 : t1 [k1]~[k3] t3]]$
\item $[[S;Rel(G) |-co g2 : t2 [k2]~[k4] t4]]$
\item $[[S;Rel(G) |-co h' : t1 [k1]~[k2] t2]]$
\item $[[S;Rel(G) |-co g3 : s[h'/c] [Type{}]~[Type{}] s'[h/c] ]]$
\item $[[S;G |-ty v h' : s[h'/c] ]]$
\item $[[S;G |-ty v h' |> g3 : s'[h/c] ]]$
\end{itemize}
Note that the last fact proves this case.
\end{description}
\item[Case \rul{Ty\_Pi}:] Impossible, as $[[PI]]$-types do not step.
\item[Case \rul{Ty\_Cast}:] We now have several cases:
\begin{description}
\item[Case \rul{S\_Trans}:] We adopt the metavariable names of the rule:
\[
\ottdruleSXXTrans{}
\]
We know $[[S;G |-ty (v |> g1) |> g2 : k]]$. Inversion and typing rules
give us the following:
\begin{itemize}
\item $[[S;Rel(G) |-co g2 : k2 [Type{}]~[Type{}] k]]$
\item $[[S;Rel(G) |-co g1 : k3 [Type{}]~[Type{}] k2]]$
\item $[[S;G |-ty v : k3]]$
\item $[[S;Rel(G) |-co g1 ;; g2 : k3 [Type{}]~[Type{}] k]]$
\item $[[S;G |-ty v |> (g1 ;; g2) : k]]$
\end{itemize}
Note that the last fact proves this case.
\item[Case \rul{S\_Cast\_Cong}:] By induction.
\end{description}
\item[Case \rul{Ty\_Case}:] We now have several cases:
\begin{description}
\item[Case \rul{S\_Match}:] We adopt the metavariable names of the rule:
\[
\ottdruleSXXMatch{}
\]
Inversion and typing rules tell us the following:
\begin{itemize}
\item $[[S;G |-ty H{ts} ps : MPI D'. H'{} ss]]$ (premise of \rul{Ty\_Case})
\item Using \pref{lem:tycon-inversion}:
\begin{itemize}
\item $[[S |-tc H : as :Irrel ks; D2; H' ]]$
\item $[[D0, D1 = D2[ts/as] ]]$
\item $[[S;G |-vec ps : D0]]$
\item $[[D' = D1[ps/dom(D0)] ]]$ and $[[ss = ts]]$ (\pref{lem:determinacy})
\end{itemize}
\item The premises of \rul{Alt\_Match} (also using \pref{lem:determinacy-tycon}):
\begin{itemize}
\item $[[D3,D4 = D2[ts/as] ]]$
\item $[[length D4 = length D1]]$
\item $[[S;G |-ty t0 : MUPI D3, c: H{ts} ps [MPI D'.H'{} ts]~[MPI D4.H'{} ts] H{ts} dom(D3). k]]$
\end{itemize}
\item $[[D3 = D0]]$ and $[[D4 = D1]]$ (from $[[length D4 = length D1]]$ and the definitions
of $[[D0]]$, $[[D1]]$, $[[D3]]$, and $[[D4]]$)
\item $[[S;G |-ty t0 : MUPI D0, c : H{ts} ps [MPI (D1[ps/dom(D0)]).H'{} ts]~[MPI D1.H'{} ts] H{ts} dom(D0). k]]$ (rewriting)
\item $[[S;G |-ty t0 ps : MUPI c: H{ts} ps [MPI (D1[ps/dom(D0)]).H'{} ts]~[MPI (D1[ps/dom(D0)]).H'{} ts] H{ts} ps. k]]$ (\pref{lem:tel-app}, where the $[[k]]$ needs no substitution by \pref{lem:scoping})
\item $[[S;G |-ty t0 ps <H {ts} ps> : k]]$ (\rul{Co\_Refl} and \rul{Ty\_CApp}, where the $[[k]]$ needs no substitution
by \pref{lem:scoping})
\end{itemize}
Note that this last fact proves this case.
\item[Case \rul{S\_Default}:] We adopt the metavariable names of the rule:
\[
\ottdruleSXXDefault{}
\]
By \rul{Ty\_Case}, the redex has kind $[[k]]$; inversion also gives us
$[[S;G;s0;t |-alt _ -> s : k]]$. Inverting \rul{Alt\_Default} gives us
our goal.
\item[Case \rul{S\_DefaultCo}:] Similar to previous case.
\item[Case \rul{S\_Case\_Cong}:] By induction.
\item[Case \rul{S\_KPush}:] We adopt the metavariable names of the rule:
\[
\ottdruleSXXKPush{}
\]
Note that we need to prove only that the type of
$[[(H{ts} ps) |> h]]$ matches that of $[[H{ts'} ps']]$,
namely $[[MPI (D2[ts'/as][ps'/dom(D1)]). H'{} ts']]$.
We can derive these facts:
\begin{itemize}
\item $[[S;G |-ty H{ts} ps : MPI (D2[ts/as][ps/dom(D1)]). H'{} ts]]$ (by inversion
of the typing judgment on the redex)
\item $[[S;G |-ty H{ts} : MPI (D1[ts/as],D2[ts/as]). H'{} ts]]$ (by \pref{lem:app-inversion}
followed by inverting \rul{Ty\_Con})
\item $[[S;G |-vec ps : D1[ts/as] ]]$ (also from \pref{lem:app-inversion})
\item $[[S;G |-vec ts : as :Rel ks]]$ (by inversion)
\item $[[S;Rel(G) |-vec ts' : as:Rel ks]]$ (from \rul{S\_KPush})
\item $[[S;Rel(G) |-co res^n h : H'{} ts [Type{}]~[Type{}] H'{} ts']]$ (with 
the well-formedness of $[[ts]]$ and
$[[ts']]$ telling us that the $[[ts]]$ and $[[ts']]$ do not have any
variables in $[[dom(D2)]]$ free)
\item $\forall [[i]], \exists [[ki]]$, $[[S;Rel(G) |-ty ti : ki]]$ (by \pref{lem:vec-kind})
\item $\forall [[i]], \exists [[ki']]$, $[[S;Rel(G) |-ty ti' : ki']]$ (by \pref{lem:vec-kind})
\item $\forall [[i]]$, $[[S;Rel(G) |-co nth i (res^n h) : ti [ki]~[ki'] ti' ]]$ (from \rul{Co\_NthRel})
\item $[[S;G |-ty k : Type{}]]$, recalling that $[[k = MPI as:Irrel ks, D. H'{} as]]$ (by \pref{lem:ctx-reg}, \pref{lem:tycon-kind}, and
\pref{lem:weakening})
\item $[[S;G |-co <k> : k [Type{}]~[Type{}] k]]$ (by \rul{Co\_Refl})
\item $[[S;G |-co <k>@(nths (res^n h)) : (MPI D1,D2. H'{} as)[ts/as] [Type{}]~[Type{}] (MPI D1,D2. H'{} as)[ts'/as] ]]$ (by \pref{lem:tel-inst})
\item $[[S;G |-cev ps : D1[ts/as] ]]$ (by \pref{lem:vec-cev})
\item $[[S;G |-cev ps' : D1[ts'/as] ]]$ (by \pref{lem:build-kpush-co})
\item $[[S;G |-vec ps' : D1[ts'/as] ]]$ (by \pref{lem:vec-cev})
\item $[[S;G |-ty H{ts'} : MPI (D1[ts'/as],D2[ts'/as]). H'{} ts']]$ (by a
use of \rul{Ty\_Con}, along with \pref{lem:ctx-reg})
\item $[[S;G |-ty H{ts'} ps' : MPI (D2[ts'/as][ps'/dom(D1)]). H'{} ts']]$
\end{itemize}
This last fact is what we are trying to prove, and so we are done.
\end{description}
\item[Case \rul{Ty\_Lam}:] We now have several cases:
\begin{description}
\item[Case \rul{S\_IrrelAbs\_Cong}:] By induction.
\item[Case \rul{S\_APush}:] We adopt the metavariable names from the rule:
\[
\ottdruleSXXAPush{}
\]
Inversion and typing rules then give us the following facts:
\begin{itemize}
\item $[[S;G |-ty \a:Irrel k. (v |> g) : UPI a:Irrel k. k1]]$
\item $[[S;G,a :Irrel k |-ty v |> g : k1]]$
\item $[[S;Rel(G), a :Rel k |-co g : k0 [Type{}]~[Type{}] k1]]$
\item $[[S;G, a:Irrel k |-ty v : k0]]$
\item $[[S;G |-ty \a:Irrel k.v : UPI a:Irrel k. k0]]$
\item $[[S;Rel(G) |-ty k : Type{}]]$ (by \pref{lem:ctx-reg} and
\pref{lem:tyvar-reg})
\item $[[S;Rel(G) |-co <k> : k [Type{}]~[Type{}] k]]$ (by \rul{Co\_Refl})
\item $[[S;Rel(G) |-co UPI a:Irrel <k>. g : UPI a:Irrel k. k0 [Type{}]~[Type{}] UPI a:Irrel k. (k1[a |> sym <k>/a]) ]]$ (by \rul{Co\_PiTy})
\item $[[S;Rel(G) |-ty UPI a:Irrel k. (k1[a |> sym <k>/a]) : Type{} ]]$ (by \pref{lem:prop-reg})
\item $[[S;Rel(G) |-ty UPI a:Irrel k.k1 : Type{}]]$ (by \pref{lem:kind-reg})
\item $[[S;Rel(G) |-co (UPI a:Irrel k. (k1[a |> sym <k>/a])) ~={<Type{}>} (UPI a:Irrel k. k1) : (UPI a:Irrel k. (k1[a |> sym <k>/a])) [Type{}]~[Type{}] (UPI a:Irrel k. k1)]]$ (by \rul{Co\_Coherence})
\end{itemize}
We can then conclude, by \rul{Co\_Trans} and \rul{Ty\_Cast}, that the result
has the same type, $[[UPI a:Irrel k. k1]]$ as the redex.
\end{description}
\item[Case \rul{Ty\_Fix}:] We now have several cases:
\begin{description}
\item[Case \rul{S\_Unroll}:] We adopt the variable names from the rule:
\[
\ottdruleSXXUnroll{}
\]
We can then derive the following:
\begin{itemize}
\item $[[S;G |-ty \a:Rel k.s : UPI a:Rel k. k]]$ (by inversion)
\item $[[S;G, a:Rel k |-ty s : k]]$ (by inversion)
\item $[[S;G |-ty fix (\a:Rel k.s) : k ]]$
(by \rul{Ty\_Fix})
\item $[[S;G |-ty s[fix (\a:Rel k.s)/a] : k]]$ (by \pref{lem:ty-subst})
\end{itemize}
This last judgment is what we are trying to prove; we are done.
\item[Case \rul{S\_Fix\_Cong}:] By induction.
\item[Case \rul{S\_FPush}:] We adopt the metavariable names from the rule:
\[
\ottdruleSXXFPush{}
\]
We can derive the following facts:
\begin{itemize}
\item $[[S;G |-ty fix ((\a:Rel k.s) |> g0) : k1]]$ (conclusion of \rul{Ty\_Fix})
\item $[[S;G |-ty (\a:Rel k.s) |> g0 : UPI a:Rel k1.k1]]$ (premise of \rul{Ty\_Fix})
\item $[[S;Rel(G) |-co g0 : k0 [Type{}]~[Type{}] UPI a:Rel k1.k1]]$ (inversion on \rul{Ty\_Cast})
\item $[[S;G |-ty \a:Rel k.s : k0]]$ (same inversion)
\item $[[S;G |-ty \a:Rel k.s : UPI a:Rel k. k2]]$ (inversion by \rul{Ty\_Lam})
\item $[[k0 = UPI a:Rel k.k2]]$ (\pref{lem:determinacy})
\item $[[S;G,a:Rel k |-ty s : k2]]$ (inversion by \rul{Ty\_Lam})
\item $[[S;Rel(G) |-co g0 : (UPI a:Rel k.k2) [Type{}]~[Type{}] (UPI a:Rel k1.k1)]]$ (substitution)
\item $[[S;Rel(G) |-co argk g0 : k [Type{}]~[Type{}] k1]]$ (\rul{Co\_ArgK})
\item $[[g2 = argk g0]]$ (premise of \rul{S\_FPush})
\item $[[S;G,a:Rel k |-ty a |> g2 : k1]]$ (\rul{Ty\_Cast})
\item $[[S;G,a:Rel k |-co a ~={g2} a |> g2 : a [k]~[k1] a |> g2]]$ (\rul{Co\_Coherence})
\item $[[S;G,a:Rel k |-co g0@(a ~={g2} a |> g2) : k2 [Type{}]~[Type{}] k1[a |> g2/a] ]]$ (\rul{Co\_InstRel})
\item $[[S;Rel(G) |-ty UPI a:Rel k1.k1 : Type{}]]$ (\pref{lem:kind-reg})
\item $[[S;Rel(G),a:Rel k1 |-ty k1 : Type{}]]$ (inversion on \rul{Ty\_Pi})
\item $[[S;Rel(G) |-ty k1 : Type{}]]$ (\pref{lem:tyvar-reg} and \pref{lem:weakening})
\item $[[k1[a |> g2/a] = k1]]$ (\pref{lem:scoping}, noting that $[[a # k1]]$)
\item $[[S;G,a:Rel k |-co g0@(a ~={g2} a |> g2) : k2 [Type{}]~[Type{}] k1]]$ (substitution)
\item $[[S;G,a:Rel k |-co sym g2 : k1 [Type{}]~[Type{}] k]]$ (\rul{Co\_Sym} with \pref{lem:weakening})
\item $[[g1 = g0@(a ~={g2} a |> g2) ;; sym g2]]$ (premise of \rul{S\_FPush})
\item $[[S;G,a:Rel k |-co g1 : k2 [Type{}]~[Type{}] k]]$ (\rul{Co\_Trans})
\item $[[S;G,a:Rel k |-ty s |> g1 : k]]$ (\rul{Ty\_Cast} and \pref{lem:increasing-rel})
\item $[[S;G |-ty \a:Rel k. (s |> g1) : UPI a:Rel k.k]]$ (\rul{Ty\_Lam})
\item $[[S;G |-ty fix (\a:Rel k. (s |> g1)) : k]]$ (\rul{Ty\_Fix})
\item $[[S;G |-ty (fix (\a:Rel k. (s |> g1))) |> g2 : k1]]$ (\rul{Ty\_Cast})
\end{itemize}
The last item proves this case.
\end{description}
\item[Case \rul{Ty\_Absurd}:] Impossible, as $[[absurd g t]]$ does not step.
\end{description}
\end{proof}

\section{Consistency}

\begin{definition}[Coercion erasure]
\label{defn:co-erasure}
Define the erasure of a type $[[ee = |t|]]$ by the following function (including
auxiliary functions):\\[1ex]
{
\setlength{\abovedisplayskip}{-20pt}
\setlength{\belowdisplayskip}{-20pt}
\setlength{\abovedisplayshortskip}{-20pt}
\setlength{\belowdisplayshortskip}{-20pt}
\ottfundefneraseXXtype{}\\[1ex]
\ottfundefneraseXXbinder{}\\[1ex]
\ottfundefneraseXXprop{}\\[1ex]
\ottfundefneraseXXalt{}
}
\end{definition}

\begin{notation}[Erased types in consistency proof]
The rewrite relation $[[~>]]$ is defined only over \emph{erased}
types. We use a convention that the occurrence of a metavariable
in a mention of the $[[~>]]$ relation indicates that the metavariable
represents an erased element.
\end{notation}

\begin{notation}[Reduction] ~
\begin{itemize}
\item We write $[[ps ~> ps']]$ to mean $\forall [[i]], [[pi ~> pi']]$.
\item We write $[[t1 ~> t3 <~ t2]]$ to mean $[[t1 ~> t3]]$ and $[[t2 ~> t3]]$.
\item We write $[[~>*]]$ to mean the reflexive, transitive closure of $[[~>]]$.
\item We write $[[t1 ~>* t3 *<~ t2]]$ to mean $[[t1 ~>* t3]]$ and $[[t2 ~>* t3]]$.
\end{itemize}
\end{notation}

\begin{lemma}[Parallel reduction substitution] ~
\label{lem:red-subst}
Assume $[[ps ~> ps']]$. We can then conclude:
\begin{enumerate}
\item $[[t[ps/zs] ~> t[ps'/zs] ]]$
\item $[[d[ps/zs] ~> d[ps'/zs] ]]$
\end{enumerate} 
\end{lemma}

\begin{proof}
By straightforward
mutual induction on the structure of $[[t]]$/$[[d]]$.
%% \begin{description}
%% \item[Case $[[t = a]]$:] By assumption.
%% \item[Case $[[t = b]]$:] By \rul{R\_Refl}.
%% \item[Case $[[t = H{ts}]]$:] By induction (w.r.t each element of ts) and \rul{R\_Con}.
%% \item[Case $[[t = t1 t2]]$:] By induction and \rul{R\_AppRep}.
%% \item[Case $[[t = t1 {t2}]]$:] By induction and \rul{R\_AppIrrel}.
%% \item[Case $[[t = t0 o]]$:] By induction and \rul{R\_CApp}.
%% \item[Case $[[t = PI d. s]]$:] By induction and \rul{R\_Pi}.
%% \item[Case $[[t = case_k s of alts]]$:] By induction and \rul{R\_Case}.
%% \item[Case $[[t = \d.s]]$:] By induction and \rul{R\_Lam}.
%% \item[Case $[[t = fix s]]$:] By induction and \rul{R\_Fix}.
%% \item[Case $[[t = absurd o t]]$:] By induction and \rul{R\_Absurd}.
%% \item[Case $[[d = a :rel k]]$:] By induction and \rul{R\_TyBinder}.
%% \item[Case $[[d = o : t1 (k1)~(k2) t2]]$:] By induction and \rul{R\_CoBinder}
%% \end{description}
\end{proof}

\begin{lemma}[Parallel reduction substitution in parallel] ~
\label{lem:red-subst-par}
Assume $[[ps ~> ps']]$.
\begin{enumerate}
\item If $[[t1 ~> t2]]$, then $[[t1[ps/zs] ~> t2[ps'/zs] ]]$.
\item If $[[d1 ~> d2]]$, then $[[d1[ps/zs] ~> d2[ps'/zs] ]]$.
\end{enumerate}
\end{lemma}

\begin{proof}
By induction on $[[t1 ~> t2]]$/$[[d1 ~> d2]]$.

\begin{description}
\item[Case \rul{R\_Refl}:] By \pref{lem:red-subst}.
\item[Congruence rules:] By induction.
\item[Case \rul{R\_BetaRel}:] It must be that $[[t1 = (\b:Rel k1. t3) t4]]$
and $[[t2 = t3'[t4'/b] ]]$ where $[[t3 ~> t3']]$ and $[[t4 ~> t4']]$.
We must show that
$[[ (\b:Rel k1[ps/zs]. t3[ps/zs]) t4[ps/zs] ~> t3'[t4'/b][ps'/zs] ]]$.
Proceeding by \rul{R\_BetaRel}, the left-hand-side steps to 
$[[ t5[t6/b] ]]$ where $[[t3[ps/zs] ~> t5]]$ and $[[t4[ps/zs] ~> t6]]$.
(We can choose $[[t5]]$ and $[[t6]]$.)
We must thus show that $[[t5[t6/b] = t3'[t4'/b][ps'/zs] ]]$.
First, we reorder substitutions to get
$[[t3'[t4'/b][ps'/zs] = t3'[ps'/zs][t4'[ps'/zs]/b] ]]$, noting
that $[[b # ps']]$ by the Barendregt convention.
Choose $[[t5 = t3'[ps'/zs] ]]$ and $[[t6 = t4'[ps'/zs] ]]$.
We must show that $[[t3[ps/zs] ~> t5]]$ and $[[t4[ps/zs] ~> t6]]$;
expanding gives us that we must show
$[[t3[ps/zs] ~> t3'[ps'/zs] ]]$ and $[[t4[ps/zs] ~> t4'[ps'/zs] ]]$.
Both of these follow directly from the induction hypothesis, and
so we are done.
\item[Case \rul{R\_BetaIrrel}:] Similar to previous case.
\item[Case \rul{R\_CBeta}:] By induction.
\item[Case \rul{R\_Match}:] It must be that:
\begin{itemize}
\item $[[t1 = case_k H{ss} ps0 of alts]]$
\item $[[t2 = t4 ps0' o ]]$ where $[[H -> t3 \in alts]]$,
$[[t3 ~> t4]]$, and $[[ps0 ~> ps0']]$.
\end{itemize}
We must show that
$[[case_k[ps/zs] H{ss[ps/zs]} ps0[ps/zs] of alts[ps/zs] ~> t4[ps'/zs] ps0'[ps'/zs] o ]]$.
Proceeding by \rul{R\_Match}, the left-hand side steps to
$[[t5 ps0'' o ]]$ where $[[t3[ps/zs] ~> t5]]$ and $[[ps0[ps/zs] ~> ps0'']]$,
and we get to choose $[[t5]]$ and $[[ps0'']]$.
We must show that $[[t5 ps0'' o = t4[ps'/zs] ps0'[ps'/zs] o ]]$.
Choose $[[t5 = t4[ps'/zs] ]]$ and $[[ps0'' = ps0'[ps'/zs] ]]$.
We must show that $[[t3[ps/zs] ~> t4[ps'/zs] ]]$ and
$[[ps0[ps/zs] ~> ps0'[ps'/zs] ]]$. Both of these follow from the
induction hypothesis, and so we are done.
\item[Case \rul{R\_Default}:] It must be that:
\begin{itemize}
\item $[[t1 = case_k H{ss} ps0 of _ -> s0; alts]]$
\item $[[t2 = s0']]$ where $[[s0 ~> s0']]$
\end{itemize}
We are done by the induction hypothesis.
\item[Case \rul{R\_Unroll}:] It must be that:
\begin{itemize}
\item $[[t1 = fix (\a:Rel k1.t3)]]$
\item $[[t2 = t4[fix (\a:Rel k2.t4)/a] ]]$ where $[[k1 ~> k2]]$ and
$[[t3 ~> t4]]$.
\end{itemize}
We must show that
$[[fix (\a:Rel k1[ps/zs].t3[ps/zs]) ~> t4[fix (\a:Rel k2.t4)/a][ps'/zs] ]]$.
Proceeding by \rul{R\_Unroll}, the left-hand side steps to
$[[t5[fix (\a:Rel k3.t5)/a] ]]$ where $[[t3[ps/zs] ~> t5]]$
and $[[k1[ps/zs] ~> k3]]$.
We must show that
$[[t5[fix (\a:Rel k3.t5)/a] = t4[fix (\a:Rel k2.t4)/a][ps'/zs] ]]$.
Reorder substitutions on the right to get
$[[t4[fix (\a:Rel k2.t4)/a][ps'/zs] = t4[ps'/zs][fix (\a:Rel k2[ps'/zs].t4[ps'/zs])/a] ]]$, where $[[a # ps']]$ by the Barendregt convention.
Choose $[[t5 = t4[ps'/zs] ]]$ and $[[k3 = k2[ps'/zs] ]]$.
It remains only to show that $[[t3[ps/zs] ~> t4[ps'/zs] ]]$
and $[[k1[ps/zs] ~> k2[ps'/zs] ]]$, both of which follow from the
induction hypothesis. We are done.
\end{description}
\end{proof}

\begin{lemma}[Parallel repeated reduction substitution]
\label{lem:red-star-subst}
If $[[t1 ~>* t2]]$ and $[[ps ~>* ps']]$,
then $[[t1[ps/zs] ~>* t2[ps'/zs] ]]$.
\end{lemma}

\begin{proof}
By iterated induction on the lengths of the reduction chains.
\end{proof}

\begin{lemma}[Application reduction]
\label{lem:app-red}
If $[[H{ts} ps ~> s]]$, then $[[s = H{ts'} ps']]$ where $[[ts ~> ts']]$
and $[[ps ~> ps']]$.
\end{lemma}

\begin{proof}
Straightforward induction on the structure of $[[s0 = H{ts} ps]]$.
\end{proof}

\begin{lemma}[Local diamond]
\label{lem:local-diamond}
Let $[[ti]]$ denote an erased type and $[[di]]$ an erased binder.
\begin{enumerate}
\item
If $[[t0 ~> t1]]$ and $[[t0 ~> t2]]$, then there exists $[[t3]]$ such
that $[[t1 ~> t3 <~ t2]]$.
\item
If $[[d0 ~> d1]]$ and $[[d0 ~> d2]]$, then there exists $[[d3]]$
such that $[[d1 ~> d3 <~ d2]]$.
\end{enumerate}
\end{lemma}

\begin{proof}
By induction on the structure of $[[t0]]$/$[[d0]]$ followed by case analysis
on the reduction of $[[t0]]$/$[[d0]]$. We ignore overlap with the
\rul{R\_Refl} rule, as this is always trivially handled.

\begin{description}
\item[Case $[[t0 = a]]$:] $[[t1]] = [[t2]] = [[t3]] = [[a]]$.
\item[Case $[[t0 = H{ts}]]$:] By induction.
\item[Case $[[t0 = s1 s2]]$:] We now have several cases:
\begin{description}
\item[Case \rul{R\_AppRel}/\rul{R\_AppRel}:] By induction.
\item[Case \rul{R\_AppRel}/\rul{R\_BetaRel}:] It must be that:
\begin{itemize}
\item
$[[t0 = (\a:rel k1. s3) s4]]$
\item $[[t1 = (\a:rel k2. s5) s6]]$, where
$[[k1 ~> k2]]$, $[[s3 ~> s5]]$, and $[[s4 ~> s6]]$, and
\item $[[t2 = s3[s4/a] ]]$.
\end{itemize}
Choose $[[t3 = s5[s6/a] ]]$. We must show $[[t1 ~> t3]]$
and $[[t2 ~> t3]]$. The first is by \rul{R\_BetaRel}.
The second is by \pref{lem:red-subst-par}.
\item[Case \rul{R\_BetaRel}/\rul{R\_BetaRel}:] 
It must be that:
\begin{itemize}
\item $[[t0 = (\a:rel k.s3) s4]]$
\item $[[t1 = s3'[s4'/a] ]]$, where $[[s3 ~> s3']]$ and $[[s4 ~> s4']]$
\item $[[t2 = s3''[s4''/a] ]]$, where $[[s3 ~> s3'']]$ and $[[s4 ~> s4'']]$.
\end{itemize}
Using the induction hypothesis, we can get $[[s5]]$ and $[[s6]]$ such that
\begin{itemize}
\item $[[s3' ~> s5 <~ s3'']]$
\item $[[s4' ~> s6 <~ s4'']]$.
\end{itemize}
Choose $[[t3 = s5[s6/a] ]]$. We must show $[[s3'[s4'/a] ~> s5[s6/a] ]]$
and $[[s3''[s4''/a] ~> s5[s6/a] ]]$. Both of these follow from
\pref{lem:red-subst-par}.
\end{description}
\item[Case $[[t0 = s1 {s2}]]$:] Similar to $[[t0 = s1 s2]]$.
\item[Case $[[t0 = s o]]$:] We now have several cases:
\begin{description}
\item[Case \rul{R\_CApp}/\rul{R\_CApp}:] By induction.
\item[Case \rul{R\_CApp}/\rul{R\_CBeta}:] It must be that:
\begin{itemize}
\item $[[t0 = (\o:k1 [k5]~[k6] k2.s3) o]]$
\item $[[t1 = (\o:k3 [k7]~[k8] k4.s4) o]]$ where $[[k1 ~> k3]]$, $[[k2 ~> k4]]$,
and $[[s3 ~> s4]]$.
\item $[[t2 = s5]]$ where $[[s3 ~> s5]]$
\end{itemize}
The induction hypothesis gives us $[[s6]]$ such that $[[s4 ~> s6 <~ s5]]$.
Choose $[[t3 = s6]]$. We must show $[[t1 ~> t3]]$ and $[[t2 ~> t3]]$.
The first is by \rul{R\_CBeta}. The second is immediate.
\item[Case \rul{R\_CBeta}/\rul{R\_CBeta}:] By induction.
\end{description}
\item[Case $[[t0 = PI d. s0]]$:] By induction and \rul{R\_Pi}.
\item[Case $[[t0 = case_k s0 of alts]]$:]
We now have several cases:
\begin{description}
\item[Case \rul{R\_Case}/\rul{R\_Case}:] By induction and \rul{R\_Case}.
\item[Case \rul{R\_Case}/\rul{R\_Match}:] It must be that:
\begin{itemize}
\item $[[t0 = case_k H{ss} ps of list of H -> ee]]$
\item $[[t1 = case_k' H{ss'} ps' of list of H -> ee']]$
where $[[k ~> k']]$, $[[ss ~> ss']]$, $[[ps ~> ps']]$, and $[[ees ~> ees']]$
(appealing to \pref{lem:app-red})
\item $[[t2 = eei'' ps'' o ]]$, where $[[Hi = H]]$,
$[[eei ~> eei'']]$, and $[[ps ~> ps'']]$.
\end{itemize}
Using the induction hypothesis, we can get $[[eei''']]$ such that
$[[eei' ~> eei''' <~ eei'']]$ and $[[ps''']]$ such that
$[[ps' ~> ps''' <~ ps'']]$.
Choose $[[t3 = eei''' ps''' o]]$. We must show both $[[t1 ~> t3]]$
and $[[t2 ~> t3]]$. The first is by \rul{R\_Match}. The second is by
repeated use of \rul{R\_AppRel}/\rul{R\_AppIrrel}/\rul{R\_CApp}.
\item[Case \rul{R\_Case}/\rul{R\_Default}:] It must be that:
\begin{itemize}
\item $[[t0 = case_k H{ss} ps of _ -> s0; alts]]$
\item $[[t1 = case_k' H{ss'} ps' of _ -> s0'; alts']]$ where
$[[k ~> k']]$, $[[ss ~> ss']]$, $[[ps ~> ps']]$, $[[s0 ~> s0']]$, and
$[[alts ~> alts']]$
\item $[[t2 = s0'']]$ where $[[s0 ~> s0'']]$
\end{itemize}
The induction hypothesis gives us $[[ee]]$ such that $[[s0' ~> ee <~ s0'']]$.
We can see that $[[t1]]$ can step by \rul{R\_Default} (as the type constant
$[[H]]$ does not change), and thus that $[[t1 ~> ee <~ t2]]$. We are done.
\item[Case \rul{R\_Match}/\rul{R\_Match}:] It must be that:
\begin{itemize}
\item $[[t0 = case_k H{ss} ps of alts]]$
\item $[[alti = H -> k1]]$
\item $[[t1 = k1' ps' o ]]$ where $[[k1 ~> k1']]$ and $[[ps ~> ps']]$.
\item $[[t2 = k1'' ps'' o ]]$ where $[[k1 ~> k1'']]$ and $[[ps ~> ps'']]$.
\end{itemize}
The induction hypothesis gives us $[[k1''']]$ and $[[ps''']]$ such that:
\begin{itemize}
\item $[[k1' ~> k1''' <~ k1'']]$
\item $[[ps' ~> ps''' <~ ps'']]$
\end{itemize}
Choose $[[t3 = k1'''[ps'''/zs] ]]$ and we are done by \pref{lem:red-subst-par}.
\item[Case \rul{R\_Match}/\rul{R\_Default}:] Impossible, as the premises
contradict each other.
\item[Case \rul{R\_Default}/\rul{R\_Default}:] By induction.
\end{description}
\item[Case $[[t0 = \d0.s0]]$:] By induction and \rul{R\_Lam}.
\item[Case $[[t0 = fix s0]]$:] We have several cases:
\begin{description}
\item[Case \rul{R\_Fix}/\rul{R\_Fix}:] By induction.
\item[Case \rul{R\_Fix}/\rul{R\_Unroll}:] It must be that:
\begin{itemize}
\item $[[t0 = fix (\a:Rel k1.s1)]]$
\item $[[t1 = fix (\a:Rel k2.s2)]]$ where $[[k1 ~> k2]]$ and $[[s1 ~> s2]]$
\item $[[t2 = s3[fix (\a:Rel k3.s3)/a] ]]$ where $[[k1 ~> k3]]$ and
$[[s1 ~> s3]]$
\end{itemize}
The induction hypothesis gives us $[[k4]]$ and $[[s4]]$ such that
$[[k2 ~> k4 <~ k3]]$ and $[[s2 ~> s4 <~ s3]]$.
Choose $[[t3 = s4[fix (\a:Rel k4.s4)/a] ]]$. We must show
$[[t1 ~> t3]]$ and $[[t2 ~> t3]]$. The first is by \rul{R\_Unroll},
and the second is by \pref{lem:red-subst-par}.
\item[Case \rul{R\_Unroll}/\rul{R\_Unroll}:] It must be that:
\begin{itemize}
\item $[[t0 = fix (\a:Rel k1.s1)]]$
\item $[[t1 = s2[fix (\a:Rel k2.s2)/a] ]]$ where $[[k1 ~> k2]]$ and $[[s1 ~> s2]]$
\item $[[t2 = s3[fix (\a:Rel k3.s3)/a] ]]$ where $[[k1 ~> k3]]$ and $[[s1 ~> s3]]$
\end{itemize}
The induction hypothesis gives us $[[k4]]$ and $[[s4]]$ such that
$[[k2 ~> k4 <~ k3]]$ and $[[s2 ~> s4 <~ s3]]$.
Choose $[[t3 = s4[fix (\a:Rel k4.s4)/a] ]]$ and we are done
by \pref{lem:red-subst-par}.
\end{description}
\item[Case $[[t0 = absurd g s0]]$:] By induction and \rul{R\_Absurd}.
\item[Case $[[d0 = a:rel k0]]$:] By induction and \rul{R\_TyBinder}.
\item[Case $[[d0 = o:t1 [k1]~[k2] t1]]$:] By induction and \rul{R\_CoBinder}.
\end{description}
\end{proof}

\begin{lemma}[Confluence]
\label{lem:confluence}
Let $[[ti]]$ denote an erased type.
If $[[t1 ~>* t2]]$ and $[[t1 ~>* t3]]$, then there exists
$[[t4]]$ such that $[[t2 ~>* t4 *<~ t3]]$.
\end{lemma}

\begin{proof}
Consequence of \pref{lem:local-diamond}.
\end{proof}

\begin{lemma}[$[[PI]]$-reduction]
\label{lem:pi-red}
If $[[PI d.t ~> s]]$, then there exist $[[d']]$ and $[[t']]$
such that $[[s = PI d'.t']]$, $[[d ~> d']]$, and $[[t ~> t']]$.
\end{lemma}

\begin{proof}
Case anlysis on $[[PI d.t ~> s]]$.
\end{proof}

\begin{lemma}[$[[\]]$-reduction]
\label{lem:lam-red}
If $[[\d.t ~> s]]$, then there exist $[[d']]$ and $[[t']]$
such that $[[s = \d'.t']]$, $[[d ~> d']]$, and $[[t ~> t']]$.
\end{lemma}

\begin{proof}
Case anlysis on $[[\d.t ~> s]]$.
\end{proof}

\begin{lemma}[Matchable application reduction]
\label{lem:matchable-red}
If $[[t @_ p ~> s]]$,
then there exist $[[t']]$ and $[[p']]$ such that
$[[s = t' @_ p']]$, $[[t ~> t']]$, and $[[p ~> p']]$.
\end{lemma}

\begin{proof}
Case analysis on $[[t @_ p ~> s]]$.
\end{proof}

\begin{lemma}[Coercion substitution/erasure]
\label{lem:co-subst-erase}
$[[|t[g/c]| = |t|]]$
\end{lemma}

\begin{proof}
By induction on the structure of $[[t]]$.
\end{proof}

\begin{lemma}[Type constant kinds shape]
\label{lem:tycon-kind-shape}
If $[[S;G |-ty H{ts1} ps1 : k1]]$ and $[[S;G |-ty H{ts2} ps2 : k2]]$
(where the lengths of $[[ps1]]$ and $[[ps2]]$ are the same),
then there exists a $[[k]]$ such that $[[fv(k) = {as} \union {zs}]]$,
$[[k1 = k[ts1/as,ps1/zs] ]]$, and $[[k2 = k[ts2/as,ps2/zs] ]]$.
\end{lemma}

\begin{proof}
\pref{lem:app-inversion} tells us that there exist $[[k3]]$ and $[[k4]]$
such that $[[S;G |-ty H{ts1} : k3]]$ and $[[S;G |-ty H{ts2} : k4]]$.
Inversion (via the only applicable rule, \rul{Ty\_Con})
then tells us that $[[S |-tc H : D1;D2;H' ]]$,
$[[k3 = MPI(D2[ts1/dom(D1)]). H'{} ts1]]$, and
$[[k4 = MPI(D2[ts2/dom(D1)]). H'{} ts2]]$.
\pref{lem:app-inversion} also tells us that
$[[S;G |-vec ps1 : prefix(D2[ts1/dom(D1)]) ]]$
and $[[S;G |-vec ps2 : prefix(D2[ts2/dom(D1)]) ]]$.
Let $[[D3,D4 = D2]]$, where the length of $[[D3]]$ matches that of $[[ps1]]$.
Thus \pref{lem:tel-app} tells us that
$[[k1 = MPI (D4[ts1/dom(D1),ps1/dom(D3)]).H'{} ts1]]$ and
$[[k2 = MPI (D4[ts2/dom(D1),ps2/dom(D3)]).H'{} ts2]]$.
Thus, we are done, with $[[as = dom(D1)]]$, $[[zs = dom(D2)]]$,
and $[[k = MPI D4. H'{} as]]$.
\end{proof}

\begin{definition}[Joinability]
We say that two types $[[t1]]$ and $[[t2]]$ are \emph{joinable} if
there exists an erased type $[[ee]]$ such that $[[|t1| ~>* ee *<~ |t2|]]$.
\end{definition}

\begin{lemma}[Completeness of type reduction] ~
\label{lem:complete-red}
If $[[S;G |-co g : t1 (k1)~(k2) t2]]$ and $[[c ~# g]]$ for every $[[c:phi \in G]]$,
then:
\begin{enumerate}
\item There exists some
erased type $[[ee]]$
such that $[[|t1| ~>* ee *<~ |t2|]]$.
\item There exists some erased type $[[ee]]$
such that
$[[|k1| ~>* ee *<~ |k2|]]$.
\end{enumerate}
\end{lemma}

\begin{proof}
By induction on the typing derivation.
For the purposes of exposition, we present
the types cases separately from the kinds cases, but in a formal
proof, they would be interleaved. First, the types cases:

\begin{description}
\item[Case \rul{Co\_Var}:] Impossible.
\item[Case \rul{Co\_Refl}:] Choose $[[ee = |t1|]]$ and we are done.
\item[Case \rul{Co\_Sym}:] By induction.
\item[Case \rul{Co\_Trans}:] Use the metavariable names from the rule:
\[
\ottdruleCoXXTrans{}
\]
The induction hypothesis gives us $[[ee1]]$ such that $[[|t1| ~>* ee1 *<~ |t2|]]$.
It also gives us $[[ee2]]$ such that $[[|t2| ~>* ee2 *<~ |t3|]]$.
\pref{lem:confluence} gives us $[[ee3]]$ such that
$[[ee1 ~>* ee3 *<~ ee2]]$. Thus, $[[ee3]]$ is a common reduct
of $[[|t1|]]$ and $[[|t3|]]$ as desired.
\item[Case \rul{Co\_Coherence}:] We know that $[[|t1| = |t2|]]$ and thus
either can be the common reduct.
\item[Case \rul{Co\_Con}:] By induction and repeated use of \rul{R\_Con}.
\item[Case \rul{Co\_AppRel}:] By induction and repeated use of \rul{R\_AppRel}.
\item[Case \rul{Co\_AppIrrel}:] By induction and repeated use of \rul{R\_AppIrrel}.
\item[Case \rul{Co\_CApp}:] By induction.
\item[Case \rul{Co\_PiTy}:] By induction. Note that the substitution in
the conclusion is erased by coercion erasure and so poses no complications.
\item[Case \rul{Co\_PiCo}:] By induction. Note that we need the
$[[c ~# g]]$ premise of \rul{Co\_PiCo} in order to use the induction
hypothesis here. Once again, the substitution in the conclusion causes no
bother.
\item[Case \rul{Co\_Case}:] By induction and \rul{R\_Case}.
\item[Case \rul{Co\_Lam}:] Similar to \rul{Co\_PiTy}, noting that the
  substitution in the result of \rul{Co\_Lam} is erased by coercion erasure
  and so poses no complications.
\item[Case \rul{Co\_CLam}:] Similar to \rul{Co\_PiCo}. Once again, the
premise of $[[c ~# g]]$ is critical.
\item[Case \rul{Co\_Fix}:] By induction and repeated use of \rul{R\_Fix}.
\item[Case \rul{Co\_Absurd}:] By induction.
\item[Case \rul{Co\_ArgK}:]
The induction hypothesis gives us $[[ee0]]$ such that
$[[|PI a:rel k1.s1| ~>* ee0 *<~ |PI a:rel k2.s2|]]$.
By repeated use of \pref{lem:pi-red}, we see that
$[[ee0 = PI a:rel k3.s3]]$ such that $[[|k1| ~>* k3 *<~ |k2|]]$
and $[[|s1| ~>* s3 *<~ |s2|]]$. Thus $[[k3]]$ is a reduct of 
$[[|k1|]]$ and $[[|k2|]]$ as desired.
\item[Case \rul{Co\_CArgK1}:]
Like previous case.
\item[Case \rul{Co\_CArgK2}:]
Like previous case.
\item[Case \rul{Co\_ArgKLam}:]
Like case \rul{Co\_ArgK}, but appealing to \pref{lem:lam-red}.
\item[Case \rul{Co\_CArgKLam1}:]
Like previous case.
\item[Case \rul{Co\_CArgKLam2}:]
Like previous case.
\item[Case \rul{Co\_Res}:]
By induction and \pref{lem:pi-red}.
\item[Case \rul{Co\_ResLam}:]
By induction and \pref{lem:lam-red}.
\item[Case \rul{Co\_InstRel}:]
We use the metavariable names from the rule:
\[
\ottdruleCoXXInstRel{}
\]
The induction hypothesis (along with \pref{lem:pi-red})
gives us $[[ee0]]$ and $[[ee1]]$ such that
$[[|s1| ~>* ee0 *<~ |s2|]]$ and $[[|t1| ~>* ee1 *<~ |t2|]]$.
\pref{lem:red-star-subst} (with \pref{lem:subst-erase}) then tells us that
$[[|s1[t1/a]| ~>* ee0[ee1/a] *<~ |s2[t2/a]|]]$ as desired.
\item[Case \rul{Co\_InstIrrel}:]
Similar to previous case.
\item[Case \rul{Co\_CInst}:]
By induction, \pref{lem:pi-red}, and \pref{lem:co-subst-erase}.
\item[Case \rul{Co\_InstLamRel}:]
Like case \rul{Co\_Inst}, but appealing to \pref{lem:lam-red}.
\item[Case \rul{Co\_InstLamIrrel}:]
Like previous case.
\item[Case \rul{Co\_CInstLam}:]
Like case \rul{Co\_CInst}, but appealing to \pref{lem:lam-red}.
\item[Case \rul{Co\_NthRel}:]
By induction and \pref{lem:app-red}.
\item[Case \rul{Co\_NthIrrel}:]
By induction and \pref{lem:app-red}.
\item[Case \rul{Co\_Left}:]
By induction and \pref{lem:matchable-red}.
\item[Case \rul{Co\_RightRel}:]
By induction and \pref{lem:matchable-red}.
\item[Case \rul{Co\_RightIrrel}:]
By induction and \pref{lem:matchable-red}.
\item[Case \rul{Co\_Kind}:]
By induction.
\item[Case \rul{Co\_Step}:]
We now must consider the different step rules:
\begin{description}
\item[Case \rul{S\_BetaRel}:] By \rul{R\_BetaRel}.
\item[Case \rul{S\_BetaIrrel}:] By \rul{R\_BetaIrrel}.
\item[Case \rul{S\_CBeta}:] By \rul{R\_CBeta} and \pref{lem:co-subst-erase}.
\item[Case \rul{S\_Match}:] By \rul{R\_Match}.
\item[Case \rul{S\_Default}:] By \rul{R\_Default}.
\item[Case \rul{S\_DefaultCo}:] By \rul{R\_Default}.
\item[Case \rul{S\_Unroll}:] By \rul{R\_Unroll}.
\item[Case \rul{S\_Trans}:] $[[|t1| = |t2|]]$ in this case.
\item[Congruence rules:] By induction.
\item[Case \rul{S\_KPush}:] We adopt the metavariable names from the
statement of the rule:
\[
\ottdruleSXXKPush{}
\]
The only differences between $[[t1]]$ (the redex) and $[[t2]]$ (the reduct)
are the $[[ts]]$ becoming
the $[[ts']]$ and the $[[ps]]$ becoming $[[ps']]$, along with the dropped cast
by $[[h]]$. Casting is erased, so losing $[[h]]$ is inconsequential.
By the definition of $[[cast_kpush_arg]]$, we can see that
$[[|cast_kpush_arg(p;g)| = |p|]]$ for any $[[p]]$, so $[[|ps| = |ps'|]]$.
This leaves us only the $[[ts]]$, but we can see that $[[|ts| ~>* ees *<~ |ts'|]]$
(for some $[[ees]]$) by the induction hypothesis. We are done by
\pref{lem:red-star-subst}.
\item[Other push rules:] $[[|t1| = |t2|]]$ in these cases.
\end{description}
\end{description}

We now proceed to the kinds cases.

\begin{description}
\item[Case \rul{Co\_Var}:] Impossible.
\item[Case \rul{Co\_Refl}:] Choose $[[ee = |k1|]]$ and we are done.
\item[Case \rul{Co\_Sym}:] By induction.
\item[Case \rul{Co\_Trans}:] Similar to the \rul{Co\_Trans} case for
types, above.
\item[Case \rul{Co\_Coherence}:] By induction.
\item[Case \rul{Co\_Con}:] We adopt the metavariable names from the rule:
\[
\ottdruleCoXXCon{}
\]
We invert $[[S;G |-ty H{ss} : k1]]$ and $[[S;G |-ty H{ss'} : k2]]$.
These both can be proved only by \rul{Ty\_Con}.
The $[[H]]$ in both judgments is the same, and so by \pref{lem:ctx-reg}
and \pref{lem:determinacy-tycon}, we have unique $[[D1]]$, $[[D2]]$,
and $[[H']]$ such that $[[S |-tc H : D1;D2;H']]$. We can thus
see that $[[k1 = MPI(D2[ss/dom(D1)]).H'{} ss]]$
and $[[k2 = MPI(D2[ss'/dom(D1)]).H'{} ss']]$.
The induction hypothesis gives us $[[ees']]$ such that, $\forall [[i]]$,
$[[|si| ~>* eei' *<~ |si'|]]$.
Choose $[[ee = MPI (|D2|[ees'/dom(D1)]). H'{} ees']]$. We must show
the following:
\begin{itemize}
\item $[[MPI (|D2|[|ss|/dom(D1)]). H'{} |ss| ~>* ee]]$
\item $[[MPI (|D2|[|ss'|/dom(D1)]). H'{} |ss'| ~>* ee]]$
\end{itemize}
Both of these follow from \pref{lem:red-star-subst}.
\item[Case \rul{Co\_AppRel}:] We adopt the metavariable names from the rule:
\[
\ottdruleCoXXAppRel{}
\]
We invert both $[[S;G |-ty t1 s1 : k1]]$ and $[[S;G |-ty t2 s2 : k2]]$.
Both must be proved by \rul{Ty\_AppRel}. We thus get all of the following:
\begin{itemize}
\item $[[S;G |-ty t1 : PI1 a:Rel k3.k4]]$
\item $[[S;G |-ty s1 : k3]]$
\item $[[k1 = k4[s1/a] ]]$
\item $[[S;G |-ty t2 : PI2 a:Rel k5.k6]]$
\item $[[S;G |-ty s2 : k5]]$
\item $[[k2 = k6[s2/a] ]]$.
\end{itemize}
The (kind) induction hypothesis gives us $[[ee1]]$ such that
$[[PI1 a:Rel |k3|.|k4| ~>* ee1 *<~ PI2 a:Rel |k5|.|k6|]]$.
\pref{lem:pi-red} tells us $[[PI1 = PI2]]$ and
gives us $[[ee3]]$ and $[[ee4]]$ such that
$[[ee1 = PI1 a:Rel ee3.ee4]]$.
The (type) induction hypothesis also gives us $[[ee2]]$ such that
$[[|s1| ~>* ee2 *<~ |s2|]]$.
Choose $[[ee = ee4[ee2/a] ]]$.
We must show $[[|k4[s1/a]| ~>* ee4[ee2/a] *<~ |k6[s2/a]|]]$.
\pref{lem:subst-erase} reduces this to
$[[|k4|[|s1|/a] ~>* ee4[ee2/a] *<~ |k6|[|s2|/a] ]]$.
We are done by two uses of \pref{lem:red-star-subst}.
\item[Case \rul{Co\_AppIrrel}:] Similar to previous case.
\item[Case \rul{Co\_CApp}:] Similar to (but easier than---no argument
to worry about) previous case.
\item[Case \rul{Co\_PiTy}:] Immediate. Both kinds are $[[Type{}]]$.
\item[Case \rul{Co\_PiCo}:] Immediate. Both kinds are $[[Type{}]]$.
\item[Case \rul{Co\_Case}:] By induction.
\item[Case \rul{Co\_Lam}:]
We adopt the metavariable names from the rule:
\[
\nosupp{\ottdruleCoXXLam{}}
\]
The induction hypothesis tells us both that $[[k1]]$ and $[[k2]]$
are joinable and also that $[[s1]]$ and $[[s2]]$ are joinable.
We are done by \rul{R\_Pi}.
\item[Case \rul{Co\_CLam}:]
Similar to previous case, again requiring the $[[c ~# g]]$ condition
in order to use the induction hypothesis.
\item[Case \rul{Co\_Fix}:]
We adopt the metavariable names from the rule:
\[
\ottdruleCoXXFix{}
\]
Inversion on $[[S;G |-ty fix t1 : k1]]$ tells us
that $[[S;G |-ty t1 : PI1 a:Rel k1.k1]]$. Similarly,
we can see that $[[S;G |-ty t2 : PI2 a:Rel k2.k2]]$.
The induction hypothesis gives us $[[ee0]]$ such that
$[[|PI1 a:Rel k1.k1| ~>* ee0 *<~ |PI2 a:Rel k2.k2|]]$.
Use of \pref{lem:pi-red} gives us $[[ee1]]$ such that $[[|k1| ~>* ee1 *<~ |k2|]]$
and we are done.
\item[Case \rul{Co\_Absurd}:] By induction.
\item[Case \rul{Co\_ArgK}:]
Here is the rule with all kinds included:
\[
\nosupp{\ottdruleCoXXArgK{}}
\]
Both kinds are $[[Type{}]]$ and so we are done.
\item[Case \rul{Co\_CArgK1}:]
Examine the typing rule with kinds included:
\[
\nosupp{\ottdruleCoXXCArgKOne{}}
\]
The induction hypothesis (with \pref{lem:pi-red})
gives us our result.
\item[Case \rul{Co\_CArgK2}:] Similar to previous caes.
\item[Case \rul{Co\_ArgKLam}:] Immediate. Both kinds are $[[Type{}]]$.
\item[Case \rul{Co\_CArgKLam1}:] Similar to case \rul{Co\_CArgK1}.
\item[Case \rul{Co\_CArgKLam2}:] Similar to previous case.
\item[Case \rul{Co\_Res}:] Immediate. Both kinds are $[[Type{}]]$.
\item[Case \rul{Co\_ResLam}:] Examine the typing rule with kinds included:
\[
\nosupp{\ottdruleCoXXResLam{}}
\]
We are done by the induction hypothesis and \pref{lem:pi-red}.
\item[Case \rul{Co\_InstRel}:] Immediate. Both kinds are $[[Type{}]]$.
\item[Case \rul{Co\_InstIrrel}:] Immediate. Both kinds are $[[Type{}]]$.
\item[Case \rul{Co\_CInst}:] Immediate. Both kinds are $[[Type{}]]$.
\item[Case \rul{Co\_InstLamRel}:] Here is the rule with kinds shown:
\[
\nosupp{\ottdruleCoXXInstLamRel{}}
\]
Our desired result follows from the induction hypothesis and
\pref{lem:red-star-subst}.
\item[Case \rul{Co\_InstLamIrrel}:] Similar to previous case.
\item[Case \rul{Co\_CInstLam}:] Here is the rule with kinds shown:
\[
\nosupp{\ottdruleCoXXCInstLam{}}
\]
Our desired result follows by the induction hypothesis and
\pref{lem:co-subst-erase}.
\item[Case \rul{Co\_NthRel}:]
We adopt metavariable names from the statement of the rule:
\[
\nosupp{\ottdruleCoXXNthRel{}}
\]
The induction hypothesis gives us $[[ee']]$ such that
$[[H{|ks|} |ps| ~>* ee' *<~ H{|ks'|} |ps'|]]$. Furthermore,
we know that the number of $[[ps]]$ is non-zero.
The reductions must thus be combinations of \rul{R\_AppRel},
\rul{R\_AppIrrel}, and \rul{R\_CApp}, and we can thus consider
the reduction of prefixes of the original types. Specifically,
we can deduce $[[H{|ks|} |ps0| |t| ~>* ee0 *<~ H{|ks'|} |ps0'| |s|]]$,
where $[[|ps0|]]$ is a prefix of $[[ps]]$ and $[[ps0']]$ is a prefix
of $[[ps']]$ (and $[[t]]$ and $[[s]]$ are as in the statement of the
rule). Let $[[t3 = H{ks} ps0]]$ and $[[t4 = H{ks'} ps0']]$.
\pref{lem:prop-reg} (and inversion) tell us that
$[[S;Rel(G) |-ty H{ks} ps : s1]]$ and $[[S;Rel(G) |-ty H{ks'} ps' : s2]]$.
By \pref{lem:app-inversion}, there must be $[[s3]]$ and $[[s4]]$ such
that $[[S;Rel(G) |-ty t3 : s3]]$ and $[[S;Rel(G) |-ty t4 : s4]]$.
\pref{lem:tycon-kind-shape} tells us that $[[s3 = s5[ks/as,ps/zs] ]]$ and
$[[s4 = s5[ks'/as,ps'/zs] ]]$ for some $[[s5]]$, $[[as]]$, and $[[zs]]$.
\pref{lem:app-red} tells us that $[[ks]]$ and $[[ks']]$ are joinable,
as are $[[ps]]$ and $[[ps']]$.
We thus have, by \pref{lem:red-star-subst}
that $[[s3]]$ and $[[s4]]$ are joinable. Inversion on
$[[S;Rel(G) |-ty t3 t : s6]]$ and $[[S;Rel(G) |-ty t4 s : s7]]$ tell us
that $[[s3]]$ and $[[s4]]$ must have the form $[[PI1 a:rel k1.s8]]$
and $[[PI2 a:rel k2.s9]]$, where
$[[S;Rel(G) |-ty t : k1]]$ and $[[S;Rel(G) |-ty s : k2]]$. By
\pref{lem:pi-red}, we can see that the joinability of
$[[s3]]$ and $[[s4]]$ imply the joinability of
$[[k1]]$ and $[[k2]]$, as desired.
\item[Case \rul{Co\_NthIrrel}:] Similar to previous case.
\item[Case \rul{Co\_Left}:] By induction.
\item[Case \rul{Co\_RightRel}:] By induction.
\item[Case \rul{Co\_RightIrrel}:] By induction.
\item[Case \rul{Co\_Kind}:] Immediate, as both kinds are $[[Type{}]]$.
\item[Case \rul{Co\_Step}:] With kinds shown, the rule is as follows:
\[
\nosupp{\ottdruleCoXXStep{}}
\]
We can see that the desired result is immediate, as both types have
the same kind $[[k]]$.
\end{description}
\end{proof}

\begin{definition}[Erased values]
An \emph{erased value} is an erased type $[[ee]]$ such that there exists a
value $[[v]]$ with $[[|v| = ee]]$.
\end{definition}

\begin{definition}[Consistency over erased types]
We overload the notation $[[t1 ! t2]]$ to include relating erased types,
where the rules are the same except that all types are erased.
\end{definition}

\begin{lemma}[Consistency is reflexive]
\label{lem:cons-refl}
$[[ee ! ee]]$
\end{lemma}

\begin{proof}
By induction on the structure of $[[ee]]$.
\end{proof}

\begin{lemma}[Consistency is symmetric]
\label{lem:cons-sym}
If $[[t1 ! t2]]$, then $[[t2 ! t1]]$.
\end{lemma}

\begin{proof}
By induction on $[[t1 ! t2]]$.
\end{proof}

\begin{lemma}[Reduction preserves values]
\label{lem:red-val}
If $[[ee1 ~> ee2]]$ and $[[ee1]]$ is an erased value, then
$[[ee2]]$ is an erased value.
\end{lemma}

\begin{proof}
By induction. The induction hypothesis in needed only in the
$[[ee1 = \ a:Irrel k. s]]$ case.
\end{proof}

\begin{lemma}[Consistency of reduction]
\label{lem:cons-red}
If $[[ee1 ~> ee2]]$, then $[[ee1 ! ee2]]$.
\end{lemma}

\begin{proof}
If $[[ee1]]$ is not an erased value, the result is immediate. We
thus assume $[[ee1]]$ is an erased value.
By induction over $[[ee1 ~> ee2]]$.
\begin{description}
\item[Case \rul{R\_Refl}:] By \pref{lem:cons-refl}.
\item[Case \rul{R\_Con}:] Immediate.
\item[Case \rul{R\_AppRel}:] Since $[[ee1]]$ is an erased value, it must
be $[[H{ts} ps]]$. We are done by \pref{lem:app-red}.
\item[Case \rul{R\_AppIrrel}:] Similar to previous case.
\item[Case \rul{R\_CApp}:] Similar to previous case.
\item[Case \rul{R\_Pi}:] By induction.
\item[Case \rul{R\_Case}:] Impossible.
\item[Case \rul{R\_Lam}:] Immediate.
\item[Case \rul{R\_Fix}:] Impossible.
\item[Case \rul{R\_Absurd}:] Impossible.
\item[Case \rul{R\_BetaRel}:] Impossible.
\item[Case \rul{R\_BetaIrrel}:] Impossible.
\item[Case \rul{R\_CBeta}:] Impossible.
\item[Case \rul{R\_Match}:] Impossible.
\item[Case \rul{R\_Default}:] Impossible.
\item[Case \rul{R\_Unroll}:] Impossible.
\end{description}
\end{proof}

\begin{lemma}[Consistency of reductions]
\label{lem:cons-reds}
If $[[ee1 ~>* ee2]]$, then $[[ee1 ! ee2]]$.
\end{lemma}

\begin{proof}
By induction on the length of the reduction chain, appealing to
\pref{lem:cons-red}.
\end{proof}

\begin{lemma}[$[[PI]]$-expansion]
\label{lem:pi-exp}
If $[[ee1]]$ is an erased value and $[[ee1 ~> PI d.t]]$,
then there exist $[[d']]$ and $[[t']]$ such that
$[[ee1 = PI d'.t']]$ where $[[d ~> d']]$ and $[[t ~> t']]$.
\end{lemma}

\begin{proof}
By case analysis on $[[ee1 ~> PI d.t]]$.
\end{proof}

\begin{lemma}[$[[PI]]$-expansions]
\label{lem:pi-exps}
If $[[ee1]]$ is an erased value and $[[ee1 ~>* PI d.t]]$,
then there exist $[[d']]$ and $[[t']]$ such that
$[[ee1 = PI d'.t']]$ where $[[d ~>* d']]$ and $[[t ~>* t']]$.
\end{lemma}

\begin{proof}
By induction on the length of the reduction chain, using
\pref{lem:red-val} to establish the value condition and appealing
to \pref{lem:pi-exp}.
\end{proof}

\begin{lemma}[Joinable types are consistent]
\label{lem:joinable-cons}
If $[[ee1 ~>* ee3 *<~ ee2]]$, then $[[ee1 ! ee2]]$.
\end{lemma}

\begin{proof}
By induction on the structure of $[[ee1]]$.
In all cases:
If either $[[ee1]]$ or $[[ee2]]$ is not an erased value,
the result is immediate. We thus assume both are values.
We know (from \pref{lem:cons-reds}) that $[[ee1 ! ee3]]$
and $[[ee2 ! ee3]]$ and (from \pref{lem:red-val}) that
$[[ee3]]$ is a value.

Now, suppose $[[ee1]]$ is not a $[[PI]]$-type or is a $[[PI]]$-type
over a proposition. We can see from inversion on $[[ee1 ! ee3]]$ that
$[[ee3]]$ must have the same head. We can further see from inversion
on $[[ee2 ! ee3]]$ that $[[ee2]]$ must have the same shape, and thus
that $[[ee1 ! ee2]]$ as desired.

Finally, we consider $[[ee1 = PI a:rel k. t]]$. We see (from
\pref{lem:pi-red}) that
$[[ee3 = PI a :rel k'. t']]$ with $[[k ~>* k']]$ and $[[t ~>* t']]$.
Now we can use \pref{lem:pi-exps} to see that $[[ee2 = PI a :rel k''. t'']]$
with $[[k'' ~>* k']]$ and $[[t'' ~>* t']]$. The induction hypothesis
tells us $[[t ! t'']]$, which gives us $[[ee1 ! ee2]]$ by \rul{C\_PiTy}.
\end{proof}

\begin{lemma}[Erasure/consistency]
\label{lem:erase-cons}
If $[[|t1| ! |t2|]]$, then $[[t1 ! t2]]$.
\end{lemma}

\begin{proof}
If either $[[t1]]$ or $[[t2]]$ is not a value, the result is immediate.
We thus assume both are values.
Proceed by induction on the structure of $[[t1]]$.

\begin{description}
\item[Case $[[t1 = a]]$:] Impossible.
\item[Case $[[t1 = H{ts} ]]$:] We have $[[|t1| = H{|ts|}]]$, and thus
$[[|t2| = H{ts'} ps]]$. From the definition of $[[|t2|]]$, we can see
that $[[t2]]$ must be headed by $[[H]]$ or be a cast. The latter is
impossible, as a cast is not a value. Thus $[[t2]]$ is headed by
$[[H]]$ and we are done.
\item[Case $[[t1 = s1 s2]]$:] For $[[t1]]$ to be a value, it must
be headed by some constant $[[H]]$. Proceed as in the previous case.
\item[Case $[[t1 = PI a:rel k.t]]$:] Similar to case for $[[H{ts}]]$, but also
using the induction hypothesis.
\item[Case $[[t1 = PI c:phi.t]]$:] Similar to case for $[[H{ts} ]]$.
\item[Case $[[t1 = t |> g]]$:] Impossible.
\item[Case $[[t1 = g]]$:] Impossible.
\item[Case $[[t1 = case_k t of alts]]$:] Impossible.
\item[Case $[[t1 = \d.s]]$:] Similar to case for $[[H{ts} ]]$.
\item[Case $[[t1 = fix s]]$:] Impossible.
\item[Case $[[t1 = absurd g t0]]$:] Impossible.
\end{description}
\end{proof}

\begin{lemma}[Consistency]
\label{lem:consistency}
If $[[G]]$ contains only irrelevant type variable bindings and
$[[S;G |-co g : t1 [k1]~[k2] t2]]$
then $[[t1 ! t2]]$.
\end{lemma}

\begin{proof}
If either $[[t1]]$ or $[[t2]]$ is not a value, then we are done. So, we assume
that both are values.
\pref{lem:complete-red} gives us $[[ee]]$ such that $[[|t1| ~>* ee *<~ |t2|]]$.
(This lemma is applicable because there are no coercion bindings in $[[G]]$.)
\pref{lem:joinable-cons} then tell us that $[[|t1| ! |t2|]]$.
Finally, \pref{lem:erase-cons} gives us $[[t1 ! t2]]$ as desired.
\end{proof}

\section{Progress}
\label{app:progress-proof}

\begin{lemma}[Canonical forms] ~
\label{lem:canon-form}
\begin{enumerate}
\item
If $[[S;G |-ty v : UPI d.k]]$, then $[[v = \d.s]]$.
\item
If $[[S;G |-ty v : MPI d.k]]$, then $[[v = H{ts} ps]]$.
\item
If $[[S;G |-ty v : H{} ss]]$, then $[[v = H'{ss} ps]]$.
\end{enumerate}
\end{lemma}

\begin{proof}
By case analysis on the shape of values (along with \pref{lem:determinacy}).
\end{proof}

\begin{lemma}[Value types]
\label{lem:val-type}
If $[[S;G |-ty v : k]]$, then $[[k]]$ is a value.
\end{lemma}

\begin{proof}
By case analysis on the possible shapes of values.
\end{proof}

\begin{lemma}[Type constant parents]
\label{lem:tycon-parent}
If $[[|-sig S]]$ and $[[S |-tc H : D1;D2;H']]$, then $[[S |-tc H' : empty;Rel(D1);Type]]$.
\end{lemma}

\begin{proof}
By case analysis on $[[S |-tc H : D1;D2;H']]$
\end{proof}

\begin{theorem}[Progress]
\label{thm:progress}
Assume $[[G]]$ has only irrelevant variable bindings.
If $[[S;G |-ty t : k]]$, then either $[[t]]$ is a value $[[v]]$, $[[t]]$
is a coerced value $[[v |> g]]$, or there exists $[[t']]$ such that
$[[S;G |-s t --> t']]$.
\end{theorem}

\begin{proof}
By induction on the typing judgment.

\begin{description}
\item[Case \rul{Ty\_Var}:] Impossible.
\item[Case \rul{Ty\_Con}:] $[[t]]$ is a value.
\item[Case \rul{Ty\_AppRel}:] We adopt the metavariable names from
the rule:
\[
\ottdruleTyXXAppRel{}
\]
Use the induction hypothesis on $[[t1]]$, giving us several cases:
\begin{description}
\item[Case $[[t1 = v]]$:] We now use \pref{lem:canon-form}
to give us two cases:
\begin{description}
\item[Case $[[t1 = H{ts} ps]]$:] Then $[[t = H{ts} ps t2]]$ is a value
and we are done.
\item[Case $[[t1 = \a:Rel k1.s]]$:] We are done by \rul{S\_BetaRel}.
\end{description}
\item[Case $[[t1 = v |> g]]$:] We wish to use \rul{S\_PushRel} but
we must prove
$[[S;Rel(G) |-co g : PI a:Rel k.s [Type{}]~[Type{}] PI a:Rel k'. s']]$
(for some $[[PI]]$, $[[a]]$, $[[k]]$, $[[s]]$, $[[k']]$, and $[[s']]$).
We know by inversion that $[[S;G |-ty v |> g : PI a:Rel k1.k2]]$.
Further inversion gives us
$[[S;Rel(G) |-co g : k0 [Type{}]~[Type{}] PI a:Rel k1.k2]]$ and
$[[S;G |-ty v : k0]]$.
\pref{lem:consistency} tells us that $[[k0 ! PI a:Rel k1.k2]]$.
\pref{lem:val-type} tells us that $[[k0]]$ is a value.
Inversion on $[[k0 ! PI a:Rel k1.k2]]$ must happen via \rul{C\_PiTy},
telling us that $[[k0 = PI a:Rel k1'.k2']]$ for some $[[k1']]$
and $[[k2']]$.
We can thus use \rul{S\_PushRel} and are done with this case.
\item[Case $[[S;G |-s t1 --> t1']]$:] We are done by \rul{S\_AppRel\_Cong}.
\end{description}
\item[Case \rul{Ty\_AppIrrel}:] We adopt the metavariable names from
the rule:
\[
\ottdruleTyXXAppIrrel{}
\]
Use the induction hypothesis on $[[t1]]$, giving us several cases:
\begin{description}
\item[Case $[[t1 = v]]$:] We now use \pref{lem:canon-form} to
give us two cases, which are handled like the \rul{Ty\_AppRel}
case, but using \rul{S\_BetaIrrel} in place of \rul{S\_BetaRel}.
\item[Case $[[t1 = v |> g]]$:] As in \rul{Ty\_AppRel}, but
using \rul{S\_PushIrrel}.
\item[Case $[[S;G |-s t1 --> t1']]$:] By \rul{S\_AppIrrel\_Cong}.
\end{description}
\item[Case \rul{Ty\_CApp}:]
Like previous application cases, but using \rul{S\_CBeta},
\rul{S\_CPush}, and
\rul{S\_CApp\_Cong}. (The \rul{S\_CPush} rule looks a bit different
than \rul{S\_PushRel}, but the typing premise of that rule has the
identical structure as the previous case.)
\item[Case \rul{Ty\_Pi}:] Immediate, as all $[[PI]]$-types are values.
\item[Case \rul{Ty\_Cast}:] In this case, we know $[[t = t0 |> g]]$.
Using the induction hypothesis on $[[t0]]$ gives us several cases:
\begin{description}
\item[Case $[[t0 = v]]$:] $[[v |> g]]$ is a coerced value and so we are done.
\item[Case $[[t0 = v |> h]]$:] We have $[[t = (v |> h) |> g]]$. We are done
by \rul{S\_Trans}.
\item[Case $[[S;G |-s t0 --> t0']]$:] We are done by \rul{Cast\_Cong}.
\end{description}
\item[Case \rul{Ty\_Case}:] We know here that
$[[t = case_k t0 of alts]]$. Using the induction hypothesis on
$[[t0]]$ gives us several cases:
\begin{description}
\item[Case $[[t0 = v]]$:] We can derive the following:
\begin{itemize}
\item $[[S;G |-ty v : MPI D. H'{} ss]]$ (from a premise of \rul{Ty\_Case})
\item $[[v]] = [[t0 = H{ts} ps]]$ (by \pref{lem:canon-form}). Note that it does not matter whether $[[length D = 0]]$ when
using \pref{lem:canon-form}.
\item $[[S;G |-ty H{ts} ps : MPI D'. H''{} ts]]$ (\pref{lem:tycon-inversion})
\item $[[S |-tc H : D1;D2;H'' ]]$ (same invocation of \pref{lem:tycon-inversion})
\item $[[D' = D]]$, $[[H' = H'']]$, and $[[ts = ss]]$ (\pref{lem:determinacy})
\end{itemize}
Since we have $[[S |-tc H : D1;D2;H']]$ and $[[alts are exhaustive for H' (wrt S)]]$,
we can conclude that either there exists $[[H -> t1 \in alts]]$ or
there exists $[[_ -> t1 \in alts]]$. In the former case, we use
\rul{S\_Match} and we are done; in the latter case, we use \rul{S\_Default}.
\item[Case $[[t0 = v |> g]]$:] We can derive the following:
\begin{itemize}
\item $[[S;G |-ty v |> g : MPI D. H'{} ss]]$ (from a premise of \rul{Ty\_Case})
\item $[[S;Rel(G) |-co g : k0 [Type{}]~[Type{}] MPI D. H'{} ss]]$ (inversion of \rul{Ty\_Cast})
\item $[[S;G |-ty v : k0]]$ (same inversion)
\item $[[k0 ! MPI D. H'{} ss]]$ (\pref{lem:consistency})
\item $[[k0]]$ is a value (\pref{lem:val-type})
\item $[[k0 = MPI d1. k1]]$ (inversion on $[[k0 ! MPI D. H'{} ss]]$)
\item $[[v = H{ts} ps]]$ (\pref{lem:canon-form})
\item $[[S |-tc H : as :Irrel ks;D2;H'' ]]$ (\pref{lem:tycon-inversion})
\item $[[S;G |-ty H{ts} ps : MPI (D4[ps/dom(D3)]). H''{} ts]]$ where $[[D3,D4 = D2[ts/as] ]]$ (same invocation of \pref{lem:tycon-inversion})
\item $[[k0 = MPI (D4[ps/dom(D3)]). H''{} ts]]$ (\pref{lem:determinacy})
\item $[[H'' = H']]$ and $[[length D = length D4]]$ (repeated inversion on $[[k0 ! MPI D. H'{} ss]]$)
\end{itemize}
There are now two possibilities: either $[[H -> s0 \in alts]]$ or there is a default
case that matches. In the latter case, we are done by \rul{S\_DefaultCo}.
We thus assume the former.
\begin{itemize}
\item $[[S;G;MPI D. H'{} ss; v |> g |-alt H -> s0 : k]]$ (a premise of \rul{Ty\_Case})
\item From the premises of \rul{Alt\_Match}:
\begin{itemize}
\item $[[D0,D1 = D2[ss/as] ]]$
\item $[[dom(D1) = dom(D)]]$
\item $[[match_{dom(D0)}(types(D1);types(D)) = Just (ps'/dom(D0))]]$ (also using \pref{prop:match-dom})
\end{itemize}
\item $[[length D1 = length D]]$ (from the fact that their domains are the same)
\item $[[length D1 = length D4]]$ (transitivity of $=$)
\item $[[dom(D0) = dom(D3)]]$ (from the definitions of $[[D0]]$, $[[D1]]$, $[[D3]]$, and $[[D4]]$ and the fact that $[[length D1 = length D4]]$)
\item Let $[[n = length D1]]$ and $[[D5]]$ be the suffix of $[[D2]]$ of length $[[n]]$.
\item $[[D = D5[ss/as][ps'/dom(D0)] ]]$ (\pref{prop:match-sound})
\item $[[S;Rel(G) |-co g : MPI (D5[ts/as][ps/dom(D0)]). H'{} ts [Type{}]~[Type{}] MPI (D5[ss/as][ps'/dom(D0)]). H'{} ss]]$ (substitution in the kind of $[[g]]$ as stated above)
\item $[[S;Rel(G) |-ty H'{} ss : Type{}]]$ (premise of \rul{Ty\_Case})
\item $[[S |-tc H' : empty; as :Rel ks; Type]]$ (\pref{lem:tycon-parent})
\item $[[S;Rel(G) |-vec ss : as :Rel ks]]$ (\pref{lem:tycon-inversion} with \pref{lem:determinacy-tycon})
\end{itemize}
We have now proved the premises of \rul{S\_KPush} and so stepping is possible. We
are done with this case.
\item[Case $[[S;G |-s t0 --> t0']]$:] We are done by \rul{S\_Case\_Cong}.
\end{description}
\item[Case \rul{Ty\_Lam}:] We know that $[[t = \d.t0]]$. If $[[d]]$ is anything
but an irrelevant-type-variable binder, we are done. So we assume that we have
$[[t = \a :Irrel k0.t0]]$. Using the induction hypothesis on $[[t0]]$ gives
us several cases:
\begin{description}
\item[Case $[[t0 = v]]$:] We are done, as $[[\a :Irrel k0. v]]$ is a value.
\item[Case $[[t0 = v |> g]]$:] We are done by \rul{S\_APush}.
\item[Case $[[S;G,a:Irrel k0 |-s t0 --> t0']]$:] We are done by \rul{S\_IrrelAbs\_Cong}.
\end{description}
\item[Case \rul{Ty\_Fix}:] We know that $[[t = fix t0]]$. Using the induction
hypothesis on $[[t0]]$ gives us several cases:
\begin{description}
\item[Case $[[t0 = v]]$:] We know $[[S;G |-ty v : UPI a:Rel k.k]]$.
\pref{lem:canon-form} tells us
$[[v = \a:Rel k.s0]]$ and we are done by \rul{S\_Unroll}.
\item[Case $[[t0 = v |> g]]$:]
We can derive the following facts:
\begin{itemize}
\item $[[S;G |-ty v |> g : UPI a:Rel k.k]]$ (premise of \rul{Ty\_Fix})
\item $[[S;Rel(G) |-co g : k0 [Type{}]~[Type{}] UPI a:Rel k.k]]$ (inversion on \rul{Ty\_Cast})
\item $[[S;G |-ty v : k0]]$ (same inversion)
\item $[[k0 ! UPI a:Rel k.k]]$ (\pref{lem:consistency})
\item $[[k0]]$ is a value (\pref{lem:val-type})
\item $[[k0 = UPI a:Rel k1. k2]]$ (inversion on \rul{C\_PiTy})
\item $[[v = \ a:Rel k1. s]]$ (\pref{lem:canon-form})
\end{itemize}
We are done by \rul{S\_FPush}.
\item[Case $[[S;G |-s t0 --> t0']]$:] We are done by \rul{S\_Fix\_Cong}.
\end{description}
\item[Case \rul{Ty\_Absurd}:] We know here that
$[[t = absurd g t0]]$ where $[[S;Rel(G) |-co g : H1{ts1} ps1 [k1]~[k2] H2{ts2} ps2]]$.
By \pref{lem:consistency}, we also know that $[[H1{ts1} ps1 ! H2{ts2} ps2]]$. Both
of these types are values, so this could only be by \rul{C\_TyCon}, but that rule
requires $[[H1 = H2]]$, which is a contradiction. This case cannot happen.
\end{description}
\end{proof}

\section{Type erasure}

\begin{definition}[Expression values]
Let values $[[ev]]$ be defined by the following subgrammar of $[[e]]$:
\[
[[ev]] \bnfeq [[H ys]] \bnfor [[PI]] \bnfor [[\a. e]]
                       \bnfor [[\o.e]]
\]
\end{definition}

\begin{lemma}[Expression substitution]
\label{lem:expr-subst}
$[[||t[s/a]|| = ||t||[||s||/a] ]]$
\end{lemma}

\begin{proof}
By induction on the structure of $[[t]]$.
\end{proof}

\begin{lemma}[Irrelevant expression substitution]
\label{lem:irrel-expr-subst}
If $[[S;G |-ty t : k]]$ and $[[ a :Irrel k' \in G]]$, then
$[[ ||t[s/a]|| = ||t|| ]]$.
\end{lemma}

\begin{proof}
By induction on the typing derivation.

\begin{description}
\item[Case \rul{Ty\_Var}:] Here is the rule:
\[
\ottdruleTyXXVar{}
\]
We see that $[[t /= a]]$, because the rule would require $[[a]]$ to be
relevant. Thus $[[t = b]]$ (for some $[[b /= a]]$) and thus the substitution
causes no change.
\item[Case \rul{Ty\_Con}:] Immediate from the definition of $[[ ||.|| ]]$.
\item[Case \rul{Ty\_AppRel}:] By induction.
\item[Case \rul{Ty\_AppIrrel}:] By induction. Note that we do not need
to use the induction hypothesis on the argument; we would not be able
to because of the use of the $[[Rel(G)]]$ context.
\item[Case \rul{Ty\_CApp}:] By induction, not looking at the coercion.
\item[Case \rul{Ty\_Pi}:] Immediate from the definition of $[[ ||.|| ]]$.
\item[Case \rul{Ty\_Cast}:] By induction, not looking at the coercion.
\item[Case \rul{Ty\_Case}:] By induction, not looking at the kind.
\item[Case \rul{Ty\_Lam}:] By induction, not looking at the classifier of the binder.
\item[Case \rul{Ty\_Fix}:] By induction.
\item[Case \rul{Ty\_Absurd}:] Immediate from the definition of $[[ ||.|| ]]$.
\end{description}
\end{proof}

\begin{lemma}[Expression substitution of coercions]
\label{lem:co-expr-subst}
$[[ ||t[g/c]|| = ||t|| ]]$
\end{lemma}

\begin{proof}
By induction on the structure of $[[t]]$.
\end{proof}

\begin{theorem}[Type erasure]
\label{thm:type-erasure}
If $[[S;G |-s t --> t']]$, then either $[[||t|| --> ||t'||]]$ or
$[[||t|| = ||t'||]]$.
\end{theorem}

\begin{proof}
By induction on $[[S;G |-s t --> t']]$.

\begin{description}
\item[Case \rul{S\_BetaRel}:] By \rul{E\_Beta} and \pref{lem:expr-subst}.
\item[Case \rul{S\_BetaIrrel}:] Both expressions are equal
by \pref{lem:irrel-expr-subst}.
\item[Case \rul{S\_CBeta}:] By \rul{E\_CBeta} and \pref{lem:co-expr-subst}.
\item[Case \rul{S\_Match}:] By \rul{E\_Match}.
\item[Case \rul{S\_Default}:] By \rul{E\_Default}.
\item[Case \rul{S\_DefaultCo}:] By \rul{E\_Default}.
\item[Case \rul{S\_Unroll}:] By \rul{E\_Unroll}.
\item[Case \rul{S\_Trans}:] Both expressions are equal by the definition
of $[[ ||.|| ]]$.
\item[Case \rul{S\_IrrelAbs\_Cong}:] By the induction hypothesis.
\item[Case \rul{S\_App\_Cong}:] By the induction hypothesis and \rul{E\_App\_Cong}.
\item[Case \rul{S\_Cast\_Cong}:] By the induction hypothesis.
\item[Case \rul{S\_Case\_Cong}:] By the induction hypothesis and \rul{E\_Case\_Cong}.
\item[Case \rul{S\_Fix\_Cong}:] By the induction hypothesis and \rul{E\_Fix\_Cong}.
\item[Push rules:] Both expressions are equal by the definition of
$[[ ||.|| ]]$.
\end{description}
\end{proof}

\begin{lemma}[Expression redexes]
\label{lem:expr-redex}
If $[[ ||t|| ]]$ is not an expression value, then $[[t]]$ is neither
a value nor a coerced value.
\end{lemma}

\begin{proof}
By induction on the structure of $[[t]]$.

\begin{description}
\item[Case $[[t = a]]$:] Immediate.
\item[Case $[[t = H{ts}]]$:] Impossible.
\item[Case $[[t = t0 p0]]$:] We have two cases here:
\begin{description}
\item[Case $[[t1 = H{ts} ps]]$:] Impossible, as $[[ ||t|| ]]$ is an expression value.
\item[Otherwise:] Immediate, as $[[t]]$ is neither a value nor a coerced value.
\end{description}
\item[Case $[[t = PI d. t0]]$:] Impossible.
\item[Case $[[t = t0 |> g]]$:] Since $[[ ||t0 |> g|| ]]$ is not an expression value,
we know that $[[ ||t0|| ]]$ is not an expression value, because these expressions
are the same. We thus use the induction hypothesis to discover that $[[t0]]$ is not
a value or a coerced value. We thus know that $[[t0 |> g]]$ is not a coerced value
(and is obviously not a value).
\item[Case $[[t = case_k t0 of alts]]$:] Immediate.
\item[Case $[[t = \a:Rel k0.t0]]$:] Impossible.
\item[Case $[[t = \a:Irrel k0.t0]]$:] We have two cases:
\begin{description}
\item[Case $[[||t0||]]$ is an expression value:] In this case
$[[||\a:Irrel k0.t0||]]$ is also an expression value, a contradiction.
\item[Case $[[||t0||]]$ is not an expression value:] By induction,
$[[t0]]$ is neither a value nor a coerced value. Thus,
$[[t = \a:Irrel k0.t0]]$ must also not be a value. (It is clearly not a coerced
value.)
\end{description}
\item[Case $[[t = \c:phi.t0]]$:] Impossible.
\item[Case $[[t = fix t0]]$:] Immediate.
\item[Case $[[t = absurd g s]]$:] Impossible.
\end{description}
\end{proof}

\begin{lemma}[Expression values do not step]
\label{lem:expr-value-no-step}
There is no $[[e']]$ such that $[[ev --> e']]$.
\end{lemma}

\begin{proof}
Straightforward case analysis on $[[ev]]$.
\end{proof}

\begin{theorem}[Types do not prevent evaluation]
\label{thm:expr-eval}
Suppose $[[S;G |-ty t : k]]$ and $[[G]]$ has only irrelevant variable bindings.
If $[[ ||t|| --> e' ]]$, then $[[ S;G |-s t --> t']]$ and either $[[ ||t'|| = e']]$ or 
$[[||t'|| = ||t||]]$.
\end{theorem}

\begin{proof}
We know that $[[||t||]]$ is not an expression value via the contrapositive
of \pref{lem:expr-value-no-step}. We thus know that $[[t]]$ is neither a value nor a
coerced value by \pref{lem:expr-redex}. We can now use \pref{thm:progress} to get
$[[t']]$ such that $[[S;G |-s t --> t']]$. Finally, we use \pref{thm:type-erasure} to
see that $[[ ||t'|| = e' ]]$ or $[[ ||t'|| = ||t|| ]]$ as desired.
\end{proof}

\begin{remark}
Note in the statement of \pref{thm:expr-eval} that the context $[[G]]$ must have only
irrelevant variable bindings. This means that the expression $[[ ||t|| ]]$ is closed,
as one would expect of a program that we wish to evaluate.
\end{remark}


\section{Congruence}

\begin{definition}[Unrestricted coercion variables]
\label{defn:co-star}
Define a new judgment $[[|-co*]]$ to be identical to $[[|-co]]$, except with
the $[[c ~# g]]$ premises removed from rules \rul{Co\_PiCo} and
\rul{Co\_CLam} and all recursive uses of $[[|-co]]$ replaced with $[[|-co*]]$.
\end{definition}

\begin{remark}
It is not necessary to introduce a $[[|-ty*]]$ judgment that uses $[[|-co*]]$.
Thus, for example, the \rul{Co\_Refl} rule of $[[|-co*]]$ has a $[[|-ty]]$
premise that may contain proofs of $[[|-co]]$.
\end{remark}

\begin{lemma}[Subsumption of coercion typing]
\label{lem:subsumption-co}
If $[[S;G |-co g : phi]]$, then $[[S;G |-co* g : phi]]$.
\end{lemma}

\begin{proof}
Straightforward induction.
\end{proof}

\begin{lemma}[Unrestricted proposition regularity]
\label{lem:prop-reg-star}
If $[[S;G |-co* g : phi]]$, then $[[S;G |-prop phi]]$.
\end{lemma}

\begin{proof}
Identical to the proof for \pref{lem:prop-reg}.
\end{proof}

\begin{theorem}[(Almost) Congruence]
\label{thm:almost-congruence}
If $[[S;Rel(G) |-co g : s1 (k)~(k) s2]]$ and $[[S;G,a:rel k,G' |-ty t : k0]]$
where none of $[[t]]$, $[[k0]]$, $[[k]]$ and the types in $[[G]]$ and $[[G']]$
bind any coercion variables,
then there exists $[[h]]$ such that
$[[S;Rel(G,G'[s1/a]) |-co* h : t[s1/a] (k0[s1/a])~(k0[s2/a]) t[s2/a] ]]$.
\end{theorem}

\begin{proof}
By induction on the size of the derivation of $[[S;G,a:rel k,G' |-ty t : k0]]$,
using \pref{lem:subsumption-co} frequently to convert between the coercion
typing relations.

\begin{description}
\item[Case \rul{Ty\_Var}:]
Here $[[t = b]]$. We have several cases:
\begin{description}
\item[Case $[[b \in dom(G)]]$:]
By \pref{lem:scoping}, $[[a # k0]]$. We are done, choosing $[[h = <b>]]$.
\item[Case $[[b = a]]$:]
By \pref{lem:scoping}, $[[a # k0]]$. We are done, choosing $[[h = g]]$.
\item[Case $[[b \in dom(G')]]$:]
We know $[[G' = G1,b :Rel k0,G2]]$.
\pref{lem:ctx-reg} and \pref{lem:tyvar-reg} give us
$[[S;Rel(G,a:rel k,G1) |-ty k0 : Type{}]]$ with a derivation smaller than that
with which we started. Use the induction hypothesis to get
$[[S;Rel(G,G1[s1/a]) |-co* h0 : k0[s1/a] [Type{}]~[Type{}] k0[s2/a] ]]$.
Choose $[[h = b ~={h0} b |> h0]]$ and we are done.
\end{description}
\item[Case \rul{Ty\_Con}:]
By \pref{lem:vec-kind}, repeated use of the induction hypothesis,
\pref{lem:ty-subst}, and \rul{Co\_Con}.
\item[Case \rul{Ty\_AppRel}:]
By the induction hypothesis, \pref{lem:ty-subst}, and \rul{Co\_AppRel}.
\item[Case \rul{Ty\_AppIrrel}:]
By the induction hypothesis, \pref{lem:ty-subst}, and \rul{Co\_AppIrrel}.
\item[Case \rul{Ty\_CApp}:]
We adopt the metavariable names from the rule (changing the name of the
coercion used to $[[g']]$):
\[
\ottdruleTyXXCApp{}
\]
The induction hypothesis gives us $[[h1]]$ such that
$[[S;Rel(G,G'[s1/a]) |-co* h1 : t[s1/a] [(PI c:phi.k)[s1/a] ]~[(PI c:phi.k)[s2/a] ] t[s2/a] ]]$.
Choose $[[h = h1 (g'[s1/a], g'[s2/a])]]$.
We are done by \pref{lem:ty-subst} and \rul{Co\_CApp}.
\item[Case \rul{Ty\_Pi}:]
We have several cases, depending on the shape of the binder:
\begin{description}
\item[Type variable binder:]
In this case, we know that $[[t = PI b :rel' k1. t0]]$ and $[[k0 = Type{}]]$.
The induction hypothesis gives us $[[h1]]$ such that
$[[S;Rel(G,G'[s1/a]),b :Rel k1[s1/a] |-co* h1 : t0[s1/a] [Type{}]~[Type{}] t0[s2/a] ]]$.
We can also use \pref{lem:ctx-reg} and \pref{lem:tyvar-reg} to
see that $[[S;Rel(G,a:rel k,G') |-ty k1 : Type{}]]$, with a smaller derivation
height than $[[S;G,a:rel k,G'|-ty PI b:rel' k1. t0 : Type{}]]$. We
can thus use the induction hypothesis again to get $[[h2]]$ such that
$[[S;Rel(G,G'[s1/a]) |-co* h2 : k1[s1/a] [Type{}]~[Type{}] k1[s2/a] ]]$.
Choose $[[h = (PI b:rel' h2. h1) ;; h3]]$, where
\begin{itemize}
\item $[[h3 = s3 ~={<Type{}>} s4]]$
\item $[[s3 = PI b:rel' k1[s2/a].(t0[s2/a][b |> sym h2/b]) ]]$
\item $[[s4 = PI b:rel' k1[s2/a].t0[s2/a] ]]$
\end{itemize}
We must show $[[S;Rel(G,G'[s1/a]) |-co* h : (PI b:rel' k1. t0)[s1/a] [Type{}]~[Type{}] (PI b:rel' k1. t0)[s2/a] ]]$. We will do this by proving both of these:
\begin{description}
\item[$[[S;Rel(G,G'[s1/a]) |-co* PI b:rel' h2. h1 : (PI b:rel' k1[s1/a]. t0[s1/a]) [Type{}]~[Type{}] s3]]$]
This is straightforward from \rul{Co\_PiTy}.
\item[$[[S;Rel(G,G'[s1/a]) |-co* s3 ~={<Type{}>} s4 : s3 [Type{}]~[Type{}] s4]]$]
We must prove that both the left-hand type and right-hand type have kind $[[Type{}]]$. The left-hand result comes from \pref{lem:prop-reg-star} on the result of the
previous branch of this list of things to prove.
The right-hand result comes from \pref{lem:prop-reg} on our assumption about
$[[g]]$ and \pref{lem:ty-subst} (using \pref{lem:increasing-rel} in the
$[[rel = Irrel]]$ case).
Now we must prove that the erasure of the two types equal, which boils down
to proving $[[|t0[s2/a][b |> sym h2/b]| = |t0[s2/a]|]]$. By \pref{lem:subst-erase},
the LHS becomes $[[|t0[s2/a]|[|b |> sym h2|/b] ]]$. We can see that
$[[|b |> sym h2| = b]]$ and thus the two sides of the equation are equal.
\end{description}
\item[Coercion variable binder:]
In this case, we know that $[[t = PI c:phi. t0]]$ and $[[k0 = Type{}]]$.
The induction hypothesis gives us $[[h1]]$ such that
$[[S;Rel(G,G'[s1/a]),c:phi[s1/a] |-co* h1 : t0[s1/a] [Type{}]~[Type{}] t0[s2/a] ]]$.
Let $[[phi = k1 (k1')~(k2') k2]]$.
We can also use \pref{lem:ctx-reg}, \pref{lem:covar-reg}, and inversion on
\rul{Prop\_Equality} to
see that $[[S;Rel(G,a:rel k,G') |-ty k1 : k1']]$ and
$[[S;Rel(G,a:rel k,G') |-ty k2 : k2']]$, both with a smaller derivation
height than $[[S;G,a:rel k,G'|-ty PI c:phi. t0 : Type{}]]$. We
can thus use the induction hypothesis again to get $[[h2]]$ and
$[[h3]]$ such that
$[[S;Rel(G,G'[s1/a]) |-co* h2 : k1[s1/a] [k1'[s1/a] ]~[k1'[s2/a] ] k1[s2/a] ]]$
and
$[[S;Rel(G,G'[s1/a]) |-co* h3 : k2[s1/a] [k2'[s1/a] ]~[k2'[s2/a] ] k2[s2/a] ]]$.
Choose $[[h = (PI c: (h2,h3). h1) ;; h4]]$, where
\begin{itemize}
\item $[[h4 = s3 ~={<Type{}>} s4]]$
\item $[[s3 = PI c:phi[s2/a].(t0[s2/a][h5/c]) ]]$
\item $[[s4 = PI c:phi[s2/a].t0[s2/a] ]]$
\item $[[h5 = h2 ;; c ;; sym h3]]$
\end{itemize}
We must show $[[S;Rel(G,G'[s1/a]) |-co* h : (PI c:phi. t0)[s1/a] [Type{}]~[Type{}] (PI c:phi. t0)[s2/a] ]]$. We will do this by proving both of these:
\begin{description}
\item[$[[S;Rel(G,G'[s1/a]) |-co* PI c: (h2,h3). h1 : (PI c:phi[s1/a]. t0[s1/a]) [Type{}]~[Type{}] s3]]$]
This is straightforward from \rul{Co\_PiCo}. Note that we cannot guarantee the
$[[c ~# h1]]$ condition here, necessitating the use of $[[|-co*]]$ instead
of $[[|-co]]$.
\item[$[[S;Rel(G,G'[s1/a]) |-co* s3 ~={<Type{}>} s4 : s3 [Type{}]~[Type{}] s4]]$]
We must prove that both the left-hand type and right-hand type have kind $[[Type{}]]$. The left-hand result comes from \pref{lem:prop-reg-star} on the result of the
previous branch of this list of things to prove.
The right-hand result comes from \pref{lem:prop-reg} on our assumption about
$[[g]]$ and \pref{lem:ty-subst} (using \pref{lem:increasing-rel} in the
$[[rel = Irrel]]$ case).
Now we must prove that the erasure of the two types equal, which boils down
to proving $[[|t0[s2/a][h5/c]| = |t0[s2/a]|]]$. This holds by
\pref{lem:co-subst-erase}.
\end{description}
\end{description}
\item[Case \rul{Ty\_Cast}:]
We adopt the metavariable names from the rule (but renaming the coercion used
in the cast to $[[g']]$):
\[
\ottdruleTyXXCast{}
\]
The induction hypothesis gives us $[[h1]]$ such that
$[[S;Rel(G,G'[s1/a]) |-co* h1 : t[s1/a] (k1[s1/a])~(k1[s2/a]) t[s2/a] ]]$.
Let $[[h2 = ((t[s1/a] |> g'[s1/a]) ~={sym g'[s1/a]} t[s1/a]) ]]$ and
$[[h3 = (t[s2/a] ~={g'[s2/a]} (t[s2/a] |> g'[s2/a]))]]$. It is easy to
see (using \pref{lem:prop-reg-star} and \pref{lem:ty-subst})
that $[[h2]]$ and $[[h3]]$ are well-typed.
Choose $[[h = h2 ;; h1 ;; h3]]$, and we are done.
\item[Case \rul{Ty\_Case}:]
By repeated use of the induction hypothesis,
\pref{lem:ty-subst}, and \rul{Co\_Case}.
\item[Case \rul{Ty\_Lam}:]
Like the case for \rul{Ty\_Pi}.
\item[Case \rul{Ty\_Fix}:]
By the induction hypothesis, \pref{lem:ty-subst}, and \rul{Co\_Fix}.
\item[Case \rul{Ty\_Absurd}:]
We adopt the metavariable names from the rule (but renaming the coercion used
to $[[g']]$):
\[
\ottdruleTyXXAbsurd{}
\]
The induction hypothesis gives us $[[h1]]$ such that
$[[S;Rel(G,G'[s1/a]) |-co* h1 : t[s1/a] [Type{}]~[Type{}] t[s2/a] ]]$.
Choose $[[h = absurd (g'[s1/a], g'[s2/a]) h1]]$. We know
$[[g'[si/a] ]]$ (for $i \in \{1,2\}$) is well-typed by \pref{lem:ty-subst}.
We are thus done.
\end{description}
\end{proof}


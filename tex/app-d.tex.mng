\chapter{Proofs about System~D}
\label{app:d}

\section{Auxiliary definitions}

\begin{definition}[Bootstrap signature]
\label{defn:sig-boot}
The bootstrap signature $[[S0]]$ (as mentioned in \rul{Sig\_Boot}) is
defined thus:
\[
[[S0 = (~) : (a1 : Type{}, a2 : Type{}, b1 : a1, b2 : a2)]]
\]
\end{definition}

\begin{definition}[Values]
Let values $[[v]]$ be defined by the following subgrammar of $[[t]]$:
\[
[[v]] \bnfeq [[H{ts} ps]] \bnfor [[PI d. t]] \bnfor [[\a:Rel k. t]]
                          \bnfor [[\a:Irrel k. v]] \bnfor [[\c:phi.t]]
\]
\end{definition}

\begin{definition}[Free variables]
Define $[[fv]]$ to be a function extracting free variables, overloaded to work
over types $[[t]]$, coercions $[[g]]$, propositions $[[phi]]$,
vectors $[[p]]$,
alternatives $[[alt]]$, and telescopes $[[D]]$. 
The definitions are entirely standard.
\end{definition}

\begin{definition}[Context extension]
Define the relation $[[G \subseteq G']]$ to mean that $[[G]]$ is a (not necessarily
contiguous) subsequence of $[[G']]$.
\end{definition}

\section{Structural properties}

\subsection{Relevant contexts}

\begin{lemma}[$[[dom]]$/$[[Rel]]$]
\label{lem:dom-rel}
$[[dom(Rel(G)) = dom(G)]]$
\end{lemma}

\begin{proof}
By its definition $[[Rel(G)]]$ binds the same variables as $[[G]]$.
\end{proof}

\begin{lemma}[Subsequence/$[[Rel]]$]
\label{lem:subsequence-rel}
If $[[G \subseteq G']]$ then $[[Rel(G) \subseteq Rel(G')]]$.
\end{lemma}

\begin{proof}
By the definitions of $\subseteq$ and $[[Rel]]$.
\end{proof}

\begin{lemma}[$[[Rel]]$ is idempotent]
\label{lem:rel-idempotent}
$[[Rel(Rel(G)) = Rel(G)]]$
\end{lemma}

\begin{proof}
By the definition of $[[Rel]]$.
\end{proof}

\begin{lemma}[Increasing relevance] ~
\label{lem:increasing-rel}
Let $[[G]]$ and $[[G']]$ be the same except that some bindings
in $[[G']]$ are labeled $[[Rel]]$ where those same bindings
in $[[G]]$ are labeled $[[Irrel]]$.
\begin{enumerate}
\item If $[[S;G |-ty t : k]]$, then $[[S;G' |-ty t : k]]$.
\item If $[[S;G |-co g : phi]]$, then $[[S;G' |-co g : phi]]$.
\item If $[[S;G |-prop phi]]$, then $[[S;G' |-prop phi]]$.
\item If $[[S;G;s0;t0 |-alt alt : k]]$, then $[[S;G';s0;t0 |-alt alt : k]]$.
\item If $[[S;G |-vec ps : D]]$, then $[[S;G' |-vec ps : D]]$.
\item If $[[S |-ctx G]]$, then $[[S |-ctx G']]$.
\item If $[[S;G |-s t --> t']]$, then $[[S;G' |-s t --> t']]$.
\end{enumerate}
\end{lemma}

\begin{proof}
By straightforward mutual induction, appealing to
\pref{lem:rel-idempotent}.
\end{proof}

\begin{lemma}[Decreasing relevance]
\label{lem:decreasing-rel}
If $[[S |-ctx G, a:Rel k]]$, then $[[S |-ctx G, a:Irrel k]]$.
\end{lemma}

\begin{proof}
By inverting and then using \rul{Ctx\_TyVar}.
\end{proof}

\subsection{Regularity, Part I}

\begin{lemma}[Type variable kinds]
\label{lem:tyvar-reg}
If $[[S |-ctx G]]$ and $[[a :rel k \in G]]$, then there exists
$[[G']]$ such that $[[G' \subseteq Rel(G)]]$ and $[[S;G' |-ty k : Type{} ]]$.
Furthermore, the size of the derivation of $[[S;G' |-ty k : Type{} ]]$
is smaller than that of $[[S |-ctx G]]$.
\end{lemma}

\begin{proof}
Straightforward induction on $[[S |-ctx G]]$.
\end{proof}

\begin{lemma}[Coercion variable kinds]
\label{lem:covar-reg}
If $[[S |-ctx G]]$ and $[[c : phi \in G]]$, then there exists
$[[G']]$ such that $[[G' \subseteq Rel(G)]]$ and $[[S;G' |-prop phi]]$.
Furthermore, the size of the derivation of $[[S;G' |-prop phi]]$
is smaller than that of $[[S |-ctx G]]$.
\end{lemma}

\begin{proof}
Straightforward induction on $[[S |-ctx G]]$.
\end{proof}

\begin{lemma}[Context regularity]
\label{lem:ctx-reg}
If:
\begin{enumerate}
\item $[[S;G |-ty t : k]]$, OR
\item $[[S;G |-co g : phi]]$, OR
\item $[[S;G |-prop phi]]$, OR
\item $[[S;G;s0;t0 |-alt alt : k]]$, OR
\item $[[S;G |-vec ps : D]]$, OR
\item $[[S |-ctx G]]$
\end{enumerate}
Then $[[S |-ctx prefix(G)]]$ and $[[|-sig S]]$, where $[[prefix(G)]]$ is an
arbitrary prefix of $[[G]]$. Furthermore, both resulting derivations are no
larger than the input derivations.
\end{lemma}

\begin{proof}
Straightforward mutual induction.
\end{proof}

\subsection{Weakening}

\begin{lemma}[Weakening]
\label{lem:weakening}
Assume $[[S |-ctx G']]$ and $[[G \subseteq G']]$.
\begin{enumerate}
\item If $[[S;G |-ty t : k ]]$ then $[[S;G' |-ty t : k]]$.
\item If $[[S;G |-co g : phi ]]$, then $[[S;G' |-co g : phi]]$.
\item If $[[S;G |-prop phi ]]$, then $[[S;G' |-prop phi]]$.
\item If $[[S;G;s0;t0 |-alt alt : k]]$, then $[[S;G';s0;t0 |-alt alt : k]]$.
\item If $[[S;G |-vec ps : D]]$, then $[[S;G' |-vec ps : D]]$.
\item If $[[S |-ctx G, D]]$, then $[[S |-ctx G', D]]$.
\item If $[[S;G |-s t --> t']]$, then $[[S;G' |-s t --> t']]$.
\end{enumerate}
\end{lemma}

\begin{proof}
By straightforward mutual induction, appealing to
\pref{lem:subsequence-rel}, \pref{lem:increasing-rel} (in order to
be able to use the induction hypothesis in, e.g., \rul{Ty\_AppIrrel}),
and
\pref{lem:ctx-reg}
(in order to use the induction hypothesis in, e.g., \rul{Ty\_Pi}).
\end{proof}

\begin{lemma}[Strengthening]
\label{lem:strengthening}
Assume $[[G' \subseteq G]]$ and the
variables $[[{dom(G)} \ {dom(G')}]]$ are never used.
\begin{enumerate}
\item If $[[S;G |-ty t : k ]]$ then $[[S;G' |-ty t : k]]$.
\item If $[[S;G |-co g : phi ]]$, then $[[S;G' |-co g : phi]]$.
\item If $[[S;G |-prop phi ]]$, then $[[S;G' |-prop phi]]$.
\item If $[[S;G;s0;t0 |-alt alt : k]]$, then $[[S;G';s0;t0 |-alt alt : k]]$.
\item If $[[S;G |-vec ps : D]]$, then $[[S;G' |-vec ps : D]]$.
\item If $[[S |-ctx G]]$, then $[[S |-ctx G']]$.
\item If $[[S;G |-s t --> t']]$, then $[[S;G' |-s t --> t']]$.
\end{enumerate}
\end{lemma}

\begin{proof}
Similar to previous proof.
\end{proof}

\subsection{Scoping}

\begin{lemma}[Scoping] ~
\label{lem:scoping}
\begin{enumerate}
\item If $[[S;G |-ty t : k]]$, then $[[fv(t) \subseteq {dom(G)}]]$ and 
$[[fv(k) \subseteq {dom(G)}]]$.
\item If $[[S;G |-co g : phi]]$, then $[[fv(g) \subseteq {dom(G)}]]$ and
$[[fv(phi) \subseteq {dom(G)}]]$.
\item If $[[S;G |-prop phi]]$, then $[[fv(phi) \subseteq {dom(G)}]]$.
\item If $[[S;G;s0;t0 |-alt H -> t : k]]$, 
  then $[[fv(t) \subseteq {dom(G)}]]$.
\item If $[[S;G |-vec ps : D]]$, then $[[fv(ps) \subseteq {dom(G)}]]$ and
$[[fv(D) \subseteq {dom(G)}]]$.
\item If $[[S |-ctx G]]$, then $[[fv(G) = \emptyset]]$.
\item If $[[|-sig S]]$ and $[[S |-tc H : D1;D2;H']]$, 
then $[[fv(D1) = \emptyset]]$ and $[[fv(D2) \subseteq {dom(D1)}]]$.
\end{enumerate}
\end{lemma}

\begin{proof}
By straightforward mutual induction, appealing to \pref{lem:dom-rel},
\pref{lem:tyvar-reg},
\pref{lem:covar-reg},
and \pref{lem:ctx-reg}.
\end{proof}

\section{Determinacy}

\begin{lemma}[Uniqueness of signatures] ~
\label{lem:uniq-sig}
Assume $[[|-sig S]]$.
\begin{enumerate}
\item If $[[T:(as:ks1) \in S]]$ and $[[T:(as:ks2) \in S]]$, then $[[ks1 = ks2]]$.
\item If $[[K:(D1;T1) \in S]]$ and $[[K:(D2;T2) \in S]]$, then $[[D1 = D2]]$
and $[[T1 = T2]]$.
\end{enumerate}
\end{lemma}

\begin{proof}
By the freshness conditions on $[[|-sig S]]$.
\end{proof}

\begin{lemma}[Uniqueness of contexts] ~
\label{lem:uniq-ctx}
Assume $[[S |-ctx G]]$.
\begin{enumerate}
\item If $[[a :rel1 k1 \in G]]$ and $[[a :rel2 k2 \in G]]$,
then $[[rel1 = rel2]]$ and $[[k1 = k2]]$.
\item If $[[c:phi1 \in G]]$ and $[[c:phi2 \in G]]$,
then $[[phi1 = phi2]]$.
\end{enumerate}
\end{lemma}

\begin{proof}
By the freshness conditions on $[[S |-ctx G]]$.
\end{proof}

\begin{lemma}[Determinacy of type constants]
\label{lem:determinacy-tycon}
If $[[|-sig S]]$, $[[S |-tc H : D1;D1';H1]]$, and $[[S |-tc H : D2;D2';H2]]$, then $[[D1 = D2]]$, $[[D1' = D2']]$, and $[[H1 = H2]]$.
\end{lemma}

\begin{proof}
From \pref{lem:uniq-sig}.
\end{proof}

\begin{lemma}[Values do not step]
\label{lem:value-no-step}
There exists no $[[t]]$ such that $[[S;G |-s v --> t]]$.
\end{lemma}

\begin{proof}
By induction on the structure of $[[v]]$.
\end{proof}

\begin{lemma}[Determinacy] ~
\label{lem:determinacy}
\begin{enumerate}
\item If $[[S;G |-ty t : k1]]$ and $[[S;G |-ty t : k2]]$, then
$[[k1 = k2]]$.
\item If $[[S;G |-co g : phi1]]$ and $[[S;G |-co g : phi2]]$, then
$[[phi1 = phi2]]$.
\item If $[[S;G |-s t --> s1]]$ and $[[S;G |-s t --> s2]]$, then
$[[s1 = s2]]$.
\end{enumerate}
\end{lemma}

\begin{proof}
By mutual induction, appealing to \pref{lem:uniq-ctx},
\pref{lem:determinacy-tycon} (which
requires a use of \pref{lem:ctx-reg} first), and
\pref{lem:value-no-step}.
\end{proof}

\section{Substitution}

\begin{lemma}[Value substitution]
\label{lem:value-subst}
If $[[v]]$ is a value with a free variable $[[a]]$,
then $[[v[s/a] ]]$ is also a value.
\end{lemma}

\begin{proof}
By the definition of values.
\end{proof}

\begin{lemma}[Substitution/erasure]
\label{lem:subst-erase}
$[[|t|[|s|/a] = |t[s/a]|]]$
\end{lemma}

\begin{proof}
By induction on the structure of $[[t]]$.
\end{proof}

\begin{lemma}[Type substitution]
\label{lem:ty-subst}
Assume $[[S;G |-ty s : k]]$.
\begin{enumerate}
\item If $[[S;G,a:rel k,G' |-ty t : k0]]$, then $[[S;G,G'[s/a] |-ty t[s/a] : k0[s/a] ]]$.
\item If $[[S;G,a:rel k,G' |-co g : phi]]$, then $[[S;G,G'[s/a] |-co g[s/a] : phi[s/a] ]]$.
\item If $[[S;G,a:rel k,G' |-prop phi]]$, then $[[S;G,G'[s/a] |-prop phi[s/a] ]]$.
\item If $[[S;G,a:rel k,G';s0;t0 |-alt alt : k]]$,
then $[[S;G,G'[s/a];s0[s/a];t0[s/a] |-alt alt[s/a] : k[s/a] ]]$.
\item If $[[S;G,a:rel k,G' |-vec ps : D]]$, then
$[[S;G,G'[s/a] |-vec ps[s/a] : D[s/a] ]]$.
\item If $[[S |-ctx G,a:rel k,G']]$, then $[[S |-ctx G,G'[s/a] ]]$.
\item If $[[S;G,a:rel k,G' |-s t --> t']]$, then $[[S;G,G'[s/a] |-s t[s/a] --> t'[s/a] ]]$.
\end{enumerate}
\end{lemma}

\begin{proof}
By mutual induction.
\begin{description}
\item[Case \rul{Ty\_Var}:] Here, we know $[[t]]$ is some variable $[[b]]$. There
are three cases to consider:
\begin{description}
\item[Case $[[b:Rel k0 \in G]]$:] We must derive $[[S;G,G'[s/a] |-ty b : k0[s/a] ]]$.
We will use \rul{Ty\_Var}. We establish $[[S |-ctx G,G'[s/a] ]]$ by the induction
hypothesis. Scoping (\pref{lem:scoping}) tells us that $[[a \notin fv(k0)]]$, and so we are
done by the fact that $[[b :Rel k0 \in G]]$.
\item[Case $[[b = a]]$:] By weakening (\pref{lem:weakening}).
\item[Case $[[b:Rel k0 \in G']]$:] Once again, we get $[[S |-ctx G,G'[s/a] ]]$ by the
induction hypothesis. Furthermore, we get $[[b:Rel k0[s/a] \in G'[s/a] ]]$ from 
$[[b:Rel k0 \in G']]$.
\end{description}
\item[Case \rul{Ty\_Con}:] By \pref{lem:scoping}, \pref{lem:ctx-reg}, and induction.
\item[Case \rul{Co\_Var}:] Similar to \rul{Ty\_Var}.
\item[Case \rul{Co\_PiTy}:]
We adopt the variable names from the rule (renaming the variable to be substituted
to $[[b]]$):
\[
\ottdruleCoXXPiTy{}
\]
The induction hypothesis gives us:
\begin{itemize}
\item $[[S;G,G'[s/b] |-co h[s/b] : k1[s/b] ~ k2[s/b] ]]$
\item $[[S;G,G'[s/b],a:rel k1[s/b] |-co g[s/b] : s1[s/b] ~ s2[s/b] ]]$
\end{itemize}
By \rul{Co\_PiTy}, we get
\[
[[S;G,G'[s/b] |-co PI a:rel h[s/b]. g[s/b] : (PI a:rel k1[s/b]. s1[s/b]) ~ (PI a:rel k2[s/b]. (s2[s/b][a |> sym h[s/b]/a])) ]]
\]
All that remains to show is that
$[[s2[s/b][a |> sym h[s/b]/a] = s2[a |> sym h/a][s/b] ]]$, but this
follows from the fact that $[[a # s]]$, guaranteed by the Barendregt
convention. We are done with this case.
\item[Other cases:] By the induction hypothesis, using \pref{lem:value-subst} for
certain step rules, and using the Barendregt convention to rearrange substitutions
(as in the \rul{Co\_PiTy} case) in the \rul{Inst} rules and in rule \rul{Co\_Lam}.
\end{description}
\end{proof}

\begin{lemma}[Coercion substitution]
\label{lem:co-subst}
Assume $[[S;G |-co g : phi]]$.
\begin{enumerate}
\item If $[[S;G,c:phi,G' |-ty t : k0]]$, then $[[S;G,G'[g/c] |-ty t[g/c] : k0[g/c] ]]$.
\item If $[[S;G,c:phi,G' |-co h : phi']]$, then $[[S;G,G'[g/c] |-co h[g/c] : phi'[g/c] ]]$.
\item If $[[S;G,c:phi,G' |-prop phi']]$, then $[[S;G,G'[g/c] |-prop phi'[g/c] ]]$.
\item If $[[S;G,c:phi,G';s0;t0 |-alt alt : k]]$,
then $[[S;G,G'[g/c];s0[g/c];t0[g/c] |-alt alt[g/c] : k[g/c] ]]$.
\item If $[[S;G,c:phi,G' |-vec ps : D]]$, then
$[[S;G,G'[g/c] |-vec ps[g/c] : D[g/c] ]]$.
\item If $[[S |-ctx G,c:phi,G']]$, then $[[S |-ctx G,G'[g/c] ]]$.
\item If $[[S;G,c:phi,G' |-s t --> t']]$, then $[[S;G,G'[g/c] |-s t[g/c] --> t'[g/c] ]]$.
\end{enumerate}
\end{lemma}

\begin{proof}
Similar to proof for \pref{lem:ty-subst}.
\end{proof}

\begin{lemma}[Vector substitution]
\label{lem:vec-subst}
If $[[S;G |-vec ps : D]]$ and $[[S;G,D,G' |-ty t : k]]$,
then $[[S;G,G'[ps/dom(D)] |-ty t[ps/dom(D)] : k[ps/dom(D)] ]]$.
\end{lemma}

\begin{proof}
By induction on the structure of $[[D]]$.

\begin{description}
\item[Case $[[D = empty]]$:] By assumption.
\item[Case $[[D = a0 :Rel k0,D']]$:] We know
$[[ps = s0, ps']]$, $[[S;G |-ty s0 : k0]]$, and $[[S;G |-vec ps' : D'[s0/a] ]]$.
\pref{lem:ty-subst} tells us
$[[S;G,D'[s0/a],G'[s0/a] |-ty t[s0/a] : k[s0/a] ]]$.
We are done by a use of the induction hypothesis.
\item[Other cases:] Similar.
\end{description}
\end{proof}

\section{Preservation}

\begin{lemma}[Preservation]
\label{lem:preservation}
If $[[S;G |-ty t : k]]$ and $[[S;G |-s t --> t']]$, then
$[[S;G |-ty t' : k]]$.
\end{lemma}

\begin{proof}[unfinished]
By induction on the size of the typing derivation.
TODO
\end{proof}

\section{Regularity, Part II}

\begin{lemma}[Type-in-type]
\label{lem:type-in-type}
If $[[|-sig S]]$, then $[[S;empty |-ty Type{} : Type{} ]]$.
\end{lemma}

\begin{proof}
Working backward, use \rul{Ty\_Con} so that we must show the
following:
\begin{description}
\item[$[[S |-tc Type : empty; empty; Type]]$:] By \rul{Tc\_Type}.
\item[$[[S |-ctx empty]]$:] By \rul{Ctx\_Nil}.
\item[$[[S;empty |-vec empty : empty]]$:] By \rul{Vec\_Nil}.
\end{description}
We are thus done.
\end{proof}

\begin{lemma}[Kinds in a context]
\label{lem:kind-ctx}
If $[[S |-ctx G]]$ and $[[a :rel k \in G]]$, then
$[[S;Rel(G) |-ty k : Type{} ]]$.
\end{lemma}

\begin{proof}
By induction on the size of $[[G]]$.
\end{proof}

\begin{lemma}[Telescopes]
\label{lem:tel}
If $[[S |-ctx G, D]]$, then $[[S;G,D |-vec dom(D) : D]]$.
\end{lemma}

\begin{proof}
Proceed by induction on the structure of $[[D]]$.

\begin{description}
\item[Case $[[D = empty]]$:] By \rul{Vec\_Nil}.
\item[Case $[[D = a:Rel k, D']]$:]
We must show $[[S;G,a:Rel k, D' |-vec a, dom(D') : a:Rel k, D']]$.
By \rul{Vec\_TyRel}, we must show
$[[S;G,a:Rel k, D' |-ty a : k]]$ and
$[[S;G,a:Rel k, D' |-vec dom(D') : D']]$.
The first is by \rul{Ty\_Var} and the second is by the induction hypothesis.
\item[Other cases:] Similar.
\end{description}
\end{proof}

\begin{lemma}[Type constant telescopes]
\label{lem:tycon-tel}
If $[[|-sig S]]$ and $[[S |-tc H : D1;D2;H']]$,
then $[[S |-ctx D1,D2 ]]$.
\end{lemma}

\begin{proof}
By case analysis on $[[S |-tc H : D1;D2;H']]$.
\begin{description}
\item[Case \rul{Tc\_ADT}:] Here $[[D1 = empty]]$ and $[[D2 = as :Rel ks]]$
We see that $[[S |-ctx as :Irrel ks]]$ from $[[|-sig S]]$ (\rul{Sig\_ADT}).
A use of \pref{lem:increasing-rel} solves our goal.
\item[Case \rul{Tc\_DataCon}:] Here $[[D1 = as :Irrel ks]]$. We must show
$[[S |-ctx as :Irrel ks, D2]]$. From $[[|-sig S]]$, we see that
$[[S |-ctx as:Irrel ks, D2]]$ (\rul{Sig\_DataCon}).
\item[Case \rul{Tc\_Type}:] Here $[[D1 = D2]] = [[empty]]$. We are done
by \rul{Ctx\_Nil}.
\end{description}
\end{proof}


\begin{lemma}[Type constant kinds]
\label{lem:tycon-kind}
If $[[|-sig S]]$ and $[[S |-tc H : D1;D2;H']]$,
then $[[S;empty |-ty MPI D1,D2.H'{} dom(D1) : Type{} ]]$.
\end{lemma}

\begin{proof}
To prove $[[S;empty |-ty MPI D1,D2.H'{} dom(D1) : Type{} ]]$,
we will use \rul{Ty\_Pi} (repeatedly). We thus must show
$[[S;Rel(D1,D2) |-ty H'{} dom(D1) : Type{} ]]$.
This, in turn, will be by \rul{Ty\_AppRel} (repeatedly). We thus
must show 
\begin{description}
\item[$[[S;Rel(D1,D2) |-ty H'{} : MPI Rel(D1). Type{} ]]$] (We are being
a bit more specific here than necessary.) Case analysis of
$[[S |-tc H : D1;D2;H']]$ gives us several cases:
\begin{description}
\item[Case \rul{Tc\_ADT}:] Here, $[[D1 = empty]]$ and
$[[H' = Type]]$, and we must show $[[S;Rel(D2) |-ty Type{} : Type{} ]]$.
According to \rul{Ty\_Con} we must show only that $[[S |-ctx Rel(D2) ]]$,
which follows from \pref{lem:tycon-tel} and \pref{lem:increasing-rel}.
\item[Case \rul{Tc\_DataCon}:] Here, $[[D1 = as :Irrel ks]]$ and
$[[H' = T]]$. We must show
$[[S;as :Rel ks,Rel(D2) |-ty T{} : MPI as :Rel ks. Type{} ]]$.
Using \rul{Ty\_Con} means we must show $[[S |-tc T : empty; as :Rel ks; Type]]$
and $[[S |-ctx as :Rel ks, Rel(D2)]]$. The latter comes from
$[[|-sig S]]$ and \pref{lem:tycon-tel}. The former comes directly from
\rul{Tc\_ADT}.
\item[Case \rul{Tc\_Type}:] By \pref{lem:type-in-type}.
\end{description}
\item[$[[S;Rel(D1,D2) |-vec dom(D1) : Rel(D1) ]]$] This last judgment
expands out to be all the typing judgments we need in \rul{Ty\_AppRel}.
See \rul{Vec\_TyRel}. To prove this, we use \pref{lem:tel}, meaning
that we need only show $[[S |-ctx Rel(D1,D2)]]$, which we
get from \pref{lem:tycon-tel}. We are done.
\end{description}
\end{proof}

\begin{lemma}[Kind regularity] ~
\label{lem:kind-reg}
If $[[S;G |-ty t : k]]$, then $[[S;Rel(G) |-ty k : Type{} ]]$.
\end{lemma}

\begin{proof}
By induction on the typing derivation.

\begin{description}
\item[Case \rul{Ty\_Var}:] By \pref{lem:kind-ctx}.
\item[Case \rul{Ty\_Con}:] We'll adopt the metavariable names
from the rule:
\[
\ottdruleTyXXCon{}
\]
Use \pref{lem:ctx-reg} to get
$[[|-sig S]]$. Then use \pref{lem:tycon-kind} to get
$[[S;empty |-ty MPI D1,D2.H'{} dom(D1) : Type{} ]]$.
Repeated inversion on \rul{Ty\_Pi} gives us
$[[S;Rel(D1) |-ty MPI D2.H'{} dom(D1) : Type{} ]]$.
\pref{lem:weakening} gives us
$[[S;Rel(G),Rel(D1) |-ty MPI D2.H'{} dom(D1) : Type{} ]]$.
\pref{lem:vec-subst} gives us
$[[S;Rel(G) |-ty MPI (D2[ts/dom(D1)]). H'{} ts : Type{} ]]$
as desired.
\item[Case \rul{Ty\_AppRel}:]
We'll adopt the metavariable names from the rule:
\[
\ottdruleTyXXAppRel{}
\]
The induction hypothesis gives us $[[S;Rel(G) |-ty PI a:Rel k1. k2 : Type{} ]]$.
Inversion on \rul{Ty\_Pi} gives us
$[[S;Rel(G),a:Rel k1 |-ty k2 : Type{} ]]$.
\pref{lem:increasing-rel} gives us $[[S;Rel(G) |-ty t2 : k1]]$,
and then \pref{lem:ty-subst} applies, giving us $[[S;Rel(G) |-ty k2[t2/a] : Type{} ]]$ as desired.
\item[Case \rul{Ty\_AppIrrel}:]
Similar to last case, noting that inverting \rul{Ty\_Pi} converts the $[[Irrel]]$
to a $[[Rel]]$ and without the need for \pref{lem:increasing-rel}.
\item[Case \rul{Ty\_CApp}:]
Similar to previous case.
\item[Case \rul{Ty\_Pi}:]
By \pref{lem:ctx-reg} and \pref{lem:type-in-type}.
\item[Case \rul{Ty\_Cast}:]
By inversion.
\item[Case \rul{Ty\_Case}:]
By inversion.
\item[Case \rul{Ty\_Lam}:]
We'll adopt the metavariable names from the rule:
\[
\ottdruleTyXXLam{}
\]
We must show $[[S;Rel(G) |-ty UPI d.k : Type{} ]]$.
Working backward, use \rul{Ty\_Pi} so that we must show
$[[S;Rel(G,d) |-ty k : Type{} ]]$, which is true by induction.
\item[Case \rul{Ty\_Fix}:]
We'll adopt the metavariable names from the rule:
\[
\ottdruleTyXXFix{}
\]
The induction hypothesis tells us $[[S;Rel(G) |-ty UPI _:Rel k.k : Type{} ]]$.
Inversion on \rul{Ty\_Pi} tells us $[[S;Rel(G),_:Rel k |-ty k : Type{} ]]$.
\pref{lem:strengthening} gives us $[[S;Rel(G) |-ty k : Type{} ]]$ as desired.
\end{description}
\end{proof}

\begin{lemma}[Proposition regularity]
\label{lem:prop-reg}
If $[[S;G |-co g : phi]]$, then $[[S;Rel(G) |-prop phi]]$.
\end{lemma}

\begin{proof}
By induction on the typing derivation.

\begin{description}
\item[Case \rul{Co\_Var}:] By \pref{lem:covar-reg}, \pref{ctx-reg}, and
 \pref{lem:weakening}.
\item[Case \rul{Co\_Refl}:] Immediate.
\item[Case \rul{Co\_Sym}:] By induction.
\item[Case \rul{Co\_Trans}:] By induction.
\item[Case \rul{Co\_Coherence}:] Immediate.
\item[Case \rul{Co\_Con}:] Immediate.
\item[Case \rul{Co\_AppRel}:] Immediate.
\item[Case \rul{Co\_AppIrrel}:] Immediate.
\item[Case \rul{Co\_CApp}:] Immediate.
\item[Case \rul{Co\_PiTy}:] 
We adopt the metavariable names from the statement of the rule:
\[
\ottdruleCoXXPiTy{}
\]
We can straightforwardly use \rul{Ty\_Pi} to show that
$[[S;G |-ty PI a:rel k1.s1 : Type{}]]$.
Choose a fresh $[[b]]$. We know $[[S |-ctx G,a:Rel k1]]$ by \pref{lem:ctx-reg}.
We can then use \rul{Ctx\_TyVar} (with \pref{lem:increasing-rel})
to show that $[[S |-ctx G,b :Rel k2,a:Rel k1]]$ (along with a little inversion
and rebuilding to reorder the variables).
We also know $[[S;G,a:Rel k1 |-ty s2 : Type{}]]$.
Use weakening, \pref{lem:weakening}, (here and elsewhere in this case) to get
$[[S;G,b:Rel k2,a:Rel k1 |-ty s2 : Type{}]]$.
We can use \rul{Co\_Sym} to see that
$[[S;G,b:Rel k2 |-co sym h : k2 ~ k1]]$
and then \rul{Ty\_Cast} to see that
$[[S;G,b:Rel k2 |-ty b |> sym h : k1]]$.
\pref{lem:ty-subst} then gives us
$[[S;G,b:Rel k2 |-ty s2[b |> sym h/a] : Type{}]]$.
Use \rul{Ty\_Pi} to get $[[S;G |-ty PI b:Rel k2.(s2[b |> sym h/a]) : Type{}]]$
and $\alpha$-equivalence to get
$[[S;G |-ty PI a:rel k2.(s2[a |> sym h/a]) : Type{}]]$.
We are done.
\item[Case \rul{Co\_PiCo}:]
We adopt the metavariable names from the statement of the rule:
\[
\ottdruleCoXXPiCo{}
\]
We can straightforwardly use \rul{Ty\_Pi} to show that
$[[S;G |-ty PI c:t1~s1.k1 : Type{}]]$.
Choose a fresh $[[b]]$. We know $[[S |-ctx G,c:t1~s1]]$ by \pref{lem:ctx-reg}.
We can then use \rul{Ctx\_CoVar} (with \pref{lem:increasing-rel})
to show that $[[S |-ctx G,c2 : t2~s2,c:t1~s1]]$ (along with a little inversion
and rebuilding to reorder the variables).
We also know $[[S;G,c:t1~s1 |-ty k2 : Type{}]]$.
Use weakening, \pref{lem:weakening}, (here and elsewhere in this case) to get
$[[S;G,c2:t2~s2,c:t1~s1 |-ty k2 : Type{}]]$.
We can use typing rules straightforwardly to see that
$[[S;G,c2:t2~s2 |-co h1 ;; c2 ;; sym h2 : t1 ~ s1]]$.
\pref{lem:co-subst} then gives us
$[[S;G,c2:t2~s2 |-ty k2[h1 ;; c2 ;; sym h2/c] : Type{}]]$.
Use \rul{Ty\_Pi} to get $[[S;G |-ty PI c2:t2~s2.(k2[h1;;c2;;sym h2/c]) : Type{}]]$
and $\alpha$-equivalence to get
$[[S;G |-ty PI c:t2~s2.(k2[h1;;c;;sym h2/c]) : Type{}]]$.
We are done.
\item[Case \rul{Co\_Case}:] Immediate.
\item[Case \rul{Co\_Lam}:]
We adopt the metavariable names from the statement of the rule:
\[
\ottdruleCoXXLam{}
\]
We can use
\rul{Ty\_Lam} to get $[[S;G |-ty \a:rel k1.t1 : UPI a:rel k1.s1]]$.
Proceeding similarly to the case for \rul{Co\_PiTy}, we can
get $[[S;G |-ty \a:rel k2.(t2[a |> sym h/a]) : UPI a:rel k2. (s2[a |> sym h/a])]]$
and we are done.
\item[Case \rul{Co\_CLam}:]
Similar to previous case and the case for \rul{Co\_PiCo}.
\item[Case \rul{Co\_Fix}:] Immediate.
\item[Case \rul{Co\_ArgK}:] By induction, inversion, \pref{lem:ctx-reg},
and \pref{lem:tyvar-reg}.
\item[Case \rul{Co\_CArgK1}:] By induction, inversion, \pref{lem:ctx-reg},
and \pref{lem:covar-reg}.
\item[Case \rul{Co\_CArgK2}:] Similar to previous case.
\item[Case \rul{Co\_ArgKLam}:] Similar to case for \rul{Co\_ArgK}.
\item[Case \rul{Co\_CArgKLam1}:] Similar to case for \rul{Co\_CArgK1}.
\item[Case \rul{Co\_CArgKLam2}:] Similar to previous case.
\item[Case \rul{Co\_Inst}:] We adopt the metavariable names from the
statement of the rule:
\[
\ottdruleCoXXInst{}
\]
We will prove that $[[s1[t1/a] ]]$ is well-typed; the proof for $[[s2[t2/a] ]]$
is similar.
The induction hypothesis (and some inversion) tells us
$[[S;G |-ty PI a:rel k1. s1 : Type{}]]$.
Further inversion gives us $[[S;G,a:Rel k1 |-ty s1 : Type{}]]$.
\pref{lem:ty-susbst} gives us $[[S;G |-ty s1[t1/a] : Type{}]]$ as desired.
\item[Case \rul{Co\_CInst}:] Similar to previous case.
\item[Case \rul{Co\_InstLam}:] Similar to previous case.
\item[Case \rul{Co\_CInstLam}:] Similar to previous case.
\item[Case \rul{Co\_Nth}:] By induction and repeated inversion.
\item[Case \rul{Co\_Kind}:] By \pref{lem:kind-reg}.
\item[Case \rul{Co\_Step}:] By \pref{lem:preservation}.
\end{description}
\end{proof}

\section{Consistency}

\begin{definition}[Erasure]
\label{defn:erasure}
Define the erasure of a type $[[ee = |t|]]$ by the following function (including
auxiliary functions):\\[1ex]
{
\setlength{\abovedisplayskip}{-20pt}
\setlength{\belowdisplayskip}{-20pt}
\setlength{\abovedisplayshortskip}{-20pt}
\setlength{\belowdisplayshortskip}{-20pt}
\ottfundefneraseXXtype{}\\[1ex]
\ottfundefneraseXXbinder{}\\[1ex]
\ottfundefneraseXXprop{}\\[1ex]
\ottfundefneraseXXalt{}
}
\end{definition}

\begin{notation}[Erased types in consistency proof]
In all lemmas and proofs written from here until the completeness
of the rewrite relation (\pref{lem:complete-red}), all types
are assumed to be erased of coercions, according to
\pref{defn:erasure}.
\end{notation}

\begin{notation}[Reduction] ~
\begin{itemize}
\item We write $[[ps ~> ps']]$ to mean $\forall [[i]], [[pi ~> pi']]$.
\item We write $[[t1 ~> t3 <~ t2]]$ to mean $[[t1 ~> t3]]$ and $[[t2 ~> t3]]$.
\item We write $[[~>*]]$ to mean the reflexive, transitive closure of $[[~>]]$.
\item We write $[[t1 ~>* t3 *<~ t2]]$ to mean $[[t1 ~>* t3]]$ and $[[t2 ~>* t3]]$.
\end{itemize}
\end{notation}

\begin{lemma}[Parallel reduction substitution] ~
\label{lem:red-subst}
Assume $[[ps ~> ps']]$. We can then conclude:
\begin{enumerate}
\item $[[t[ps/zs] ~> t[ps'/zs] ]]$
\item $[[d[ps/zs] ~> d[ps'/zs] ]]$
\end{enumerate} 
\end{lemma}

\begin{proof}
By straightforward
mutual induction on the structure of $[[t]]$/$[[d]]$.
%% \begin{description}
%% \item[Case $[[t = a]]$:] By assumption.
%% \item[Case $[[t = b]]$:] By \rul{R\_Refl}.
%% \item[Case $[[t = H**]]$:] By \rul{R\_Refl}.
%% \item[Case $[[t = t1 t2]]$:] By induction and \rul{R\_AppRep}.
%% \item[Case $[[t = t1 {t2}]]$:] By induction and \rul{R\_AppIrrel}.
%% \item[Case $[[t = t0 o]]$:] By induction and \rul{R\_CApp}.
%% \item[Case $[[t = PI d. s]]$:] By induction and \rul{R\_Pi}.
%% \item[Case $[[t = case_k s of alts]]$:] By induction and \rul{R\_Case}.
%% \item[Case $[[t = \d.s]]$:] By induction and \rul{R\_Lam}.
%% \item[Case $[[t = fix s]]$:] By induction and \rul{R\_Fix}.
%% \item[Case $[[d = a:rel k]]$:] By induction and \rul{R\_TyBinder}.
%% \item[Case $[[d = o:phi]]$:] By \rul{R\_CoBinder}.
%% \end{description}
\end{proof}

\begin{lemma}[Parallel reduction substitution in parallel] ~
\label{lem:red-subst-par}
Assume $[[ps ~> ps']]$.
\begin{enumerate}
\item If $[[t1 ~> t2]]$, then $[[t1[ps/zs] ~> t2[ps'/zs] ]]$.
\item If $[[d1 ~> d2]]$, then $[[d1[ps/zs] ~> d2[ps'/zs] ]]$.
\end{enumerate}
\end{lemma}

\begin{proof}
By induction on $[[t1 ~> t2]]$/$[[d1 ~> d2]]$.

\begin{description}
\item[Case \rul{R\_Refl}:] By \pref{lem:red-subst}.
\item[Congruence rules:] By induction.
\item[Case \rul{R\_BetaRel}:] It must be that $[[t1 = (\b:Rel k1. t3) t4]]$
and $[[t2 = t3'[t4'/b] ]]$ where $[[t3 ~> t3']]$ and $[[t4 ~> t4']]$.
We must show that
$[[ (\b:Rel k1[ps/zs]. t3[ps/zs]) t4[ps/zs] ~> t3'[t4'/b][ps'/zs] ]]$.
Proceeding by \rul{R\_BetaRel}, the left-hand-side steps to 
$[[ t5[t6/b] ]]$ where $[[t3[ps/zs] ~> t5]]$ and $[[t4[ps/zs] ~> t6]]$.
(We can choose $[[t5]]$ and $[[t6]]$.)
We must thus show that $[[t5[t6/b] = t3'[t4'/b][ps'/zs] ]]$.
First, we reorder substitutions to get
$[[t3'[t4'/b][ps'/zs] = t3'[ps'/zs][t4'[ps'/zs]/b] ]]$, noting
that $[[b # ps']]$ by the Barendregt convention.
Choose $[[t5 = t3'[ps'/zs] ]]$ and $[[t6 = t4'[ps'/zs] ]]$.
We must show that $[[t3[ps/zs] ~> t5]]$ and $[[t4[ps/zs] ~> t6]]$;
expanding gives us that we must show
$[[t3[ps/zs] ~> t3'[ps'/zs] ]]$ and $[[t4[ps/zs] ~> t4'[ps'/zs] ]]$.
Both of these follow directly from the induction hypothesis, and
so we are done.
\item[Case \rul{R\_BetaIrrel}:] Similar to previous case.
\item[Case \rul{R\_CBeta}:] By induction.
\item[Case \rul{R\_Match}:] It must be that:
\begin{itemize}
\item $[[t1 = case_k H** ps0 of alts]]$
\item $[[t2 = t4 ps0' o ]]$ where $[[H -> t3 \in alts]]$,
$[[t3 ~> t4]]$, $[[ps0 ~> ps0']]$, and no other alternative matches.
\end{itemize}
We must show that
$[[case_k[ps/zs] H** ps0[ps/zs] of alts[ps/zs] ~> t4[ps'/zs] ps0'[ps'/zs] o ]]$.
Proceeding by \rul{R\_Match}, the left-hand side steps to
$[[t5 ps0'' o ]]$ where $[[t3[ps/zs] ~> t5]]$ and $[[ps0[ps/zs] ~> ps0'']]$,
and we get to choose $[[t5]]$ and $[[ps0'']]$.
We must show that $[[t5 ps0'' o = t4[ps'/zs] ps0'[ps'/zs] o ]]$.
Choose $[[t5 = t4[ps'/zs] ]]$ and $[[ps0'' = ps0'[ps'/zs] ]]$.
We must show that $[[t3[ps/zs] ~> t4[ps'/zs] ]]$ and
$[[ps0[ps/zs] ~> ps0'[ps'/zs] ]]$. Both of these follow from the
induction hypothesis, and so we are done.
\item[Case \rul{R\_Unroll}:] It must be that:
\begin{itemize}
\item $[[t1 = fix (\a:rel k1.t3)]]$
\item $[[t2 = t4[fix (\a:rel k2.t4)/a] ]]$ where $[[k1 ~> k2]]$ and
$[[t3 ~> t4]]$.
\end{itemize}
We must show that
$[[fix (\a:rel k1[ps/zs].t3[ps/zs]) ~> t4[fix (\a:rel k2.t4)/a][ps'/zs] ]]$.
Proceeding by \rul{R\_Unroll}, the left-hand side steps to
$[[t5[fix (\a:rel k3.t5)/a] ]]$ where $[[t3[ps/zs] ~> t5]]$
and $[[k1[ps/zs] ~> k3]]$.
We must show that
$[[t5[fix (\a:rel k3.t5)/a] = t4[fix (\a:rel k2.t4)/a][ps'/zs] ]]$.
Reorder substitutions on the right to get
$[[t4[fix (\a:rel k2.t4)/a][ps'/zs] = t4[ps'/zs][fix (\a:rel k2[ps'/zs].t4[ps'/zs])/a] ]]$, where $[[a # ps']]$ by the Barendregt convention.
Choose $[[t5 = t4[ps'/zs] ]]$ and $[[k3 = k2[ps'/zs] ]]$.
It remains only to show that $[[t3[ps/zs] ~> t4[ps'/zs] ]]$
and $[[k1[ps/zs] ~> k2[ps'/zs] ]]$, both of which follow from the
induction hypothesis. We are done.
\end{description}
\end{proof}

\begin{lemma}[Parallel repeated reduction substitution]
\label{lem:red-star-subst}
If $[[t1 ~>* t2]]$ and $[[ps ~>* ps']]$,
then $[[t1[ps/zs] ~>* t2[ps'/zs] ]]$.
\end{lemma}

\begin{proof}
By iterated induction on the lengths of the reduction chains.
\end{proof}

\begin{lemma}[Application reduction]
\label{lem:app-red}
If $[[H** ps ~> s]]$, then $[[s = H** ps']]$ where, $[[ps ~> ps']]$.
\end{lemma}

\begin{proof}
Straightforward induction on the structure of $[[s0 = H** ps]]$.
\end{proof}

\begin{lemma}[Local diamond]
\label{lem:local-diamond}
Let $[[ti]]$ denote an erased type.
If $[[t0 ~> t1]]$ and $[[t0 ~> t2]]$, then there exists $[[t3]]$ such
that $[[t1 ~> t3 <~ t2]]$.
\end{lemma}

\begin{proof}
By induction on the structure of $[[t0]]$ followed by case analysis
on the reduction of $[[t0]]$. We assume throughout that all types
have had their coercions erased.

\begin{description}
\item[Case $[[t0 = a]]$:] $[[t1]] = [[t2]] = [[t3]] = [[a]]$.
\item[Case $[[t0 = H**]]$:] $[[t1]] = [[t2]] = [[t3]] = [[H**]]$.
\item[Case $[[t0 = s1 s2]]$:] We now have several cases:
\begin{description}
\item[Case \rul{R\_AppRel}/\rul{R\_AppRel}:] By induction.
\item[Case \rul{R\_AppRel}/\rul{R\_BetaRel}:] It must be that:
\begin{itemize}
\item
$[[t0 = (\a:rel k1. s3) s4]]$
\item $[[t1 = (\a:rel k2. s5) s6]]$, where
$[[k1 ~> k2]]$, $[[s3 ~> s5]]$, and $[[s4 ~> s6]]$, and
\item $[[t2 = s3[s4/a] ]]$.
\end{itemize}
Choose $[[t3 = s5[s6/a] ]]$. We must show $[[t1 ~> t3]]$
and $[[t2 ~> t3]]$. The first is by \rul{R\_BetaRel}.
The second is by \pref{lem:red-subst-par}.
\item[Case \rul{R\_BetaRel}/\rul{R\_BetaRel}:] 
It must be that:
\begin{itemize}
\item $[[t0 = (\a:rel k.s3) s4]]$
\item $[[t1 = s3'[s4'/a] ]]$, where $[[s3 ~> s3']]$ and $[[s4 ~> s4']]$
\item $[[t2 = s3''[s4''/a] ]]$, where $[[s3 ~> s3'']]$ and $[[s4 ~> s4'']]$.
\end{itemize}
Using the induction hypothesis, we can get $[[s5]]$ and $[[s6]]$ such that
\begin{itemize}
\item $[[s3' ~> s5 <~ s3'']]$
\item $[[s4' ~> s6 <~ s4'']]$.
\end{itemize}
Choose $[[t3 = s5[s6/a] ]]$. We must show $[[s3'[s4'/a] ~> s5[s6/a] ]]$
and $[[s3''[s4''/a] ~> s5[s6/a] ]]$. Both of these follow from
\pref{lem:red-subst-par}.
\end{description}
\item[Case $[[t0 = s1 {s2}]]$:] Similar to $[[t0 = s1 s2]]$.
\item[Case $[[t0 = s o]]$:] We now have several cases:
\begin{description}
\item[Case \rul{R\_CApp}/\rul{R\_CApp}:] By induction.
\item[Case \rul{R\_CApp}/\rul{R\_CBeta}:] It must be that:
\begin{itemize}
\item $[[t0 = (\o:k1 ~ k2.s3) o]]$
\item $[[t1 = (\o:k3 ~ k4.s4) o]]$ where $[[k1 ~> k3]]$, $[[k2 ~> k4]]$,
and $[[s3 ~> s4]]$.
\item $[[t2 = s5]]$ where $[[s3 ~> s5]]$
\end{itemize}
The induction hypothesis gives us $[[s6]]$ such that $[[s4 ~> s6 <~ s5]]$.
Choose $[[t3 = s6]]$. We must show $[[t1 ~> t3]]$ and $[[t2 ~> t3]]$.
The first is by \rul{R\_CBeta}. The second is immediate.
\item[Case \rul{R\_CBeta}/\rul{R\_CBeta}:] By induction.
\end{description}
\item[Case $[[t0 = PI d. s0]]$:] By induction.
\item[Case $[[t0 = case_k s0 of alts]]$:]
We now have several cases:
\begin{description}
\item[Case \rul{R\_Case}/\rul{R\_Case}:] By induction.
\item[Case \rul{R\_Case}/\rul{R\_Match}:] It must be that:
\begin{itemize}
\item $[[t0 = case_k H** ps of list of H -> ee]]$
\item $[[t1 = case_k' H** ps' of list of H -> ee']]$
where $[[k ~> k']]$, $[[ps ~> ps']]$, and $[[ees ~> ees']]$
(appealing to \pref{lem:app-red})
\item $[[t2 = eei'' ps'' o ]]$, where $[[Hi = H]]$,
no other alternative matches $[[H]]$,
$[[eei ~> eei'']]$, and $[[ps ~> ps'']]$.
\end{itemize}
Using the induction hypothesis, we can get $[[eei''']]$ such that
$[[eei' ~> eei''' <~ eei'']]$ and $[[ps''']]$ such that
$[[ps' ~> ps''' <~ ps'']]$.
Choose $[[t3 = eei''' ps''' o]]$. We must show both $[[t1 ~> t3]]$
and $[[t2 ~> t3]]$. The first is by \rul{R\_Match}. The second is by
repeated use of \rul{R\_AppRel}/\rul{R\_AppIrrel}/\rul{R\_CApp}.
\item[Case \rul{R\_Match}/\rul{R\_Match}:] It must be that:
\begin{itemize}
\item $[[t0 = case_k H** ps of alts]]$
\item $[[alti = H -> k1]]$ where no other alternative matches $[[H]]$
\item $[[t1 = k1' ps' o ]]$ where $[[k1 ~> k1']]$ and $[[ps ~> ps']]$.
\item $[[t2 = k1'' ps'' o ]]$ where $[[k1 ~> k1'']]$ and $[[ps ~> ps'']]$.
\end{itemize}
The induction hypothesis gives us $[[k1''']]$ and $[[ps''']]$ such that:
\begin{itemize}
\item $[[k1' ~> k1''' <~ k1'']]$
\item $[[ps' ~> ps''' <~ ps'']]$
\end{itemize}
Choose $[[t3 = k1'''[ps'''/zs] ]]$ and we are done by \pref{lem:red-subst-par}.
\end{description}
\item[Case $[[t0 = \d0.s0]]$:] By induction.
\item[Case $[[t0 = fix s0]]$:] We have several cases:
\begin{description}
\item[Case \rul{R\_Fix}/\rul{R\_Fix}:] By induction.
\item[Case \rul{R\_Fix}/\rul{R\_Unroll}:] It must be that:
\begin{itemize}
\item $[[t0 = fix (\a:rel k1.s1)]]$
\item $[[t1 = fix (\a:rel k2.s2)]]$ where $[[k1 ~> k2]]$ and $[[s1 ~> s2]]$
\item $[[t2 = s3[fix (\a:rel k3.s3)/a] ]]$ where $[[k1 ~> k3]]$ and
$[[s1 ~> s3]]$
\end{itemize}
The induction hypothesis gives us $[[k4]]$ and $[[s4]]$ such that
$[[k2 ~> k4 <~ k3]]$ and $[[s2 ~> s4 <~ s3]]$.
Choose $[[t3 = s4[fix (\a:rel k4.s4)/a] ]]$. We must show
$[[t1 ~> t3]]$ and $[[t2 ~> t3]]$. The first is by \rul{R\_Unroll},
and the second is by \pref{lem:red-subst-par}.
\item[Case \rul{R\_Unroll}/\rul{R\_Unroll}:] It must be that:
\begin{itemize}
\item $[[t0 = fix (\a:rel k1.s1)]]$
\item $[[t1 = s2[fix (\a:rel k2.s2)/a] ]]$ where $[[k1 ~> k2]]$ and $[[s1 ~> s2]]$
\item $[[t2 = s3[fix (\a:rel k3.s3)/a] ]]$ where $[[k1 ~> k3]]$ and $[[s1 ~> s3]]$
\end{itemize}
The induction hypothesis gives us $[[k4]]$ and $[[s4]]$ such that
$[[k2 ~> k4 <~ k3]]$ and $[[s2 ~> s4 <~ s3]]$.
Choose $[[t3 = s4[fix (\a:rel k4.s4)/a] ]]$ and we are done
by \pref{lem:red-subst-par}.
\end{description}
\end{description}
\end{proof}

\begin{lemma}[Confluence]
\label{lem:confluence}
Let $[[ti]]$ denote an erased type.
If $[[t1 ~>* t2]]$ and $[[t1 ~>* t3]]$, then there exists
$[[t4]]$ such that $[[t2 ~>* t4 *<~ t3]]$.
\end{lemma}

\begin{proof}
Consequence of \pref{lem:local-diamond}.
\end{proof}

\begin{lemma}[$[[PI]]$-reduction]
\label{lem:pi-red}
If $[[PI d.t ~> s]]$, then there exist $[[d']]$ and $[[t']]$
such that $[[s = PI d'.t']]$, $[[d ~> d']]$, and $[[t ~> t']]$.
\end{lemma}

\begin{proof}
Case anlysis on $[[PI d.t ~> s]]$.
\end{proof}

\begin{lemma}[$[[\]]$-reduction]
\label{lem:lam-red}
If $[[\ d.t ~> s]]$, then there exist $[[d']]$ and $[[t']]$
such that $[[s = \ d'.t']]$, $[[d ~> d']]$, and $[[t ~> t']]$.
\end{lemma}

\begin{proof}
Case anlysis on $[[\ d.t ~> s]]$.
\end{proof}

\begin{lemma}[Coercion substitution/erasure]
\label{lem:co-subst-erase}
$[[|t[g/c]| = |t|]]$
\end{lemma}

\begin{proof}
By induction on the structure of $[[t]]$.
\end{proof}

\begin{definition}[$[[promote]]$]
TODO
\end{definition}

\begin{definition}[$[[nokind]]$]
Define the operation $[[nokind_S;G(g) = h]]$ as follows:
$[[nokind_S;G(kind g) = promote_S;G(g)]]$; $[[nokind_S;G(g)]]$ where $[[g]]$
is not headed by \ottkw{kind} simply recurs on the component coercions.
\end{definition}

\begin{lemma}[Eliminating \ottkw{kind}]
TODO
\end{lemma}

\begin{lemma}[Completeness of type reduction] ~
\label{lem:complete-red}
If $[[G]]$ contains no coercion bindings and
$[[S;G |-co g : t1 ~ t2]]$, then:
\begin{enumerate}
\item There exists some
erased type $[[ee]]$ such that $[[|t1| ~>* ee *<~ |t2|]]$.
\item If $[[S;G |-ty t1 : k1]]$ and $[[S;G |-ty t2 : k2]]$,
then there exists some erased type $[[ee]]$ such that
$[[|k1| ~>* ee *<~ |k2|]]$.
\end{enumerate}
\end{lemma}

\begin{proof}
By mutual induction. For the purposes of exposition, we present
the types cases separately from the kinds cases, but in a formal
proof, they would be interleaved. First, the types cases:

\begin{description}
\item[Case \rul{Co\_Var}:] Impossible.
\item[Case \rul{Co\_Refl}:] Choose $[[ee = |t1|]]$ and we are done.
\item[Case \rul{Co\_Sym}:] By induction.
\item[Case \rul{Co\_Trans}:] Use the metavariable names from the rule:
\[
\ottdruleCoXXTrans{}
\]
The induction hypothesis gives us $[[ee1]]$ such that $[[|t1| ~>* ee1 *<~ |t2|]]$.
It also gives us $[[ee2]]$ such that $[[|t2| ~>* ee2 *<~ |t3|]]$.
\pref{lem:confluence} gives us $[[ee3]]$ such that
$[[ee1 ~>* ee3 *<~ ee2]]$. Thus, $[[ee3]]$ is a common reduct
of $[[|t1|]]$ and $[[|t3|]]$ as desired.
\item[Case \rul{Co\_Coherence}:] We know that $[[|t1| = |t2|]]$ and thus
either can be the common reduct.
\item[Case \rul{Co\_Con}:] Immediate.
\item[Case \rul{Co\_AppRel}:] By induction and repeated use of \rul{R\_AppRel}.
\item[Case \rul{Co\_AppIrrel}:] By induction and repeated use of \rul{R\_AppIrrel}.
\item[Case \rul{Co\_CApp}:] By induction.
\item[Case \rul{Co\_PiTy}:] 
By induction. Note that the substitution in the result of \rul{Co\_PiTy}
is erased by coercion erasure and so poses no complications.
\item[Case \rul{Co\_PiCo}:]
Similar to previous case.
\item[Case \rul{Co\_Case}:] By induction and \rul{R\_Case}.
\item[Case \rul{Co\_Lam}:] Similar to \rul{Co\_PiTy}.
\item[Case \rul{Co\_CLam}:] Similar to previous case.
\item[Case \rul{Co\_Fix}:] By induction and repeated use of \rul{R\_Fix}.
\item[Case \rul{Co\_ArgK}:]
The induction hypothesis gives us $[[ee0]]$ such that
$[[|PI a:rel k1.s1| ~>* ee0 *<~ |PI a:rel k2.s2|]]$.
By repeated use of \pref{lem:pi-red}, we see that
$[[ee0 = PI a:rel k3.s3]]$ such that $[[|k1| ~>* k3 *<~ |k2|]]$
and $[[|s1| ~>* s3 *<~ |s2|]]$. Thus $[[k3]]$ is a reduct of 
$[[|k1|]]$ and $[[|k2|]]$ as desired.
\item[Case \rul{Co\_CArgK1}:]
Like previous case.
\item[Case \rul{Co\_CArgK2}:]
Like previous case.
\item[Case \rul{Co\_ArgKLam}:]
Like case \rul{Co\_ArgK}, but appealing to \pref{lem:lam-red}.
\item[Case \rul{Co\_CArgKLam1}:]
Like previous case.
\item[Case \rul{Co\_CArgKLam2}:]
Like previous case.
\item[Case \rul{Co\_Inst}:]
We use the metavariable names from the rule:
\[
\ottdruleCoXXInst{}
\]
The induction hypothesis (along with \pref{lem:pi-red})
gives us $[[ee0]]$ and $[[ee1]]$ such that
$[[|s1| ~>* ee0 *<~ |s2|]]$ and $[[|t1| ~>* ee1 *<~ |t2|]]$.
\pref{lem:red-star-subst} (with \pref{lem:subst-erase}) then tells us that
$[[|s1[t1/a]| ~>* ee0[ee1/a] *<~ |s2[t2/a]|]]$ as desired.
\item[Case \rul{Co\_CInst}:]
By induction and \pref{lem:co-subst-erase}.
\item[Case \rul{Co\_InstLam}:]
Like case \rul{Co\_Inst}, but appealing to \pref{lem:lam-red}.
\item[Case \rul{Co\_CInstLam}:]
Like previous case.
\item[Case \rul{Co\_Nth}:]
By induction and \pref{lem:app-red}.
\item[Case \rul{Co\_Kind}:]
By induction.
\item[Case \rul{Co\_Step}:]
We now must consider the different step rules:
\begin{description}
\item[Case \rul{S\_BetaRel}:] By \rul{R\_BetaRel}.
\item[Case \rul{S\_BetaIrrel}:] By \rul{R\_BetaIrrel}.
\item[Case \rul{S\_CBeta}:] By \rul{R\_CBeta} and \pref{lem:co-subst-erase}.
\item[Case \rul{S\_Match}:] By \rul{R\_Match}.
\item[Case \rul{S\_Unroll}:] By \rul{R\_Unroll}.
\item[Case \rul{S\_Trans}:] $[[|t1| = |t2|]]$ in this case.
\item[Congruence rules:] By induction.
\item[Push rules:] $[[|t1| = |t2|]]$ in these cases.
\end{description}
\end{description}

We now proceed to the kinds cases. We use \pref{lem:determinacy} here
to ensure that kinds mentioned in premises match up with the kinds we
wish to prove joinability about.

\begin{description}
\item[Case \rul{Co\_Var}:] Impossible.
\item[Case \rul{Co\_Refl}:] Choose $[[ee = |k1|]]$ and we are done.
\item[Case \rul{Co\_Sym}:] By induction.
\item[Case \rul{Co\_Trans}:] Similar to the \rul{Co\_Trans} case for
types, above.
\item[Case \rul{Co\_Coherence}:] By induction.
\item[Case \rul{Co\_Con}:] We adopt the metavariable names from the rule:
\[
\ottdruleCoXXCon{}
\]
We invert $[[S;G |-ty H{ss} : k1]]$ and $[[S;G |-ty H{ss'} : k2]]$.
These both can be proved only by \rul{Ty\_Con}.
The $[[H]]$ in both judgments is the same, and so by \pref{lem:ctx-reg}
and \pref{lem:determinacy-tycon}, we have unique $[[D1]]$, $[[D2]]$,
and $[[H']]$ such that $[[S |-tc H : D1;D2;H']]$. We can thus
see that $[[k1 = MPI(D2[ss/dom(D1)]).H'{} ss]]$
and $[[k2 = MPI(D2[ss'/dom(D1)]).H'{} ss']]$.
The induction hypothesis gives us $[[ees']]$ such that, $\forall [[i]]$,
$[[|si| ~>* eei' *<~ |si'|]]$.
Choose $[[ee = MPI (|D2|[ees'/dom(D1)]). H'{} ees']]$. We must show
the following:
\begin{itemize}
\item $[[MPI (|D2|[|ss|/dom(D1)]). H'{} |ss| ~>* ee]]$
\item $[[MPI (|D2|[|ss'|/dom(D1)]). H'{} |ss'| ~>* ee]]$
\end{itemize}
Both of these follow from \pref{lem:red-star-subst}.
\item[Case \rul{Co\_AppRel}:] We adopt the metavariable names from the rule:
\[
\ottdruleCoXXAppRel{}
\]
We invert both $[[S;G |-ty t1 s1 : k1]]$ and $[[S;G |-ty t2 s2 : k2]]$.
Both must be proved by \rul{Ty\_AppRel}. We thus get all of the following:
\begin{itemize}
\item $[[S;G |-ty t1 : PI a:Rel k3.k4]]$
\item $[[S;G |-ty s1 : k3]]$
\item $[[k1 = k4[s1/a] ]]$
\item $[[S;G |-ty t2 : PI' a:Rel k5.k6]]$
\item $[[S;G |-ty s2 : k5]]$
\item $[[k2 = k6[s2/a] ]]$.
\end{itemize}
The (kind) induction hypothesis gives us $[[ee1]]$ such that
$[[PI a:Rel |k3|.|k4| ~>* ee1 *<~ PI' a:Rel |k5|.|k6|]]$.
\pref{lem:pi-red} gives us $[[ee3]]$ and $[[ee4]]$ such that
$[[ee1 = PI'' a:Rel ee3.ee4]]$.
The (type) induction hypothesis also gives us $[[ee2]]$ such that
$[[|s1| ~>* ee2 *<~ |s2|]]$.
Choose $[[ee = ee4[ee2/a] ]]$.
We must show $[[|k4[s1/a]| ~>* ee4[ee2/a] *<~ |k6[s2/a]|]]$.
\pref{lem:subst-erase} reduces this to
$[[|k4|[|s1|/a] ~>* ee4[ee2/a] *<~ |k6|[|s2|/a] ]]$.
We are done by two uses of \pref{lem:red-star-subst}.
\item[Case \rul{Co\_AppIrrel}:] Similar to previous case.
\item[Case \rul{Co\_CApp}:] Similar to (but easier than -- no argument
to worry about) previous case.
\item[Case \rul{Co\_PiTy}:] 
\pref{lem:prop-reg} tells us that the types related by the rule
are well-kinded; inversion tells us that both have kind $[[Type{}]]$.
We are done.
\item[Case \rul{Co\_PiCo}:]
Similar to previous case.
\item[Case \rul{Co\_Case}:] By induction.
\item[Case \rul{Co\_Lam}:]
We adopt the metavariable names from the rule:
\[
\ottdruleCoXXLam{}
\]
\pref{lem:kind-reg} tells us that
$[[\a:rel k1.t1]]$ and $[[\a:rel k2.(t2[a |> sym h/a])]]$ are both
well-kinded. Inversion then tells us
$[[S;G |- \a:rel k1.t1 : UPI a:rel k1.s1]]$
and $[[S;G |- \a:rel k2.(t2[a |> sym h/a]) : UPI a:rel k2. (s2[a |> sym h/a])]]$.
The induction hypothesis (on $[[S;G |-co h : k1 ~ k2]]$)
gives us $[[ee1]]$ such that
$[[|k1| ~>* ee1 *<~ |k2|]]$ and (operation on $[[S;G, a:rel k1 |-co g : t1 ~ t2]]$)
$[[ee2]]$ such that
$[[|s1| ~>* ee2 *<~ |s2|]]$. Noting that the substitution is immaterial
after erasure (that is, $[[|a |> sym h| = a]]$), we choose
$[[ee = UPI a:rel ee1.ee2]]$ and we are done by \pref{lem:red-star-subst}.
\item[Case \rul{Co\_CLam}:]
By induction.
\item[Case \rul{Co\_Fix}:]
We adopt the metavariable names from the rule:
\[
\ottdruleCoXXFix{}
\]
Inversion on $[[S;G |-ty fix t1 : k1]]$ tells us
$[[k1 = UPI a:rel k3.k4]]$ and $[[S;G |-ty t1 : UPI _:Rel k1.k1]]$.
Similarly, inversion on $[[S;G |-ty fix t2 : k2]]$ tells us
$[[k2 = UPI a:rel k5.k6]]$ and $[[S;G |-ty t2 : UPI _:Rel k2.k2]]$.
The induction hypothesis gives us $[[ee0]]$ such that
$[[|UPI _:Rel k1.k1| ~>* ee0 *<~ |UPI _:Rel k2.k2|]]$.
Use of \pref{lem:pi-red} gives us $[[ee1]]$ such that $[[|k1| ~>* ee1 *<~ |k2|]]$
and we are done.
\item[Case \rul{Co\_ArgK}:]
Inversion, \pref{lem:ctx-reg}, and \pref{lem:tyvar-reg} tell
 us that the related types both have kind $[[Type{}]]$. We are done.
\item[Case \rul{Co\_CArgK1}:]
TODO: Include kinds in phi. Then this is doable. Argh.

\end{description}
\end{proof}

\begin{definition}[Erased values]
An \emph{erased value} is an erased type $[[ee]]$ such that there exists a
value $[[v]]$ with $[[|v| = ee]]$.
\end{definition}

\begin{definition}[Consistency over erased types]
We overload the notation $[[t1 ! t2]]$ to include relating erased types,
where the rules are the same except that all types are erased.
\end{definition}

\begin{lemma}[Consistency is reflexive]
\label{lem:cons-refl}
$[[ee ! ee]]$
\end{lemma}

\begin{proof}
Case analysis on the structure of $[[ee]]$.
\end{proof}

\begin{lemma}[Consistency is symmetric]
\label{lem:cons-sym}
If $[[t1 ! t2]]$, then $[[t2 ! t1]]$.
\end{lemma}

\begin{proof}
Case analysis on $[[t1 ! t2]]$.
\end{proof}

\begin{lemma}[Consistency of reduction]
\label{lem:cons-red}
If $[[ee1 ~> ee2]]$ and $[[ee1]]$ is an erased value, then $[[ee2]]$ is
an erased value and $[[ee1 ! ee2]]$.
\end{lemma}

\begin{proof}
By case analysis over $[[ee1 ~> ee2]]$.
\begin{description}
\item[Case \rul{R\_Refl}:] By \pref{lem:cons-refl}.
\item[Case \rul{R\_AppRel}:] Since $[[ee1]]$ is an erased value, it must
be $[[H** ps]]$. We are done by \pref{lem:app-red}.
\item[Case \rul{R\_AppIrrel}:] Similar to previous case.
\item[Case \rul{R\_CApp}:] Similar to previous case.
\item[Case \rul{R\_Pi}:] By the definition of $[[~>]]$.
\item[Case \rul{R\_Case}:] Impossible.
\item[Case \rul{R\_Lam}:] Immediate.
\item[Case \rul{R\_Fix}:] Impossible.
\item[Case \rul{R\_BetaRel}:] Impossible.
\item[Case \rul{R\_BetaIrrel}:] Impossible.
\item[Case \rul{R\_CBeta}:] Impossible.
\item[Case \rul{R\_Match}:] Impossible.
\item[Case \rul{R\_Unroll}:] Impossible.
\end{description}
\end{proof}

\begin{lemma}[Consistency of reductions]
\label{lem:cons-reds}
If $[[ee1 ~>* ee2]]$ and $[[ee1]]$ is an erased value, then $[[ee2]]$ is
an erased value and $[[ee1 ! ee2]]$.
\end{lemma}

\begin{proof}
By induction on the length of the reduction chain, appealing to
\pref{lem:cons-red}.
\end{proof}

\begin{lemma}[Transitivity of consistency on values]
\label{lem:trans-cons-value}
If $[[ee1]]$, $[[ee2]]$ and $[[ee3]]$ are all erased values with
$[[ee1 ! ee2]]$ and $[[ee2 ! ee3]]$, then $[[ee1 ! ee3]]$.
\end{lemma}

\begin{proof}
Direct from the definition of $[[!]]$.
\end{proof}

\begin{lemma}[Erasure/consistency]
\label{lem:erase-cons}
If $[[|t1| ! |t2|]]$, then $[[t1 ! t2]]$.
\end{lemma}

\begin{proof}
If either $[[t1]]$ or $[[t2]]$ is not a value, the result is immediate.
We thus assume both are values.
Proceed by case analysis on the structure of $[[t1]]$.

\begin{description}
\item[Case $[[t1 = a]]$:] Impossible.
\item[Case $[[t1 = H{ts} ]]$:] We have $[[|t1| = H**]]$, and thus
$[[|t2| = H** ps]]$. From the definition of $[[|t2|]]$, we can see
that $[[t2]]$ must be headed by $[[H]]$ or be a cast. The latter is
impossible, as a cast is not a value. Thus $[[t2]]$ is headed by
$[[H]]$ and we are done.
\item[Case $[[t1 = s1 s2]]$:] For $[[t1]]$ to be a value, it must
be headed by some constant $[[H]]$. Proceed as in the previous case.
\item[Case $[[t1 = PI d.t]]$:] Similar to case for $[[H{ts} ]]$.
\item[Case $[[t1 = t |> g]]$:] Impossible.
\item[Case $[[t1 = g]]$:] Impossible.
\item[Case $[[t1 = case_k t of alts]]$:] Impossible.
\item[Case $[[t1 = \d.s]]$:] Similar to case for $[[H{ts} ]]$.
\item[Case $[[t1 = fix s]]$:] Impossible.
\end{description}
\end{proof}

\begin{lemma}[Consistency]
If $[[G]]$ contains no coercion bindings and $[[S;G |-co g : t1 ~ t2]]$,
then $[[t1 ! t2]]$.
\end{lemma}

\begin{proof}
If either $[[t1]]$ or $[[t2]]$ is not a value, then we are done. So, we assume
that both are values.
\pref{lem:complete-red} gives us $[[ee]]$ such that $[[|t1| ~>* ee *<~ |t2|]]$.
\pref{lem:cons-reds} tells us that $[[|t1| ! ee]]$ and $[[|t2| ! ee]]$.
\pref{lem:cons-sym} tells us that $[[ee ! |t2|]]$, and then
\pref{lem:trans-cons-value} tells us that $[[|t1| ! |t2|]]$.
Finally, \pref{lem:erase-cons} gives us $[[t1 ! t2]]$ as desired.
\end{proof}

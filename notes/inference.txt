
INFERENCE SECTION (ACTUALLY, OMIT)
- ITyC_Case is in the unstarred judgment, because of tauifyMultipleMatches
- Similarly, |->alt can use the unstarred checking judgment, for the same reason.
- Unclear where ITyC_Fix should live. Starred judgment or not? I think this
  difference is noticeable by the user. AHA! Decision: never duplicate a polytype.
  Therefore: Fix must live in the unstarred judgment.

PRACTICALITIES
- Class constraints are precisely inferred relevant arguments.
- Instances are just another form of given, and happily live in G/P
- There are two sets of variable names. a,b,x denote names a Haskell user can
  write. $a denotes a name that a Haskell user cannot write. All are valid
  names in Pico, and we can freely rename between. Note use in ITyC_SkolRel.
- Very cool how the inference rules match the code. Even the difference between
  matchExpectedFunTy and matchActualFunTy is present.
- Generalizing unification variables is simpler in the implementation: we
  just wrap in an implication constraint. Why no need for substitution?
- Don't differentiate Constraint from Type. See PtC_Constrained.
- Can't really do decideGeneralisationPlan (i.e. Let should not be generalized)
  properly because I can't easily distinguish between top-level and local
  lets. Solution: consider a top-level let a new declaration form, just like
  OutsideIn. Do generalization there.

SOUNDNESS
- DONE theta|_zs as domain restriction

OMIT?
- Fix requires its argument to take a visible argument. I just can't
  be bothered to generalize this.
- Not sure whether to use subsumption or straight-up equality in
  matchExpectedFunTy (|->fun). GHC uses subsumption here. But I think
  an equality predicate is powerful enough.
- All unification variables must be gone during zonking.

Design decisions (DONE):
- DONE Include let (with a desugaring to use lambda) but not letrec. The only
  way I can see doing letrec is to mimic GHC's local monomorphic functions
  and exported polymorphic functions (i.e. AbsBinds), and I don't want to
  get involved with that. I will comment about this in the writeup.

Preprocessing (DONE):
- Each qvar is appropriately labeled.
- `case scrut of _ -> blah` becomes `blah`
- case patterns are expanded out (a la Match.hs)
- redundant matches are dropped
   --> Thus, the first alt, if there is one, has a constructor
- implicit variables are added to pattern matches

DONE:
- DONE My Haskell patterns (H xs) are simpler than they really should be.
- DONE No constraints! This is because everything has a name.
- DONE Case has an synthesis version that doesn't use the dependent equality and
  and checking version that does.
- DONE We don't need "touchable" variables to be tracked. We just stop unifying
  once we walk past an equality constraint in the unification telescope
- DONE IGen_Ty is a bit punny around dom(d)
- DONE SB_DeepSkol from VTA paper has become ITyC_Skol. Note that it's not deep.
  We thus must generalize in the Infer rule. At first, I was quite concerned
  about solving in the middle of constraint generation. But GHC actually
  does this, too, whenever it encounters a let.
- DONE type inference can introduce only unif variables
- DONE Worker/wrapper is compulsory. There is no syntax for H in Haskell, only
  x. Why? Because otherwise, we can't use visible type application on universals,
  which is quite annoying in practice.
  Example: just : UPI (a :Irrel Type{}). MPI (x :Rel a). Maybe{} a
           just = \ @(a :Irrel Type{}). Just{a}
  It's important to keep the MPIs where possible for unsaturated matching.
- DONE Must comment about how |- judgments are extended. In particular, |-ctx.
  With UCtx_TyVar and UCtx_CoVar
- DONE And we allow only Inf on coercion abstractions.
- DONE We often elide the forall{} and _{}.
- DONE We can't always just use a coercion in |->fun because then we won't be
  able to recognize proper dependent function types. In other words,
  application forms default to non-dependent application.

OLD:
- OLD Label given class constraints with :c
- OLD The old +> judgment (see paper from 2 years ago) required funny business
  around quantifying over propositions... and it also required having the
  body of a Pi-type be something other than *. All for syntactic silliness.
  So I've introduced :g bindings.
- OLD Put givens in O with :g
- OLD Use g(D) to make all bindings givens.
- OLD Givens are *not* available to the right of |-.
- OLD Only unification variable kinds can refer to givens.
- OLD :c is just like :g, except the solver uses :c bindings.
- OLD: syntax to explain: au : k \in P under D
- OLD: The whole tree structure of P/O.
- OLD theta \ zs as domain exclusion
- OLD My treatment of <..|..> seems novel. Compare to Pottier & Remy, which
  do not handle dependency. UPDATE: Yes, to compare to Pottier & Remy,
  but it's really just like Gundry's treatment.
- OLD Syntactic pun: forall D. O means apply the forall to each binding
  separately
- OLD The theta arg to a unification variable is called the "closing substitution"
  |=u is "validity of closing substitution"

- WRONG? prop:solver-sound implies that no unif variables that depend on a given
  can be generalized over. This is correct.



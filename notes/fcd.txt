TO PROVE:
 - DONE. Preservation
 - DONE. Progress
 - DONE. Type erasure vis-a-vis relevance
 - 'twould be fun to relate relevance and roles.

Binders store the following flags:
 - DONE relevance
 - DONE matchability

 - DONE BUT NOT visibility
 - DONE OR dependency


Features missing:
 - levity polymorphism (would need to generalize Ty_Pi)
 - Left/Right. Sorta impossible.

Notation:
 - DONE dom(D) is a list of type/coercion variables zs.
 - DONE prefix(.) takes the prefix of a list
 - DONE \tilde{\Pi} is the unmatchable Pi.
 - DONE We write H for H[]
 
 - DONE Rel(G) makes all bindings in G relevant.
 - DONE `let` in coercions is defined by macro-expansion

Generativity/injectivity:
 - DONE A generative/injective thing is called "matchable".
 - DONE The opposite of "matchable" is "unmatchable".


Erasure:
 - DONE
   We have coercion abstraction, which cannot get erased. But we will prove
   that type inference never creates a coercion abstraction except in the
   body of a pattern match. And in this position, whenever the match fires,
   it will get applied, as per S_Match. So we'll never get stuck on a
   coercion abstraction. Yet, coercion abstractions are useful in simplifying
   the grammar for case expressions (BIG WIN) and also in let-floating.
   Admittedly, a let-floated coercion abstraction might cause stuckness,
   but it is up to the optimizer to make sure this doesn't happen.

DESIGN DECISIONS:
 - INVALID Two instantiation operators: to make inversion work. Well, really, to
   make promotion work, but we've scrapped promotion. (I have undone this
   change in the rendering.)
 - DONE Not putting coercion in the language of types: to avoid awkwardness of
   "lifting" a coercion in the lifting lemma. Spreads out complexity.
 - DONE Not putting prop in type: Cleaner once the previous decision was made.
 - DONE Different argument forms: To avoid overlap in the erased language.
   Note that ~> is untyped, so we can't tell the difference between
   relevant application and irrelevant application anymore.
 - DONE Kinds in phi: to make CArgK{1,2} work. Note that we need these for
   CPush.
 - DON'T CARE Not erasing the {} parameters to tycons: we need the kinds of the types
   in Nth to be joinable.
 - OLD! WRONG! Looseness in R_Pi and R_Lam: necessary for completeness of rewrite
   relation. Otherwise, the induction hypothesis would be needed with
   a coercion variable in the context.
 - OLD! WRONG! NB: Consistency depends on preservation for the Step case.
 - DONE In my ott code, I always write the kinds as a self-check.
 - DONE res must handle many cases at once, because we use it to look past
   the PIs in a partially-applied constant, and later telescope kinds
   might refer to earlier ones, even if the end result mentions only
   universals. Urgh.
 - DONE The system is built so that preservation does not depend on consistency.
   If it did, we could erase the typing rule premises to the push rules
   other than for KPush, which is needed to extract the ts'.
 - DONE The typing premise on Co_Step for the result is because preservation
   needs regularity (for S_APush). Without Co_Step's premise, regularity
   would need preservation. Alternatively, a premise could be added to APush.
   However, because consistency depends on regularity, making this change
   requires consistency to depend on preservation. This isn't harmful,
   but it all seems cleaner without this dependency.
 - DONE The three-binder approach to the Π-coercion runs into trouble in proving
   consistency, because it introduces a coercion variable. So I'm going with
   the asymmetrical one-binder approach, as implemented.
 - DONE Need M/UPI to allow matching on partially applied things.
 - DONE If we didn't have the c ~# g restrictions, we wouldn't be able
   to match on partially-applied GADT data constructors. See example below.
 - DON'T CARE The ArgK rules, the Res rules, and the Inst rules all require the same PI
   to be used in both types in the proposition of a coercion. The coincidence
   of the PIs is not strictly necessary -- all the language properties we prove
   would remain true if we loosen this. However, the generality is never
   required, as a coercion between two different PIs is impossible without
   a bogus assumption. It seems simpler just to use the same PI on both sides,
   so that is what we do. Generalizing would allow us to also generalize the
   PushRel, PushIrrel, and CPush rules to allow different PIs on either side,
   but why bother?
 - DONE Getting partially-applied matching to work is laborious. It requires complication
   in Ty_Case and Alt_Match, the MPI/UPI distinction, and unification in the typing
   rules (see critical use of matching in Alt_Match as used in the KPush case in
   the Progress theorem). See "weird case" below for an illustrative example of
   how hard this is.
 - DONE The c ~# g trick from the nokinds paper is needed to get consistency to
   go through. But this doesn't diminish Haskell expressiveness ever -- equality
   over polytypes is never needed in Haskell due to its predicative nature.
 - Attempt to get representation polymorphism working (see tag rep-poly). The
   problem arises when proving that ArgK is sound. We can't know the rep
   of the argument from the kind of an arrow (which, for relevant arrows, is
   always LazyPtr). So we're stuck. The way out is to label (relevant) colons
   with the representation of the kind. But then to get Inst working, we also
   need to label relevant Pis with the rep of the result. Ircch. In the end,
   what is representation polymorphism? A gross hack. It's something we do during
   type inference because we don't want meta-rep-vars or something -- we're
   hooking into the existent system for solving for types. We don't really
   need rep polymorphism in the internal language, especially when doing so
   would mean labeling every Pi. We can just pretend with have a finite number
   of "undefined"s and "error"s that cover the space and a whole bunch of Pis.
   There's not much point in formalising it.
 - About point above: it doesn't address the weird variable-escape that can
   happen with representation polymorphism. May need to think a bit more about
   that.
 - DONE Need DefaultCo because KPush requires the premises of Alt_Match.
 - "split" is a viable extension. But it's technically painful (requires a very
   baroque push rule and more kinds to be kept in the coercion-erased language).

Example about partially-applied GADT data constructors:

data T' = K'
data T = (T ~ T') => K

K :: PI c : T ~ T'. T

? :: T ~ T'
PI c:(<T>,<T'>).c  :: (PI c:T~T'. T) ~ (PI c:T~T'. T')

case K |> (PI c:T~T'. c) of
  K' -> ...


---------------
some scratchwork:

build_kpush_co:

build_kpush_co(g; empty) = g
build_kpush_co(g; ts,t)  = let h = build_kpush_co(g; ts) in
                           h@(t ||> argk build_kpush_co(g; ts))

data T k where
  MkT :: forall a. Proxy (a :: k) -> MkT k

case (MkT Bool True (P Bool True)) |> co of ...
  where
    co :: T Bool ~ T s

-->

case (MkT s (True |> g0) (P Bool True |> g1)) of ...
  where
    g0 :: Bool ~ s
    g1 :: Proxy Bool True ~ Proxy s (True |> g0)

    g0 = argk (<forall k (a :: k). Proxy k a -> MkT k>@(nth 0 co))
    g1 = argk (<forall k (a :: k). Proxy k a -> MkT k>@(nth 0 co)@(<True> |>> g0)

-------------------------
Example:

  Replicate.

  Σ = Σ₀, Nat : (·)
        , Zero : (·; Nat)
	, Succ : (_ :R Nat; Nat)
	, Vec : (a : Type, n : Nat)
	, Nil : (c : n ~ Zero; Vec)
	, Cons : (n' :I Nat, c : n ~ Succ n', _ :R a, _:R Vec a n'; Vec)

  rep : Π~(a :I Type) (n :R Nat). a → Vec a n
  rep = λ(a :I Type).
        fix λ(r :R Π~(n :R Nat). a → Vec a n).
	    λ(n :R Nat).
	    λ(x :R a).
	    case_(Vec a n) n of
	      Zero → c. Nil a n c
	      Succ n' → c. Cons a n n' c x (r n' x)


------------
Example of weird unsaturated case

data X where
  MkX :: MPI (k :Irrel Type) (a :Irrel k) (x :Rel Proxy k a). X

case_() (blah : MPI (a :Irrel Bool) (x :Rel Proxy Bool a). X) of
  MkX -> \ (k :Irrel Type) (c : blah [MPI (a:Irrel Bool) (x :Rel Proxy Bool x). X]~[MPI (a :Irrel k) (x :Rel Proxy k a). X] MkX k) -> ()

case_() (blah : MPI (a :Irrel Type) (x :Rel Type). X) of
  MkX -> \ (k :Irrel Type) (c : blah [MPI (a:Irrel Type) (x :Rel Type). X]~[MPI (a :Irrel k) (x :Rel Proxy k a). X] MkX k) -> ()





-----------------------
Stuff about lack of congruence:

x:Int |- \ (c : Int ~ Bool). x |> c : PI (c : Int ~ Bool). Bool

Suppose g : 3 ~ 4

g2 : \ (c : Int ~ Bool). 3 |> c   ~   \ (c : Int ~ Bool). 4 |> c

BAD: g2 = \c : (<Int>,<Bool>). (3 |> c ~={sym c} 3) ;; g ;; (4 ~={sym c} 4 |> c)

GOOD?: g2 = g3 ;; g4 ;; g5

g3 : \c:Int ~ Bool. 3 |> c     ~     \c:Int ~ Bool.3
g3 = (\c:Int ~ Bool. 3 |> c) ~={g6} (\c:Int ~ Bool. 3)

g6 : PI c:Int~Bool. Bool ~ PI c:Int~Bool. Int   <== DOES NOT EXIST.

g4 = \c : (<Int>,<Bool>). g : \c:Int ~ Bool.3   ~   \c:Int ~ Bool.4


---------------------------------------------------------------

x:Int |- PI (c : Int ~ Bool). Proxy Bool (x |> c) : Type
Suppose empty |- g : Id 3 ~ 3

Want:
x:Int |- h : PI (c : Int ~ Bool). Proxy Bool (Id 3 |> c)   ~    PI (c : Int ~ Bool). Proxy Bool (3 |> c)

Ψ = x ↦ (Id 3, 3, g)

h = Ψ(τ)
  = Ψ(PI (c : Int ~ Bool). Proxy Bool (x |> c))
  = PI (c1,c2) : (Ψ(Int), Ψ(Bool)). (Ψ, c ↦ (c1, c2))(Proxy Bool (x |> c))
  = PI (c1,c2) : (<Int>,<Bool>). <Proxy Bool> (Ψ, c ↦ (c1, c2))(x |> c)
  = PI (c1,c2) : (<Int>,<Bool>). <Proxy Bool> (g ▹ (Ψ₁(c) ~ Ψ₂(c)))
  = PI (c1,c2) : (<Int>,<Bool>). <Proxy Bool> (g ▹ (c1 ~ c2))
  = PI (c1,c2) : (<Int>,<Bool>). <Proxy Bool> ((sym ((sym g) ▹ c2)) ▹ c1)

----------------------------------------
empty |- h0 : forall (c1 : Int ~ Bool). Int   ~   forall (c2 : Int ~ Bool). Bool

h0 = forall_(<Int>,<Bool>) (c1,c2). kind (<3> |> c1)

